cscope 15 $HOME/Documents/RepoHouse/linux-system-interface/60.Sockets-Server-Design               0000015203
	@become_daemon.c

5 
	~<sys/°©.h
>

6 
	~<f˙é.h
>

7 
	~"become_d´m⁄.h
"

8 
	~"épi_hdr.h
"

10 
	$becomeD´m⁄
(
Êags
)

12 
maxfd
, 
fd
;

14 
	`f‹k
()) {

17 : 
	`_exô
(
EXIT_SUCCESS
);

20 i‡(
	`£tsid
() == -1)

23 
	`f‹k
()) {

26 : 
	`_exô
(
EXIT_SUCCESS
);

29 i‡(!(
Êags
 & 
BD_NO_UMASK0
))

30 
	`umask
(0);

32 i‡(!(
Êags
 & 
BD_NO_CHDIR
))

33 
	`chdú
("/");

35 i‡(!(
Êags
 & 
BD_NO_CLOSE_FILES
)) {

36 
maxfd
 = 
	`sysc⁄f
(
_SC_OPEN_MAX
);

37 i‡(
maxfd
 == -1)

38 
maxfd
 = 
BD_MAX_CLOSE
;

40 
fd
 = 0; fd < 
maxfd
; fd++)

41 
	`˛o£
(
fd
);

44 i‡(!(
Êags
 & 
BD_NO_REOPEN_STD_FDS
)) {

45 
	`˛o£
(
STDIN_FILENO
);

47 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

49 i‡(
fd
 !
STDIN_FILENO
)

51 i‡(
	`dup2
(
STDIN_FILENO
, 
STDOUT_FILENO
) != STDOUT_FILENO)

53 i‡(
	`dup2
(
STDIN_FILENO
, 
STDERR_FILENO
) != STDERR_FILENO)

58 
	}
}

	@become_daemon.h

5 #i‚de‡
BECOME_DAEMON_H


6 
	#BECOME_DAEMON_H


	)

10 
	#BD_NO_CHDIR
 01

	)

11 
	#BD_NO_CLOSE_FILES
 02

	)

12 
	#BD_NO_REOPEN_STD_FDS
 04

	)

14 
	#BD_NO_UMASK0
 010

	)

16 
	#BD_MAX_CLOSE
 8192

	)

19 
becomeD´m⁄
(
Êags
);

	@error_functions.c

5 
	~<°d¨g.h
>

6 
	~"îr‹_fun˘i⁄s.h
"

7 
	~"épi_hdr.h
"

8 
	~"íame.c.öc
"

9 
NORETURN


11 
	$ãrmö©e
(
Boﬁón
 
u£Exô3
)

13 *
s
;

19 
s
 = 
	`gëív
("EF_DUMPCORE");

21 i‡(
s
 !
NULL
 && *s != '\0')

22 
	`ab‹t
();

23 i‡(
u£Exô3
)

24 
	`exô
(
EXIT_FAILURE
);

26 
	`_exô
(
EXIT_FAILURE
);

27 
	}
}

38 
	$ouçutEº‹
(
Boﬁón
 
u£Eº
, 
îr
, Boﬁó¿
ÊushStdout
,

39 c⁄° *
f‹m©
, 
va_li°
 
≠
)

41 
	#BUF_SIZE
 500

	)

42 
buf
[
BUF_SIZE
], 
u£rMsg
[BUF_SIZE], 
îrText
[BUF_SIZE];

44 
	`v¢¥ötf
(
u£rMsg
, 
BUF_SIZE
, 
f‹m©
, 
≠
);

46 i‡(
u£Eº
)

47 
	`¢¥ötf
(
îrText
, 
BUF_SIZE
, " [%s %s]",

48 (
îr
 > 0 &&Éº <
MAX_ENAME
) ?

49 
íame
[
îr
] : "?UNKNOWN?", 
	`°ªº‹
(err));

51 
	`¢¥ötf
(
îrText
, 
BUF_SIZE
, ":");

53 #i‡
__GNUC__
 >= 7

54 #¥agm®
GCC
 
dügno°ic
 
push


55 #¥agm®
GCC
 
dügno°ic
 
ign‹ed
 "-Wformat-truncation"

57 
	`¢¥ötf
(
buf
, 
BUF_SIZE
, "ERROR%†%s\n", 
îrText
, 
u£rMsg
);

58 #i‡
__GNUC__
 >= 7

59 #¥agm®
GCC
 
dügno°ic
 
p›


62 i‡(
ÊushStdout
)

63 
	`fÊush
(
°dout
);

64 
	`Âuts
(
buf
, 
°dîr
);

65 
	`fÊush
(
°dîr
);

66 
	}
}

71 
	$îrMsg
(c⁄° *
f‹m©
, ...)

73 
va_li°
 
¨gLi°
;

74 
ßvedEºno
;

76 
ßvedEºno
 = 
î∫o
;

78 
	`va_°¨t
(
¨gLi°
, 
f‹m©
);

79 
	`ouçutEº‹
(
TRUE
, 
î∫o
, TRUE, 
f‹m©
, 
¨gLi°
);

80 
	`va_íd
(
¨gLi°
);

82 
î∫o
 = 
ßvedEºno
;

83 
	}
}

88 
	$îrExô
(c⁄° *
f‹m©
, ...)

90 
va_li°
 
¨gLi°
;

92 
	`va_°¨t
(
¨gLi°
, 
f‹m©
);

93 
	`ouçutEº‹
(
TRUE
, 
î∫o
, TRUE, 
f‹m©
, 
¨gLi°
);

94 
	`va_íd
(
¨gLi°
);

96 
	`ãrmö©e
(
TRUE
);

97 
	}
}

114 
	$îr_exô
(c⁄° *
f‹m©
, ...)

116 
va_li°
 
¨gLi°
;

118 
	`va_°¨t
(
¨gLi°
, 
f‹m©
);

119 
	`ouçutEº‹
(
TRUE
, 
î∫o
, 
FALSE
, 
f‹m©
, 
¨gLi°
);

120 
	`va_íd
(
¨gLi°
);

122 
	`ãrmö©e
(
FALSE
);

123 
	}
}

128 
	$îrExôEN
(
î∫um
, c⁄° *
f‹m©
, ...)

130 
va_li°
 
¨gLi°
;

132 
	`va_°¨t
(
¨gLi°
, 
f‹m©
);

133 
	`ouçutEº‹
(
TRUE
, 
î∫um
, TRUE, 
f‹m©
, 
¨gLi°
);

134 
	`va_íd
(
¨gLi°
);

136 
	`ãrmö©e
(
TRUE
);

137 
	}
}

141 
	$Áèl
(c⁄° *
f‹m©
, ...)

143 
va_li°
 
¨gLi°
;

145 
	`va_°¨t
(
¨gLi°
, 
f‹m©
);

146 
	`ouçutEº‹
(
FALSE
, 0, 
TRUE
, 
f‹m©
, 
¨gLi°
);

147 
	`va_íd
(
¨gLi°
);

149 
	`ãrmö©e
(
TRUE
);

150 
	}
}

154 
	$ußgeEº
(c⁄° *
f‹m©
, ...)

156 
va_li°
 
¨gLi°
;

158 
	`fÊush
(
°dout
);

160 
	`Ârötf
(
°dîr
, "Usage: ");

161 
	`va_°¨t
(
¨gLi°
, 
f‹m©
);

162 
	`vÂrötf
(
°dîr
, 
f‹m©
, 
¨gLi°
);

163 
	`va_íd
(
¨gLi°
);

165 
	`fÊush
(
°dîr
);

166 
	`exô
(
EXIT_FAILURE
);

167 
	}
}

172 
	$cmdLöeEº
(c⁄° *
f‹m©
, ...)

174 
va_li°
 
¨gLi°
;

176 
	`fÊush
(
°dout
);

178 
	`Ârötf
(
°dîr
, "Command-line usageÉrror: ");

179 
	`va_°¨t
(
¨gLi°
, 
f‹m©
);

180 
	`vÂrötf
(
°dîr
, 
f‹m©
, 
¨gLi°
);

181 
	`va_íd
(
¨gLi°
);

183 
	`fÊush
(
°dîr
);

184 
	`exô
(
EXIT_FAILURE
);

185 
	}
}

	@error_functions.h

5 #i‚de‡
ERROR_FUNCTIONS_H


6 
	#ERROR_FUNCTIONS_H


	)

10 
îrMsg
(c⁄° *
f‹m©
, ...);

12 #ifde‡
__GNUC__


18 
	#NORETURN
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

	)

20 
	#NORETURN


	)

23 
	$îrExô
(c⁄° *
f‹m©
, ...Ë
NORETURN
 ;

25 
	$îr_exô
(c⁄° *
f‹m©
, ...Ë
NORETURN
 ;

27 
	$îrExôEN
(
î∫um
, c⁄° *
f‹m©
, ...Ë
NORETURN
 ;

29 
	$Áèl
(c⁄° *
f‹m©
, ...Ë
NORETURN
 ;

31 
	$ußgeEº
(c⁄° *
f‹m©
, ...Ë
NORETURN
 ;

33 
	$cmdLöeEº
(c⁄° *
f‹m©
, ...Ë
NORETURN
 ;

	@get_num.c

5 
	~<°dio.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

8 
	~<limôs.h
>

9 
	~<î∫o.h
>

10 
	~"gë_num.h
"

15 
	$gnFaû
(c⁄° *
‚ame
, c⁄° *
msg
, c⁄° *
¨g
, c⁄° *
«me
)

17 
	`Ârötf
(
°dîr
, "%†îr‹", 
‚ame
);

18 i‡(
«me
 !
NULL
)

19 
	`Ârötf
(
°dîr
, " (ö %s)", 
«me
);

20 
	`Ârötf
(
°dîr
, ": %s\n", 
msg
);

21 i‡(
¨g
 !
NULL
 && *arg != '\0')

22 
	`Ârötf
(
°dîr
, " of„ndögÅext: %s\n", 
¨g
);

24 
	`exô
(
EXIT_FAILURE
);

25 
	}
}

36 
	$gëNum
(c⁄° *
‚ame
, c⁄° *
¨g
, 
Êags
, c⁄° *
«me
)

38 
ªs
;

39 *
íd±r
;

40 
ba£
;

42 i‡(
¨g
 =
NULL
 || *arg == '\0')

43 
	`gnFaû
(
‚ame
, "nuŒ o∏em±y såög", 
¨g
, 
«me
);

45 
ba£
 = (
Êags
 & 
GN_ANY_BASE
Ë? 0 : (Êag†& 
GN_BASE_8
) ? 8 :

46 (
Êags
 & 
GN_BASE_16
) ? 16 : 10;

48 
î∫o
 = 0;

49 
ªs
 = 
	`°πﬁ
(
¨g
, &
íd±r
, 
ba£
);

50 i‡(
î∫o
 != 0)

51 
	`gnFaû
(
‚ame
, "°πﬁ(ËÁûed", 
¨g
, 
«me
);

53 i‡(*
íd±r
 != '\0')

54 
	`gnFaû
(
‚ame
, "n⁄numîi¯ch¨a˘îs", 
¨g
, 
«me
);

56 i‡((
Êags
 & 
GN_NONNEG
Ë&& 
ªs
 < 0)

57 
	`gnFaû
(
‚ame
, "√g©ivêvÆuênŸáŒowed", 
¨g
, 
«me
);

59 i‡((
Êags
 & 
GN_GT_0
Ë&& 
ªs
 <= 0)

60 
	`gnFaû
(
‚ame
, "vÆuêmu° bê> 0", 
¨g
, 
«me
);

62  
ªs
;

63 
	}
}

68 
	$gëL⁄g
(c⁄° *
¨g
, 
Êags
, c⁄° *
«me
)

70  
	`gëNum
("gëL⁄g", 
¨g
, 
Êags
, 
«me
);

71 
	}
}

76 
	$gëI¡
(c⁄° *
¨g
, 
Êags
, c⁄° *
«me
)

78 
ªs
;

80 
ªs
 = 
	`gëNum
("gëI¡", 
¨g
, 
Êags
, 
«me
);

82 i‡(
ªs
 > 
INT_MAX
 ||Ñe†< 
INT_MIN
)

83 
	`gnFaû
("gëI¡", "öãgî ouào‡ønge", 
¨g
, 
«me
);

85  
ªs
;

86 
	}
}

	@get_num.h

5 #i‚de‡
GET_NUM_H


6 
	#GET_NUM_H


	)

8 
	#GN_NONNEG
 01

	)

9 
	#GN_GT_0
 02

	)

12 
	#GN_ANY_BASE
 0100

	)

13 
	#GN_BASE_8
 0200

	)

14 
	#GN_BASE_16
 0400

	)

16 
gëL⁄g
(c⁄° *
¨g
, 
Êags
, c⁄° *
«me
);

18 
gëI¡
(c⁄° *
¨g
, 
Êags
, c⁄° *
«me
);

	@id_echo.h

5 
	~"öë_sockës.h
"

6 
	~"épi_hdr.h
"

8 
	#SERVICE
 "echo"

	)

10 
	#BUF_SIZE
 500

	)

	@id_echo_cl.c

9 
	~"id_echo.h
"

11 
	$maö
(
¨gc
, *
¨gv
[])

13 
sfd
, 
j
;

14 
size_t
 
Àn
;

15 
ssize_t
 
numRód
;

16 
buf
[
BUF_SIZE
];

18 i‡(
¨gc
 < 2 || 
	`°rcmp
(
¨gv
[1], "--help") == 0)

19 
	`ußgeEº
("%†ho° msg...\n", 
¨gv
[0]);

23 
sfd
 = 
	`öëC⁄√˘
(
¨gv
[1], 
SERVICE
, 
SOCK_DGRAM
);

24 i‡(
sfd
 == -1)

25 
	`Áèl
("CouldÇot connectÅo server socket");

31 
j
 = 2; j < 
¨gc
; j++) {

32 
Àn
 = 
	`°æí
(
¨gv
[
j
]);

33 i‡(
	`wrôe
(
sfd
, 
¨gv
[
j
], 
Àn
) !=Üen)

34 
	`Áèl
("partial/failed write");

36 
numRód
 = 
	`ªad
(
sfd
, 
buf
, 
BUF_SIZE
);

37 i‡(
numRód
 == -1)

38 
	`îrExô
("read");

40 
	`¥ötf
("[%ld byãs] %.*s\n", (Ë
numRód
, (ËnumRód, 
buf
);

44 
	`exô
(
EXIT_SUCCESS
);

45 
	}
}

	@id_echo_sv.c

13 
	~<sy¶og.h
>

14 
	~"id_echo.h
"

15 
	~"become_d´m⁄.h
"

17 
	$maö
(
¨gc
, *
¨gv
[])

19 
sfd
;

20 
ssize_t
 
numRód
;

21 
sockÀn_t
 
Àn
;

22 
sockaddr_°‹age
 
˛addr
;

23 
buf
[
BUF_SIZE
];

24 
addrSå
[
IS_ADDR_STR_LEN
];

26 i‡(
	`becomeD´m⁄
(0) == -1)

27 
	`îrExô
("becomeDaemon");

29 
sfd
 = 
	`öëBöd
(
SERVICE
, 
SOCK_DGRAM
, 
NULL
);

30 i‡(
sfd
 == -1) {

31 
	`sy¶og
(
LOG_ERR
, "CouldÇŸ cª©ê£rvî sockë (%s)", 
	`°ªº‹
(
î∫o
));

32 
	`exô
(
EXIT_FAILURE
);

38 
Àn
 = (
sockaddr_°‹age
);

39 
numRód
 = 
	`ªcv‰om
(
sfd
, 
buf
, 
BUF_SIZE
, 0,

40 (
sockaddr
 *Ë&
˛addr
, &
Àn
);

41 i‡(
numRód
 == -1)

42 
	`îrExô
("recvfrom");

44 i‡(
	`£ndto
(
sfd
, 
buf
, 
numRód
, 0, (
sockaddr
 *Ë&
˛addr
, 
Àn
)

45 !
numRód
)

46 
	`sy¶og
(
LOG_WARNING
, "ErrorÉchoingÑesponseÅo %s (%s)",

47 
	`öëAddªssSå
((
sockaddr
 *Ë&
˛addr
, 
Àn
,

48 
addrSå
, 
IS_ADDR_STR_LEN
),

49 
	`°ªº‹
(
î∫o
));

51 
	}
}

	@inet_sockets.c

5 
	#_BSD_SOURCE


	)

7 
	~<sys/sockë.h
>

8 
	~<√töë/ö.h
>

9 
	~<¨∑/öë.h
>

10 
	~<√tdb.h
>

11 
	~"öë_sockës.h
"

12 
	~"épi_hdr.h
"

27 
	$öëC⁄√˘
(c⁄° *
ho°
, c⁄° *
£rvi˚
, 
ty≥
)

29 
addröfo
 
höts
;

30 
addröfo
 *
ªsu…
, *
Ω
;

31 
sfd
, 
s
;

33 
	`mem£t
(&
höts
, 0, (
addröfo
));

34 
höts
.
ai_ˇn⁄«me
 = 
NULL
;

35 
höts
.
ai_addr
 = 
NULL
;

36 
höts
.
ai_√xt
 = 
NULL
;

37 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

38 
höts
.
ai_sockty≥
 = 
ty≥
;

40 
s
 = 
	`gëaddröfo
(
ho°
, 
£rvi˚
, &
höts
, &
ªsu…
);

41 i‡(
s
 != 0) {

42 
î∫o
 = 
ENOSYS
;

49 
Ω
 = 
ªsu…
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

50 
sfd
 = 
	`sockë
(
Ω
->
ai_Ámûy
,Ñp->
ai_sockty≥
,Ñp->
ai_¥Ÿocﬁ
);

51 i‡(
sfd
 == -1)

54 i‡(
	`c⁄√˘
(
sfd
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
) != -1)

59 
	`˛o£
(
sfd
);

62 
	`‰ìaddröfo
(
ªsu…
);

64  (
Ω
 =
NULL
Ë? -1 : 
sfd
;

65 
	}
}

75 
	$öëPassiveSockë
(c⁄° *
£rvi˚
, 
ty≥
, 
sockÀn_t
 *
addæí
,

76 
Boﬁón
 
doLi°í
, 
backlog
)

78 
addröfo
 
höts
;

79 
addröfo
 *
ªsu…
, *
Ω
;

80 
sfd
, 
›tvÆ
, 
s
;

82 
	`mem£t
(&
höts
, 0, (
addröfo
));

83 
höts
.
ai_ˇn⁄«me
 = 
NULL
;

84 
höts
.
ai_addr
 = 
NULL
;

85 
höts
.
ai_√xt
 = 
NULL
;

86 
höts
.
ai_sockty≥
 = 
ty≥
;

87 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

88 
höts
.
ai_Êags
 = 
AI_PASSIVE
;

90 
s
 = 
	`gëaddröfo
(
NULL
, 
£rvi˚
, &
höts
, &
ªsu…
);

91 i‡(
s
 != 0)

97 
›tvÆ
 = 1;

98 
Ω
 = 
ªsu…
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

99 
sfd
 = 
	`sockë
(
Ω
->
ai_Ámûy
,Ñp->
ai_sockty≥
,Ñp->
ai_¥Ÿocﬁ
);

100 i‡(
sfd
 == -1)

103 i‡(
doLi°í
) {

104 i‡(
	`£tsock›t
(
sfd
, 
SOL_SOCKET
, 
SO_REUSEADDR
, &
›tvÆ
,

105 (
›tvÆ
)) == -1) {

106 
	`˛o£
(
sfd
);

107 
	`‰ìaddröfo
(
ªsu…
);

112 i‡(
	`böd
(
sfd
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
) == 0)

117 
	`˛o£
(
sfd
);

120 i‡(
Ω
 !
NULL
 && 
doLi°í
) {

121 i‡(
	`li°í
(
sfd
, 
backlog
) == -1) {

122 
	`‰ìaddröfo
(
ªsu…
);

127 i‡(
Ω
 !
NULL
 && 
addæí
 != NULL)

128 *
addæí
 = 
Ω
->
ai_addæí
;

130 
	`‰ìaddröfo
(
ªsu…
);

132  (
Ω
 =
NULL
Ë? -1 : 
sfd
;

133 
	}
}

139 
	$öëLi°í
(c⁄° *
£rvi˚
, 
backlog
, 
sockÀn_t
 *
addæí
)

141  
	`öëPassiveSockë
(
£rvi˚
, 
SOCK_STREAM
, 
addæí
, 
TRUE
, 
backlog
);

142 
	}
}

147 
	$öëBöd
(c⁄° *
£rvi˚
, 
ty≥
, 
sockÀn_t
 *
addæí
)

149  
	`öëPassiveSockë
(
£rvi˚
, 
ty≥
, 
addæí
, 
FALSE
, 0);

150 
	}
}

159 
	$öëAddªssSå
(c⁄° 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
,

160 *
addrSå
, 
addrSåLí
)

162 
ho°
[
NI_MAXHOST
], 
£rvi˚
[
NI_MAXSERV
];

164 i‡(
	`gë«meöfo
(
addr
, 
addæí
, 
ho°
, 
NI_MAXHOST
,

165 
£rvi˚
, 
NI_MAXSERV
, 
NI_NUMERICSERV
) == 0)

166 
	`¢¥ötf
(
addrSå
, 
addrSåLí
, "(%s, %s)", 
ho°
, 
£rvi˚
);

168 
	`¢¥ötf
(
addrSå
, 
addrSåLí
, "(?UNKNOWN?)");

170  
addrSå
;

171 
	}
}

	@inet_sockets.h

5 #i‚de‡
INET_SOCKETS_H


6 
	#INET_SOCKETS_H


	)

8 
	~<sys/sockë.h
>

9 
	~<√tdb.h
>

11 
öëC⁄√˘
(c⁄° *
ho°
, c⁄° *
£rvi˚
, 
ty≥
);

13 
öëLi°í
(c⁄° *
£rvi˚
, 
backlog
, 
sockÀn_t
 *
addæí
);

15 
öëBöd
(c⁄° *
£rvi˚
, 
ty≥
, 
sockÀn_t
 *
addæí
);

17 *
öëAddªssSå
(c⁄° 
sockaddr
 *
addr
, 
sockÀn_t
 
addæí
,

18 *
addrSå
, 
addrSåLí
);

20 
	#IS_ADDR_STR_LEN
 4096

	)

	@is_echo_cl.c

31 
	~"öë_sockës.h
"

32 
	~"épi_hdr.h
"

34 
	#BUF_SIZE
 100

	)

36 
	$maö
(
¨gc
, *
¨gv
[])

38 
sfd
;

39 
ssize_t
 
numRód
;

40 
buf
[
BUF_SIZE
];

42 i‡(
¨gc
 !2 || 
	`°rcmp
(
¨gv
[1], "--help") == 0)

43 
	`ußgeEº
("%†ho°\n", 
¨gv
[0]);

45 
sfd
 = 
	`öëC⁄√˘
(
¨gv
[1], "echo", 
SOCK_STREAM
);

46 i‡(
sfd
 == -1)

47 
	`îrExô
("inetConnect");

49 
	`f‹k
()) {

51 
	`îrExô
("fork");

55 
numRód
 = 
	`ªad
(
sfd
, 
buf
, 
BUF_SIZE
);

56 i‡(
numRód
 <= 0)

58 
	`¥ötf
("%.*s", (Ë
numRód
, 
buf
);

60 
	`exô
(
EXIT_SUCCESS
);

64 
numRód
 = 
	`ªad
(
STDIN_FILENO
, 
buf
, 
BUF_SIZE
);

65 i‡(
numRód
 <= 0)

67 i‡(
	`wrôe
(
sfd
, 
buf
, 
numRód
) !=ÇumRead)

68 
	`Áèl
("write() failed");

73 i‡(
	`shutdown
(
sfd
, 
SHUT_WR
) == -1)

74 
	`îrExô
("shutdown");

75 
	`exô
(
EXIT_SUCCESS
);

77 
	}
}

	@is_echo_inetd_sv.c

7 
	~<sy¶og.h
>

8 
	~"épi_hdr.h
"

10 
	#BUF_SIZE
 4096

	)

12 
	$maö
(
¨gc
, *
¨gv
[])

14 
buf
[
BUF_SIZE
];

15 
ssize_t
 
numRód
;

17 (
numRód
 = 
	`ªad
(
STDIN_FILENO
, 
buf
, 
BUF_SIZE
)) > 0) {

18 i‡(
	`wrôe
(
STDOUT_FILENO
, 
buf
, 
numRód
) !=ÇumRead) {

19 
	`sy¶og
(
LOG_ERR
, "wrôe(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

20 
	`exô
(
EXIT_FAILURE
);

24 i‡(
numRód
 == -1) {

25 
	`sy¶og
(
LOG_ERR
, "Eº‹ fromÑód(): %s", 
	`°ªº‹
(
î∫o
));

26 
	`exô
(
EXIT_FAILURE
);

29 
	`exô
(
EXIT_SUCCESS
);

30 
	}
}

	@is_echo_sv.c

12 
	~<sig«l.h
>

13 
	~<sy¶og.h
>

14 
	~<sys/waô.h
>

15 
	~"become_d´m⁄.h
"

16 
	~"öë_sockës.h
"

17 
	~"épi_hdr.h
"

19 
	#SERVICE
 "echo"

	)

20 
	#BUF_SIZE
 4096

	)

22 
	$grimRó≥r
(
sig
)

24 
ßvedEºno
;

26 
ßvedEºno
 = 
î∫o
;

27 
	`waôpid
(-1, 
NULL
, 
WNOHANG
) > 0)

29 
î∫o
 = 
ßvedEºno
;

30 
	}
}

34 
	$h™dÀReque°
(
cfd
)

36 
buf
[
BUF_SIZE
];

37 
ssize_t
 
numRód
;

40 (
numRód
 = 
	`ªad
(
cfd
, 
buf
, 
BUF_SIZE
)) > 0) {

41 i‡(
	`wrôe
(
cfd
, 
buf
, 
numRód
) !=ÇumRead) {

42 
	`sy¶og
(
LOG_ERR
, "wrôe(ËÁûed: %s", 
	`°ªº‹
(
î∫o
));

43 
	`exô
(
EXIT_FAILURE
);

47 i‡(
numRód
 == -1) {

48 
	`sy¶og
(
LOG_ERR
, "Eº‹ fromÑód(): %s", 
	`°ªº‹
(
î∫o
));

49 
	`exô
(
EXIT_FAILURE
);

51 
	}
}

53 
	$maö
(
¨gc
, *
¨gv
[])

55 
lfd
, 
cfd
;

56 
siga˘i⁄
 
ß
;

58 i‡(
	`becomeD´m⁄
(0) == -1)

59 
	`îrExô
("becomeDaemon");

63 
	`sigem±y£t
(&
ß
.
ß_mask
);

64 
ß
.
ß_Êags
 = 
SA_RESTART
;

65 
ß
.
ß_h™dÀr
 = 
grimRó≥r
;

66 i‡(
	`siga˘i⁄
(
SIGCHLD
, &
ß
, 
NULL
) == -1) {

67 
	`sy¶og
(
LOG_ERR
, "Eº‹ from siga˘i⁄(): %s", 
	`°ªº‹
(
î∫o
));

68 
	`exô
(
EXIT_FAILURE
);

71 
lfd
 = 
	`öëLi°í
(
SERVICE
, 10, 
NULL
);

72 i‡(
lfd
 == -1) {

73 
	`sy¶og
(
LOG_ERR
, "CouldÇŸ cª©ê£rvî sockë (%s)", 
	`°ªº‹
(
î∫o
));

74 
	`exô
(
EXIT_FAILURE
);

78 
cfd
 = 
	`ac˚±
(
lfd
, 
NULL
, NULL);

79 i‡(
cfd
 == -1) {

80 
	`sy¶og
(
LOG_ERR
, "Faûuª i¿ac˚±(): %s", 
	`°ªº‹
(
î∫o
));

81 
	`exô
(
EXIT_FAILURE
);

86 
	`f‹k
()) {

88 
	`sy¶og
(
LOG_ERR
, "C™'à¸óã chûd (%s)", 
	`°ªº‹
(
î∫o
));

89 
	`˛o£
(
cfd
);

93 
	`˛o£
(
lfd
);

94 
	`h™dÀReque°
(
cfd
);

95 
	`_exô
(
EXIT_SUCCESS
);

98 
	`˛o£
(
cfd
);

102 
	}
}

	@tlpi_hdr.h

5 #i‚de‡
TLPI_HDR_H


6 
	#TLPI_HDR_H


	)

8 
	~<sys/ty≥s.h
>

9 
	~<°dio.h
>

10 
	~<°dlib.h
>

12 
	~<uni°d.h
>

13 
	~<î∫o.h
>

14 
	~<°rög.h
>

15 
	~<°dboﬁ.h
>

17 
	~"gë_num.h
"

20 
	~"îr‹_fun˘i⁄s.h
"

25 #ifde‡
TRUE


26 #unde‡
TRUE


29 #ifde‡
FALSE


30 #unde‡
FALSE


33 íum { 
	mFALSE
, 
	mTRUE
 } 
	tBoﬁón
;

35 
	#mö
(
m
,
n
Ë((mË< (nË? (mË: (n))

	)

36 
	#max
(
m
,
n
Ë((mË> (nË? (mË: (n))

	)

40 #i‡
deföed
(
__sgi
)

41 
	tsockÀn_t
;

44 #i‡
deföed
(
__sun
)

45 
	~<sys/fûe.h
>

48 #i‡! 
deföed
(
O_ASYNC
Ë&& deföed(
FASYNC
)

50 
	#O_ASYNC
 
FASYNC


	)

53 #i‡
deföed
(
MAP_ANON
Ë&& ! deföed(
MAP_ANONYMOUS
)

55 
	#MAP_ANONYMOUS
 
MAP_ANON


	)

59 #i‡! 
deföed
(
O_SYNC
Ë&& deföed(
O_FSYNC
)

61 
	#O_SYNC
 
O_FSYNC


	)

64 #i‡
deföed
(
__FªeBSD__
)

68 
	#sivÆ_öt
 
sigvÆ_öt


	)

69 
	#sivÆ_±r
 
sigvÆ_±r


	)

	@ename.c.inc

5 *
	gíame
[] = {

39 
	#MAX_ENAME
 133

	)

	@
1
.
0
16
222
become_daemon.c
become_daemon.h
error_functions.c
error_functions.h
get_num.c
get_num.h
id_echo.h
id_echo_cl.c
id_echo_sv.c
inet_sockets.c
inet_sockets.h
is_echo_cl.c
is_echo_inetd_sv.c
is_echo_sv.c
tlpi_hdr.h
ename.c.inc
