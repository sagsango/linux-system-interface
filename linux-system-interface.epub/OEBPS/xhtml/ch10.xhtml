<?xml version="1.0" encoding="UTF-8"?>
<html xml:lang="en-us" lang="en-us" xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ns="http://www.w3.org/2001/10/synthesis">
<head>
<title>The Linux Programming Interface</title>
<link rel="stylesheet" type="text/css" href="../styles/9781593272203.css"/>
</head>
<body>
<h2 class="h2" id="ch10"><span epub:type="pagebreak" id="page_185"/><strong><span class="big">10</span></strong><br/><strong>TIME</strong></h2>
<p class="noindentab">Within a program, we may be interested in two kinds of time:</p>
<p class="bull">&#8226; <em>Real time</em>: This is the time as measured either from some standard point (<em>calendar</em> time) or from some fixed point (typically the start) in the life of a process (<em>elapsed</em> or <em>wall clock</em> time). Obtaining the calendar time is useful to programs that, for example, timestamp database records or files. Measuring elapsed time is useful for a program that takes periodic actions or makes regular measurements from some external input device.</p>
<p class="bull">&#8226; <em>Process time</em>: This is the amount of CPU time used by a process. Measuring process time is useful for checking or optimizing the performance of a program or algorithm.</p>
<p class="noindentt">Most computer architectures have a built-in hardware clock that enables the kernel to measure real and process time. In this chapter, we look at system calls for dealing with both sorts of time, and library functions for converting between human-readable and internal representations of time. Since human-readable representations of time are dependent on the geographical location and on linguistic and cultural conventions, discussion of these representations leads us into an investigation of timezones and locales.</p>
<h3 class="h3" id="ch10lev1sec01"><span epub:type="pagebreak" id="page_186"/><strong>10.1 Calendar Time</strong></h3>
<p class="noindenta">Regardless of geographic location, UNIX systems represent time internally as a measure of seconds since the Epoch; that is, since midnight on the morning of 1 January 1970, Universal Coordinated Time (UTC, previously known as Greenwich Mean Time, or GMT). This is approximately the date when the UNIX system came into being. Calendar time is stored in variables of type <em>time_t</em>, an integer type specified by SUSv3.</p>
<div class="block">
<p class="noindent">On 32-bit Linux systems, <em>time_t</em>, which is a signed integer, can represent dates in the range 13 December 1901 20:45:52 to 19 January 2038 03:14:07. (SUSv3 leaves the meaning of negative <em>time_t</em> values unspecified.) Thus, many current 32-bit UNIX systems face a theoretical <em>Year 2038</em> problem, which they may encounter before 2038, if they do calculations based on dates in the future. This problem will be significantly alleviated by the fact that by 2038, probably all UNIX systems will have long become 64-bit and beyond. However, 32-bit embedded systems, which typically have a much longer lifespan than desktop hardware, may still be afflicted by the problem. Furthermore, the problem will remain for any legacy data and applications that maintain time in a 32-bit <em>time_t</em> format.</p>
</div>
<p class="noindent">The <em>gettimeofday()</em> system call returns the calendar time in the buffer pointed to by <em>tv</em>.</p>
<div class="box">
<p class="programsa">#include &lt;sys/time.h&gt;<br/><br/>int <span class="codestrong">gettimeofday</span>(struct timeval *<span class="font1">tv</span>, struct timezone *<span class="font1">tz</span>);</p>
<p class="right">Returns 0 on success, or &#8211;1 on error</p>
</div>
<p class="noindent">The <em>tv</em> argument is a pointer to a structure of the following form:</p>
<p class="programs">struct timeval {<br/>&#160;&#160;&#160;&#160;time_t&#160;&#160;&#160;&#160;&#160;&#160;tv_sec;&#160;&#160;&#160;&#160;&#160;/* Seconds since 00:00:00, 1 Jan 1970 UTC */<br/>&#160;&#160;&#160;&#160;suseconds_t tv_usec;&#160;&#160;&#160;&#160;/* Additional microseconds (long int) */<br/>};</p>
<p class="noindent">Although the <em>tv_usec</em> field affords microsecond precision, the accuracy of the value it returns is determined by the architecture-dependent implementation. (The <em>u</em> in <em>tv_usec</em> derives from the resemblance to the Greek letter &#169; (&#8220;mu&#8221;) used in the metric system to denote one-millionth.) On modern x86-32 systems (i.e., Pentium systems with a Timestamp Counter register that is incremented once at each CPU clock cycle), <em>gettimeofday()</em> does provide microsecond accuracy.</p>
<p class="indent">The <em>tz</em> argument to <em>gettimeofday()</em> is a historical artifact. In older UNIX implementations, it was used to retrieve timezone information for the system. This argument is now obsolete and should always be specified as <span class="literal">NULL</span>. (SUSv4 marks <em>gettimeofday()</em> obsolete, presumably in favor of the POSIX clocks API described in <a href="ch23.xhtml#ch23lev1sec05">Section 23.5</a>.)</p>
<div class="block">
<p class="noindent"><span epub:type="pagebreak" id="page_187"/>If the <em>tz</em> argument is supplied, then it returns a <em>timezone</em> structure whose fields contain whatever values were specified in the (obsolete) <em>tz</em> argument in a previous call to <em>settimeofday()</em>. This structure contains two fields: <em>tz_minuteswest</em> and <em>tz_dsttime</em>. The <em>tz_minuteswest</em> field indicates the number of minutes that must be added to times in this zone to match UTC, with a negative value indicating that an adjustment of minutes to the east of UTC (e.g., for Central European Time, one hour ahead of UTC, this field would contain the value &#8211;60). The <em>tz_dsttime</em> field contains a constant that was designed to represent the daylight saving time (DST) regime in force in this timezone. It is because the DST regime can&#8217;t be represented using a simple algorithm that the <em>tz</em> argument is obsolete. (This field has never been supported on Linux.) See the <em>gettimeofday(2)</em> manual page for further details.</p>
</div>
<p class="noindent">The <em>time()</em> system call returns the number of seconds since the Epoch (i.e., the same value that <em>gettimeofday()</em> returns in the <em>tv_sec</em> field of its <em>tv</em> argument).</p>
<div class="box">
<p class="programsa">#include &lt;time.h&gt;<br/><br/>time_t <span class="codestrong">time</span>(time_t *<span class="font1">timep</span>);</p>
<p class="right">Returns number of seconds since the Epoch, or <em>(time_t)</em> &#8211;1 on error</p>
</div>
<p class="noindent">If the <em>timep</em> argument is not <span class="literal">NULL</span>, the number of seconds since the Epoch is also placed in the location to which <em>timep</em> points.</p>
<p class="indent">Since <em>time()</em> returns the same value in two ways, and the only possible error that can occur when using <em>time()</em> is to give an invalid address in the <em>timep</em> argument (<span class="literal">EFAULT</span>), we often simply use the following call (without error checking):</p>
<p class="programs">t = time(NULL);</p>
<div class="block">
<p class="noindent">The reason for the existence of two system calls (<em>time()</em> and <em>gettimeofday()</em>) with essentially the same purpose is historical. Early UNIX implementations provided <em>time()</em>. 4.2BSD added the more precise <em>gettimeofday()</em> system call. The existence of <em>time()</em> as a system call is now redundant; it could be implemented as a library function that calls <em>gettimeofday()</em>.</p>
</div>
<h3 class="h3" id="ch10lev1sec02"><strong>10.2 Time-Conversion Functions</strong></h3>
<p class="noindenta"><a href="ch10.xhtml#ch10fig1">Figure 10-1</a> shows the functions used to convert between <em>time_t</em> values and other time formats, including printable representations. These functions shield us from the complexity brought to such conversions by timezones, daylight saving time (DST) regimes, and localization issues. (We describe timezones in <a href="ch10.xhtml#ch10lev1sec03">Section 10.3</a> and locales in <a href="ch10.xhtml#ch10lev1sec04">Section 10.4</a>.)</p>
<div class="block">
<p class="noindent">SUSv4 marks <em>ctime()</em> and <em>asctime()</em> obsolete, because they do not return localized strings (and they are nonreentrant).</p>
</div>
<div class="image"><span epub:type="pagebreak" id="page_188"/><img src="../images/f10-01.jpg" alt="image"/></div>
<p class="figcap"><a id="ch10fig1"/><strong>Figure 10-1:</strong> Functions for retrieving and working with calendar time</p>
<h4 class="h4" id="ch10lev2sec01"><strong>10.2.1 Converting <em>time_t</em> to Printable Form</strong></h4>
<p class="noindenta">The <em>ctime()</em> function provides a simple method of converting a <em>time_t</em> value into printable form.</p>
<div class="box">
<p class="programsa">#include &lt;time.h&gt;<br/><br/>char *<span class="codestrong">ctime</span>(const time_t *<span class="font1">timep</span>);</p>
<p class="right">Returns pointer to statically allocated string terminated by newline and <span class="literal">\0</span> on success, or <span class="literal">NULL</span> on error</p>
</div>
<p class="noindent">Given a pointer to a <em>time_t</em> value in <em>timep</em>, <em>ctime()</em> returns a 26-byte string containing the date and time in a standard format, as illustrated by the following example:</p>
<p class="programs">Wed Jun 8 14:22:34 2011</p>
<p class="noindent">The string includes a terminating newline character and a terminating null byte. The <em>ctime()</em> function automatically accounts for local timezone and DST settings when performing the conversion. (We explain how these settings are determined in <a href="ch10.xhtml#ch10lev1sec03">Section 10.3</a>.) The returned string is statically allocated; future calls to <em>ctime()</em> will overwrite it.</p>
<p class="indent">SUSv3 states that calls to any of the functions <em>ctime()</em>, <em>gmtime()</em>, <em>localtime()</em>, or <em>asctime()</em> may overwrite the statically allocated structure that is returned by any of the other functions. In other words, these functions may share single copies of the returned character array and <em>tm</em> structure, and this is done in some versions of <em>glibc</em>. If we need to maintain the returned information across multiple calls to these functions, we must save local copies.</p>
<div class="block">
<p class="noindent"><span epub:type="pagebreak" id="page_189"/>A reentrant version of <em>ctime()</em> is provided in the form of <em>ctime_r()</em>. (We explain reentrancy in <a href="ch21.xhtml#ch21lev2sec02">Section 21.1.2</a>.) This function permits the caller to specify an additional argument that is a pointer to a (caller-supplied) buffer that is used to return the time string. Other reentrant versions of functions mentioned in this chapter operate similarly.</p>
</div>
<h4 class="h4" id="ch10lev2sec02"><strong>10.2.2 Converting Between <em>time_t</em> and Broken-Down Time</strong></h4>
<p class="noindenta">The <em>gmtime()</em> and <em>localtime()</em> functions convert a <em>time_t</em> value into a so-called <em>broken-down time</em>. The broken-down time is placed in a statically allocated structure whose address is returned as the function result.</p>
<div class="box">
<p class="programsa">#include &lt;time.h&gt;<br/><br/>struct tm *<span class="codestrong">gmtime</span>(const time_t *<span class="font1">timep</span>);<br/>struct tm *<span class="codestrong">localtime</span>(const time_t *<span class="font1">timep</span>);</p>
<p class="right">Both return a pointer to a statically allocated broken-down time structure on success, or <span class="literal">NULL</span> on error</p>
</div>
<p class="noindent">The <em>gmtime()</em> function converts a calendar time into a broken-down time corresponding to UTC. (The letters <em>gm</em> derive from Greenwich Mean Time.) By contrast, <em>localtime()</em> takes into account timezone and DST settings to return a broken-down time corresponding to the system&#8217;s local time.</p>
<div class="block">
<p class="noindent">Reentrant versions of these functions are provided as <em>gmtime_r()</em> and <em>localtime_r()</em>.</p>
</div>
<p class="noindent">The <em>tm</em> structure returned by these functions contains the date and time fields broken into individual parts. This structure has the following form:</p>
<p class="programs">struct tm {<br/>&#160;&#160;&#160;&#160;int tm_sec;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Seconds (0-60) */<br/>&#160;&#160;&#160;&#160;int tm_min;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Minutes (0-59) */<br/>&#160;&#160;&#160;&#160;int tm_hour;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Hours (0-23) */<br/>&#160;&#160;&#160;&#160;int tm_mday;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Day of the month (1-31) */<br/>&#160;&#160;&#160;&#160;int tm_mon;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Month (0-11) */<br/>&#160;&#160;&#160;&#160;int tm_year;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Year since 1900 */<br/>&#160;&#160;&#160;&#160;int tm_wday;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Day of the week (Sunday = 0)*/<br/>&#160;&#160;&#160;&#160;int tm_yday;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Day in the year (0-365; 1 Jan = 0)*/<br/>&#160;&#160;&#160;&#160;int tm_isdst;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Daylight saving time flag<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&gt; 0: DST is in effect;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;= 0: DST is not effect;<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&lt; 0: DST information not available */<br/>};</p>
<p class="noindent">The <em>tm_sec</em> field can be up to 60 (rather than 59) to account for the leap seconds that are occasionally applied to adjust human calendars to the astronomically exact (the so-called <em>tropical</em>) year.</p>
<p class="indent">If the <span class="literal">_BSD_SOURCE</span> feature test macro is defined, then the <em>glibc</em> definition of the <em>tm</em> structure also includes two additional fields containing further information about the represented time. The first of these, <em>long int tm_gmtoff</em>, contains the <span epub:type="pagebreak" id="page_190"/>number of seconds that the represented time falls east of UTC. The second field, <em>const char *tm_zone</em>, is the abbreviated timezone name (e.g., <em>CEST</em> for Central European Summer Time). SUSv3 doesn&#8217;t specify either of these fields, and they appear on only a few other UNIX implementations (mainly BSD derivatives).</p>
<p class="indent">The <em>mktime()</em> function translates a broken-down time, expressed as local time, into a <em>time_t</em> value, which is returned as the function result. The caller supplies the broken-down time in a <em>tm</em> structure pointed to by <em>timeptr</em>. During this translation, the <em>tm_wday</em> and <em>tm_yday</em> fields of the input <em>tm</em> structure are ignored.</p>
<div class="box">
<p class="programsa">#include &lt;time.h&gt;<br/><br/>time_t <span class="codestrong">mktime</span>(struct tm *<span class="font1">timeptr</span>);</p>
<p class="right">Returns seconds since the Epoch corresponding to <em>timeptr</em> on success, or <em>(time_t)</em> &#8211;1 on error</p>
</div>
<p class="noindent">The <em>mktime()</em> function may modify the structure pointed to by <em>timeptr</em>. At a minimum, it ensures that the <em>tm_wday</em> and <em>tm_yday</em> fields are set to values that correspond appropriately to the values of the other input fields.</p>
<p class="indent">In addition, <em>mktime()</em> doesn&#8217;t require the other fields of the <em>tm</em> structure to be restricted to the ranges described earlier. For each field whose value is out of range, <em>mktime()</em> adjusts that field&#8217;s value so that it is in range and makes suitable adjustments to the other fields. All of these adjustments are performed before <em>mktime()</em> updates the <em>tm_wday</em> and <em>tm_yday</em> fields and calculates the returned <em>time_t</em> value.</p>
<p class="indent">For example, if the input <em>tm_sec</em> field were 123, then on return, the value of this field would be 3, and the value of the <em>tm_min</em> field would have 2 added to whatever value it previously had. (And if that addition caused <em>tm_min</em> to overflow, then the <em>tm_min</em> value would be adjusted and the <em>tm_hour</em> field would be incremented, and so on.) These adjustments even apply for negative field values. For example, specifying &#8211;1 for <em>tm_sec</em> means the 59th second of the previous minute. This feature is useful since it allows us to perform date and time arithmetic on a broken-down time value.</p>
<p class="indentb">The timezone setting is used by <em>mktime()</em> when performing the translation. In addition, the DST setting may or may not be used, depending on the value of the input <em>tm_isdst</em> field:</p>
<p class="bull">&#8226; If <em>tm_isdst</em> is 0, treat this time as standard time (i.e., ignore DST, even if it would be in effect at this time of year).</p>
<p class="bull">&#8226; If <em>tm_isdst</em> is greater than 0, treat this time as DST (i.e., behave as though DST is in effect, even if it would not normally be so at this time of year).</p>
<p class="bull">&#8226; If <em>tm_isdst</em> is less than 0, attempt to determine if DST would be in effect at this time of the year. This is typically the setting we want.</p>
<p class="noindentt">On completion (and regardless of the initial setting of <em>tm_isdst</em>), <em>mktime()</em> sets the <em>tm_isdst</em> field to a positive value if DST is in effect at the given date, or to 0 if DST is not in effect.</p>
<h4 class="h4" id="ch10lev2sec03"><span epub:type="pagebreak" id="page_191"/><strong>10.2.3 Converting Between Broken-Down Time and Printable Form</strong></h4>
<p class="noindenta">In this section, we describe functions that convert a broken-down time to printable form, and vice versa.</p>
<h5 class="h5" id="ch10lev3sec01"><strong>Converting from broken-down time to printable form</strong></h5>
<p class="noindenta">Given a pointer to a broken-down time structure in the argument <em>tm</em>, <em>asctime()</em> returns a pointer to a statically allocated string containing the time in the same form as <em>ctime()</em>.</p>
<div class="box">
<p class="programsa">#include &lt;time.h&gt;<br/><br/>char *<span class="codestrong">asctime</span>(const struct tm *<span class="font1">timeptr</span>);</p>
<p class="right">Returns pointer to statically allocated string terminated by newline and <span class="literal">\0</span> on success, or <span class="literal">NULL</span> on error</p>
</div>
<p class="noindent">By contrast with <em>ctime()</em>, local timezone settings have no effect on <em>asctime()</em>, since it is converting a broken-down time that is typically either already localized via <em>localtime()</em> or in UTC as returned by <em>gmtime()</em>.</p>
<p class="indent">As with <em>ctime()</em>, we have no control over the format of the string produced by <em>asctime()</em>.</p>
<div class="block">
<p class="noindent">A reentrant version of <em>asctime()</em> is provided in the form of <em>asctime_r()</em>.</p>
</div>
<p class="noindent"><a href="ch10.xhtml#ch10ex1">Listing 10-1</a> demonstrates the use of <em>asctime()</em>, as well as all of the time-conversion functions described so far in this chapter. This program retrieves the current calendar time, and then uses various time-conversion functions and displays their results. Here is an example of what we see when running this program in Munich, Germany, which (in winter) is on Central European Time, one hour ahead of UTC:</p>
<p class="programs">$ <span class="codestrong">date</span><br/>Tue Dec 28 16:01:51 CET 2010<br/>$ <span class="codestrong">./calendar_time</span><br/>Seconds since the Epoch (1 Jan 1970): 1293548517 (about 40.991 years)<br/>&#160;&#160;gettimeofday() returned 1293548517 secs, 715616 microsecs<br/>Broken down by gmtime():<br/>&#160;&#160;year=110 mon=11 mday=28 hour=15 min=1 sec=57 wday=2 yday=361 isdst=0<br/>Broken down by localtime():<br/>&#160;&#160;year=110 mon=11 mday=28 hour=16 min=1 sec=57 wday=2 yday=361 isdst=0<br/><br/>asctime() formats the gmtime() value as: Tue Dec 28 15:01:57 2010<br/>ctime() formats the time() value as:&#160;&#160;&#160;&#160;&#160;Tue Dec 28 16:01:57 2010<br/>mktime() of gmtime() value:&#160;&#160;&#160;&#160;1293544917 secs<br/>mktime() of localtime() value: 1293548517 secs&#160;&#160;&#160;&#160;&#160;&#160;<span class="font1">3600 secs ahead of UTC</span></p>
<p class="examplet"><a id="ch10ex1"/><strong>Listing 10-1:</strong> Retrieving and converting calendar times</p>
<p class="programsli">_____________________________________________________ <span class="codestrong">time/calendar_time.c</span><br/><br/>#include &lt;locale.h&gt;<br/>#include &lt;time.h&gt;<br/>#include &lt;sys/time.h&gt;<br/>#include "tlpi_hdr.h"<br/><span epub:type="pagebreak" id="page_192"/>#define SECONDS_IN_TROPICAL_YEAR (365.24219 * 24 * 60 * 60)<br/><br/>int<br/>main(int argc, char *argv[])<br/>{<br/>&#160;&#160;&#160;&#160;time_t t;<br/>&#160;&#160;&#160;&#160;struct tm *gmp, *locp;<br/>&#160;&#160;&#160;&#160;struct tm gm, loc;<br/>&#160;&#160;&#160;&#160;struct timeval tv;<br/><br/>&#160;&#160;&#160;&#160;t = time(NULL);<br/>&#160;&#160;&#160;&#160;printf("Seconds since the Epoch (1 Jan 1970): %ld", (long) t);<br/>&#160;&#160;&#160;&#160;printf(" (about %6.3f years)\n", t / SECONDS_IN_TROPICAL_YEAR);<br/><br/>&#160;&#160;&#160;&#160;if (gettimeofday(&#38;tv, NULL) == -1)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errExit("gettimeofday");<br/>&#160;&#160;&#160;&#160;printf("&#160;&#160;gettimeofday() returned %ld secs, %ld microsecs\n",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(long) tv.tv_sec, (long) tv.tv_usec);<br/><br/>&#160;&#160;&#160;&#160;gmp = gmtime(&#38;t);<br/>&#160;&#160;&#160;&#160;if (gmp == NULL)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errExit("gmtime");<br/><br/>&#160;&#160;&#160;&#160;gm = *gmp;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Save local copy, since *gmp may be modified<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;by asctime() or gmtime() */<br/>&#160;&#160;&#160;&#160;printf("Broken down by gmtime():\n");<br/>&#160;&#160;&#160;&#160;printf("&#160;&#160;year=%d mon=%d mday=%d hour=%d min=%d sec=%d ", gm.tm_year,<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gm.tm_mon, gm.tm_mday, gm.tm_hour, gm.tm_min, gm.tm_sec);<br/>&#160;&#160;&#160;&#160;printf("wday=%d yday=%d isdst=%d\n", gm.tm_wday, gm.tm_yday, gm.tm_isdst);<br/><br/>&#160;&#160;&#160;&#160;locp = localtime(&#38;t);<br/>&#160;&#160;&#160;&#160;if (locp == NULL)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errExit("localtime");<br/><br/>&#160;&#160;&#160;&#160;loc = *locp;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Save local copy */<br/><br/>&#160;&#160;&#160;&#160;printf("Broken down by localtime():\n");<br/>&#160;&#160;&#160;&#160;printf("&#160;&#160;year=%d mon=%d mday=%d hour=%d min=%d sec=%d ",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loc.tm_year, loc.tm_mon, loc.tm_mday,<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loc.tm_hour, loc.tm_min, loc.tm_sec);<br/>&#160;&#160;&#160;&#160;printf("wday=%d yday=%d isdst=%d\n\n",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;loc.tm_wday, loc.tm_yday, loc.tm_isdst);<br/><br/>&#160;&#160;&#160;&#160;printf("asctime() formats the gmtime() value as: %s", asctime(&#38;gm));<br/>&#160;&#160;&#160;&#160;printf("ctime() formats the time() value as:&#160;&#160;&#160;&#160;&#160;%s", ctime(&#38;t));<br/><br/>&#160;&#160;&#160;&#160;printf("mktime() of gmtime() value:&#160;&#160;&#160;&#160;%ld secs\n", (long) mktime(&#38;gm));<br/>&#160;&#160;&#160;&#160;printf("mktime() of localtime() value: %ld secs\n", (long) mktime(&#38;loc));<br/><br/>&#160;&#160;&#160;&#160;exit(EXIT_SUCCESS);<br/>}<br/>_____________________________________________________ <span class="codestrong">time/calendar_time.c</span></p>
<p class="noindent"><span epub:type="pagebreak" id="page_193"/>The <em>strftime()</em> function provides us with more precise control when converting a broken-down time into printable form. Given a broken-down time pointed to by <em>timeptr</em>, <em>strftime()</em> places a corresponding null-terminated, date-plus-time string in the buffer pointed to by <em>outstr</em>.</p>
<div class="box">
<p class="programsa">#include &lt;time.h&gt;<br/><br/>size_t <span class="codestrong">strftime</span>(char *<span class="font1">outstr</span>, size_t <span class="font1">maxsize</span>, const char *<span class="font1">format</span>,<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const struct tm *<span class="font1">timeptr</span>);</p>
<p class="right">Returns number of bytes placed in <em>outstr</em> (excluding terminating null byte) on success, or 0 on error</p>
</div>
<p class="noindent">The string returned in <em>outstr</em> is formatted according to the specification in <em>format</em>. The <em>maxsize</em> argument specifies the maximum space available in <em>outstr</em>. Unlike <em>ctime()</em> and <em>asctime()</em>, <em>strftime()</em> doesn&#8217;t include a newline character at the end of the string (unless one is included in <em>format</em>).</p>
<p class="indent">On success, <em>strftime()</em> returns the number of bytes placed in <em>outstr</em>, excluding the terminating null byte. If the total length of the resulting string, including the terminating null byte, would exceed <em>maxsize</em> bytes, then <em>strftime()</em> returns 0 to indicate an error, and the contents of <em>outstr</em> are indeterminate.</p>
<p class="indent">The <em>format</em> argument to <em>strftime()</em> is a string akin to that given to <em>printf()</em>. Sequences beginning with a percent character (<span class="literal">%</span>) are conversion specifications, which are replaced by various components of the date and time according to the specifier character following the percent character. A rich set of conversion specifiers is provided, a subset of which is listed in <a href="ch10.xhtml#ch10table1">Table 10-1</a>. (For a complete list, see the <em>strftime(3)</em> manual page.) Except as otherwise noted, all of these conversion specifiers are standardized in SUSv3.</p>
<p class="indent">The <span class="literal">%U</span> and <span class="literal">%W</span> specifiers both produce a week number in the year. The <span class="literal">%U</span> week numbers are calculated such that the first week containing a Sunday is numbered 1, and the partial week preceding that is numbered 0. If Sunday happens to fall as the first day of the year, then there is no week 0, and the last day of the year falls in week 53. The <span class="literal">%W</span> week numbers work in the same way, but with Monday rather than Sunday.</p>
<p class="indent">Often, we want to display the current time in various demonstration programs in this book. For this purpose we provide the function <em>currTime()</em>, which returns a string containing the current time as formatted by <em>strftime()</em> when given the argument <em>format</em>.</p>
<p class="indent">The <em>currTime()</em> function implementation is shown in <a href="ch10.xhtml#ch10ex2">Listing 10-2</a>.</p>
<div class="box">
<p class="programsa">#include "curr_time.h"<br/><br/>char *<span class="codestrong">currTime</span>(const char *<span class="font1">format</span>);</p>
<p class="right">Returns pointer to statically allocated string, or <span class="literal">NULL</span> on error</p>
</div>
<p class="tablecap"><span epub:type="pagebreak" id="page_194"/><a id="ch10table1"/><strong>Table 10-1:</strong> Selected conversion specifiers for <em>strftime()</em></p>
<table class="all">
<thead>
<tr>
<td style="vertical-align: top;" class="table_th"><p class="table"><strong>Specifier</strong></p></td>
<td style="vertical-align: top;" class="table_th"><p class="table"><strong>Description</strong></p></td>
<td style="vertical-align: top;" class="table_th1"><p class="table"><strong>Example</strong></p></td>
</tr>
</thead>
<tbody>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%%</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">A <span class="literal">%</span> character</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">%</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%a</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Abbreviated weekday name</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">Tue</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%A</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Full weekday name</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">Tuesday</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%b</span>, <span class="literal">%h</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Abbreviated month name</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">Feb</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%B</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Full month name</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">February</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%c</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Date and time</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">Tue Feb&#160;&#160;1 21:39:46 2011</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%d</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Day of month (2 digits, 01 to 31)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">01</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%D</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">American date (same as <span class="literal">%m/%d/%y</span>)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">02/01/11</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%e</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Day of month (2 characters)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">1</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%F</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">ISO date (same as <span class="literal">%Y-%m-%d</span>)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">2011-02-01</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%H</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Hour (24-hour clock, 2 digits)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">21</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%I</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Hour (12-hour clock, 2 digits)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">09</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%j</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Day of year (3 digits, 001 to 366)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">032</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%m</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Decimal month (2 digits, 01 to 12)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">02</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%M</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Minute (2 digits)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">39</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%p</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">AM/PM</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">PM</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%P</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">am/pm (GNU extension)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">pm</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%R</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">24-hour time (same as <span class="literal">%H:%M</span>)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">21:39</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%S</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Second (00 to 60)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">46</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%T</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Time (same as <span class="literal">%H:%M:%S</span>)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">21:39:46</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%u</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Weekday number (1 to 7, Monday = 1)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">2</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%U</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Sunday week number (00 to 53)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">05</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%w</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Weekday number (0 to 6, Sunday = 0)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">2</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%W</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Monday week number (00 to 53)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">05</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%x</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Date (localized)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">02/01/11</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%X</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">Time (localized)</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">21:39:46</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%y</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">2-digit year</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">11</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">%Y</span></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">4-digit year</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table"><span class="literal">2011</span></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_3"><p class="table"><span class="literal">%Z</span></p></td>
<td style="vertical-align: top;" class="table_3"><p class="table">Timezone name</p></td>
<td style="vertical-align: top;" class="table_3a"><p class="table"><span class="literal">CET</span></p></td>
</tr>
</tbody>
</table>
<p class="examplet"><a id="ch10ex2"/><strong>Listing 10-2:</strong> A function that returns a string containing the current time</p>
<p class="programsli">__________________________________________________________ <span class="codestrong">time/curr_time.c</span><br/><br/>#include &lt;time.h&gt;<br/>#include "curr_time.h"&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Declares function defined here */<br/><br/>#define BUF_SIZE 1000<br/><br/>/* Return a string containing the current time formatted according to<br/>&#160;&#160;&#160;the specification in 'format' (see strftime(3) for specifiers).<br/>&#160;&#160;&#160;If 'format' is NULL, we use "%c" as a specifier (which gives the<br/>&#160;&#160;&#160;date and time as for ctime(3), but without the trailing newline).<br/>&#160;&#160;&#160;Returns NULL on error. */<br/><br/>char *<br/>currTime(const char *format)<br/>{<br/>&#160;&#160;&#160;&#160;static char buf[BUF_SIZE];&#160;&#160;/* Nonreentrant */<br/>&#160;&#160;&#160;&#160;time_t t;<br/>&#160;&#160;&#160;&#160;size_t s;<br/>&#160;&#160;&#160;&#160;struct tm *tm;<br/><br/>&#160;&#160;&#160;&#160;t = time(NULL);<br/>&#160;&#160;&#160;&#160;tm = localtime(&#38;t);<br/>&#160;&#160;&#160;&#160;if (tm == NULL)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;return NULL;<br/><br/>&#160;&#160;&#160;&#160;s = strftime(buf, BUF_SIZE, (format != NULL) ? format : "%c", tm);<br/><br/>&#160;&#160;&#160;&#160;return (s == 0) ? NULL : buf;<br/>}<br/>__________________________________________________________ <span class="codestrong">time/curr_time.c</span></p>
<h5 class="h5" id="ch10lev3sec02"><span epub:type="pagebreak" id="page_195"/><strong>Converting from printable form to broken-down time</strong></h5>
<p class="noindenta">The <em>strptime()</em> function is the converse of <em>strftime()</em>. It converts a date-plus-time string to a broken-down time.</p>
<div class="box">
<p class="programsa">#define _XOPEN_SOURCE<br/>#include &lt;time.h&gt;<br/><br/>char *<span class="codestrong">strptime</span>(const char *<span class="font1">str</span>, const char *<span class="font1">format</span>, struct tm *<span class="font1">timeptr</span>);</p>
<p class="right">Returns pointer to next unprocessed character in <em>str</em> on success, or <span class="literal">NULL</span> on error</p>
</div>
<p class="noindent">The <em>strptime()</em> function uses the specification given in <em>format</em> to parse the date-plus-time string given in <em>str</em>, and places the converted broken-down time in the structure pointed to by <em>timeptr</em>.</p>
<p class="indent">On success, <em>strptime()</em> returns a pointer to the next unprocessed character in <em>str</em>. (This is useful if the string contains further information to be processed by the calling program.) If the complete format string could not be matched, <em>strptime()</em> returns <span class="literal">NULL</span> to indicate the error.</p>
<p class="indentb">The format specification given to <em>strptime()</em> is akin to that given to <em>scanf(3)</em>. It contains the following types of characters:</p>
<p class="bull">&#8226; conversion specifications beginning with a percent character (<span class="literal">%</span>);</p>
<p class="bull">&#8226; white-space characters, which match zero or more white spaces in the input string; and</p>
<p class="bull">&#8226; non-white-space characters (other than <span class="literal">%</span>), which must match exactly the same characters in the input string.</p>
<p class="noindentt"><span epub:type="pagebreak" id="page_196"/>The conversion specifications are similar to those given to <em>strftime()</em> (<a href="ch10.xhtml#ch10table1">Table 10-1</a>). The major difference is that the specifiers are more general. For example, both <span class="literal">%a</span> and <span class="literal">%A</span> can accept a weekday name in either full or abbreviated form, and <span class="literal">%d</span> or <span class="literal">%e</span> can be used to read a day of the month with or without a leading 0 in the case of single-digit days. In addition, case is ignored; for example, <em>May</em> and <em>MAY</em> are equivalent month names. The string <span class="literal">%%</span> is used to match a percent character in the input string. The <em>strptime(3)</em> manual page provides more details.</p>
<p class="indent">The <em>glibc</em> implementation of <em>strptime()</em> doesn&#8217;t modify those fields of the <em>tm</em> structure that are not initialized by specifiers in <em>format</em>. This means that we can employ a series of <em>strptime()</em> calls to construct a single <em>tm</em> structure from information in multiple strings, such as a date string and a time string. While SUSv3 permits this behavior, it doesn&#8217;t require it, and so we can&#8217;t rely on it on other UNIX implementations. In a portable application, we must ensure that <em>str</em> and <em>format</em> contain input that will set all fields of the resulting <em>tm</em> structure, or make sure that the <em>tm</em> structure is suitably initialized before calling <em>strptime()</em>. In most cases, it would be sufficient to zero out the entire structure using <em>memset()</em>, but be aware that a value of 0 in the <em>tm_mday</em> field corresponds to the last day of the previous month in <em>glibc</em> and many other implementations of the time-conversion functions. Finally, note that <em>strptime()</em> never sets the value of the <em>tm_isdst</em> field of the <em>tm</em> structure.</p>
<div class="block">
<p class="noindent">The GNU C library also provides two other functions that serve a similar purpose to <em>strptime()</em>: <em>getdate()</em> (specified in SUSv3 and widely available) and its reentrant analog <em>getdate_r()</em> (not specified in SUSv3 and available on only a few other UNIX implementations). We don&#8217;t describe these functions here, because they employ an external file (identified by the environment variable <span class="literal">DATEMSK</span>) to specify the format used for scanning the date, which makes them somewhat awkward to use and also creates security vulnerabilities in set-user-ID programs.</p>
</div>
<p class="noindent"><a href="ch10.xhtml#ch10ex3">Listing 10-3</a> demonstrates the use of <em>strptime()</em> and <em>strftime()</em>. This program takes a command-line argument containing a date and time, converts this to a broken-down time using <em>strptime()</em>, and then displays the result of performing the reverse conversion using <em>strftime()</em>. The program takes up to three arguments, of which the first two are required. The first argument is the string containing a date and time. The second argument is the format specification to be used by <em>strptime()</em> to parse the first argument. The optional third argument is the format string to be used by <em>strftime()</em> for the reverse conversion. If this argument is omitted, a default format string is used. (We describe the <em>setlocale()</em> function used in this program in <a href="ch10.xhtml#ch10lev1sec04">Section 10.4</a>.) The following shell session log shows some examples of the use of this program:</p>
<p class="programs">$ <span class="codestrong">./strtime "9:39:46pm 1 Feb 2011" "%I:%M:%S%p %d %b %Y"</span><br/>calendar time (seconds since Epoch): 1296592786<br/>strftime() yields: 21:39:46 Tuesday, 01 February 2011 CET</p>
<p class="noindent">The following usage is similar, but this time we explicitly specify a format for <em>strftime()</em>:</p>
<p class="programs">$ <span class="codestrong">./strtime "9:39:46pm 1 Feb 2011" "%I:%M:%S%p %d %b %Y" "%F %T"</span><br/>calendar time (seconds since Epoch): 1296592786<br/>strftime() yields: 2011-02-01 21:39:46</p>
<p class="examplet"><span epub:type="pagebreak" id="page_197"/><a id="ch10ex3"/><strong>Listing 10-3:</strong> Retrieving and converting calendar times</p>
<p class="programsli">___________________________________________________________ <span class="codestrong">time/strtime.c</span><br/><br/>#define _XOPEN_SOURCE<br/>#include &lt;time.h&gt;<br/>#include &lt;locale.h&gt;<br/>#include "tlpi_hdr.h"<br/><br/>#define SBUF_SIZE 1000<br/><br/>int<br/>main(int argc, char *argv[])<br/>{<br/>&#160;&#160;&#160;&#160;struct tm tm;<br/>&#160;&#160;&#160;&#160;char sbuf[SBUF_SIZE];<br/>&#160;&#160;&#160;&#160;char *ofmt;<br/><br/>&#160;&#160;&#160;&#160;if (argc &lt; 3 || strcmp(argv[1], "--help") == 0)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;usageErr("%s input-date-time in-format [out-format]\n", argv[0]);<br/><br/>&#160;&#160;&#160;&#160;if (setlocale(LC_ALL, "") == NULL)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errExit("setlocale");&#160;&#160;&#160;/* Use locale settings in conversions */<br/><br/>&#160;&#160;&#160;&#160;memset(&#38;tm, 0, sizeof(struct tm));&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Initialize 'tm' */<br/>&#160;&#160;&#160;&#160;if (strptime(argv[1], argv[2], &#38;tm) == NULL)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fatal("strptime");<br/><br/>&#160;&#160;&#160;&#160;tm.tm_isdst = -1;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Not set by strptime(); tells mktime()<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;to determine if DST is in effect */<br/>&#160;&#160;&#160;&#160;printf("calendar time (seconds since Epoch): %ld\n", (long) mktime(&#38;tm));<br/><br/>&#160;&#160;&#160;&#160;ofmt = (argc &gt; 3) ? argv[3] : "%H:%M:%S %A, %d %B %Y %Z";<br/>&#160;&#160;&#160;&#160;if (strftime(sbuf, SBUF_SIZE, ofmt, &#38;tm) == 0)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fatal("strftime returned 0");<br/>&#160;&#160;&#160;&#160;printf("strftime() yields: %s\n", sbuf);<br/><br/>&#160;&#160;&#160;&#160;exit(EXIT_SUCCESS);<br/>}<br/>___________________________________________________________ <span class="codestrong">time/strtime.c</span></p>
<h3 class="h3" id="ch10lev1sec03"><strong>10.3 Timezones</strong></h3>
<p class="noindenta">Different countries (and sometimes even different regions within a single country) operate on different timezones and DST regimes. Programs that input and output times must take into account the timezone and DST regime of the system on which they are run. Fortunately, all of the details are handled by the C library.</p>
<h5 class="h5" id="ch10lev3sec03"><strong>Timezone definitions</strong></h5>
<p class="noindenta">Timezone information tends to be both voluminous and volatile. For this reason, rather than encoding it directly into programs or libraries, the system maintains this information in files in standard formats.</p>
<p class="indent"><span epub:type="pagebreak" id="page_198"/>These files reside in the directory <span class="literal">/usr/share/zoneinfo</span>. Each file in this directory contains information about the timezone regime in a particular country or region. These files are named according to the timezone they describe, so we may find files with names such as <span class="literal">EST</span> (US Eastern Standard Time), <span class="literal">CET</span> (Central European Time), <span class="literal">UTC</span>, <span class="literal">Turkey</span>, and <span class="literal">Iran</span>. In addition, subdirectories can be used to hierarchically group related timezones. Under a directory such as <span class="literal">Pacific</span>, we may find the files <span class="literal">Auckland</span>, <span class="literal">Port_Moresby</span>, and <span class="literal">Galapagos</span>. When we specify a timezone for use by a program, in effect, we are specifying a relative pathname for one of the timezone files in this directory.</p>
<p class="indent">The local time for the system is defined by the timezone file <span class="literal">/etc/localtime</span>, which is often linked to one of the files in <span class="literal">/usr/share/zoneinfo</span>.</p>
<div class="block">
<p class="noindent">The format of timezone files is documented in the <em>tzfile(5)</em> manual page. Timezone files are built using <em>zic(8)</em>, the <em>zone information compiler</em>. The <em>zdump(8)</em> command can be used to display the time as it would be currently according to the timezone in a specified timezone file.</p>
</div>
<h5 class="h5" id="ch10lev3sec04"><strong>Specifying the timezone for a program</strong></h5>
<p class="noindenta">To specify a timezone when running a program, we set the <span class="literal">TZ</span> environment variable to a string consisting of a colon (<span class="literal">:</span>) followed by one of the timezone names defined in <span class="literal">/usr/share/zoneinfo</span>. Setting the timezone automatically influences the functions <em>ctime()</em>, <em>localtime()</em>, <em>mktime()</em>, and <em>strftime()</em>.</p>
<p class="indent">To obtain the current timezone setting, each of these functions uses <em>tzset(3)</em>, which initializes three global variables:</p>
<p class="programs">char *tzname[2];&#160;&#160;&#160;&#160;/* Name of timezone and alternate (DST) timezone */<br/>int daylight;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Nonzero if there is an alternate (DST) timezone */<br/>long timezone;&#160;&#160;&#160;&#160;&#160;&#160;/* Seconds difference between UTC and local<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;standard time */</p>
<p class="noindent">The <em>tzset()</em> function first checks the <span class="literal">TZ</span> environment variable. If this variable is not set, then the timezone is initialized to the default defined in the timezone file <span class="literal">/etc/localtime</span>. If the <span class="literal">TZ</span> environment variable is defined with a value that can&#8217;t be matched to a timezone file, or it is an empty string, then UTC is used. The <span class="literal">TZDIR</span> environment variable (a nonstandard GNU-extension) can be set to the name of a directory in which timezone information should be sought instead of in the default <span class="literal">/usr/share/zoneinfo</span>.</p>
<p class="indent">We can see the effect of the <span class="literal">TZ</span> variable by running the program in <a href="ch10.xhtml#ch10ex4">Listing 10-4</a>. In the first run, we see the output corresponding to the system&#8217;s default timezone (Central European Time, CET). In the second run, we specify the timezone for New Zealand, which at this time of year is on daylight saving time, 12 hours ahead of CET.</p>
<p class="programs">$ <span class="codestrong">./show_time</span><br/>ctime() of time() value is:&#160;&#160;Tue Feb&#160;&#160;1 10:25:56 2011<br/>asctime() of local time is:&#160;&#160;Tue Feb&#160;&#160;1 10:25:56 2011<br/>strftime() of local time is: Tuesday, 01 Feb 2011, 10:25:56 CET<br/>$ <span class="codestrong">TZ=":Pacific/Auckland" ./show_time</span><br/>ctime() of time() value is:&#160;&#160;Tue Feb&#160;&#160;1 22:26:19 2011<br/>asctime() of local time is:&#160;&#160;Tue Feb&#160;&#160;1 22:26:19 2011<br/>strftime() of local time is: Tuesday, 01 February 2011, 22:26:19 NZDT</p>
<p class="examplet"><span epub:type="pagebreak" id="page_199"/><a id="ch10ex4"/><strong>Listing 10-4:</strong> Demonstrate the effect of timezones and locales</p>
<p class="programsli">_________________________________________________________ <span class="codestrong">time/show_time.c</span><br/><br/>#include &lt;time.h&gt;<br/>#include &lt;locale.h&gt;<br/>#include "tlpi_hdr.h"<br/><br/>#define BUF_SIZE 200<br/><br/>int<br/>main(int argc, char *argv[])<br/>{<br/>&#160;&#160;&#160;&#160;time_t t;<br/>&#160;&#160;&#160;&#160;struct tm *loc;<br/>&#160;&#160;&#160;&#160;char buf[BUF_SIZE];<br/><br/>&#160;&#160;&#160;&#160;if (setlocale(LC_ALL, "") == NULL)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errExit("setlocale");&#160;&#160;&#160;/* Use locale settings in conversions */<br/><br/>&#160;&#160;&#160;&#160;t = time(NULL);<br/><br/>&#160;&#160;&#160;&#160;printf("ctime() of time() value is: %s", ctime(&#38;t));<br/><br/>&#160;&#160;&#160;&#160;loc = localtime(&#38;t);<br/>&#160;&#160;&#160;&#160;if (loc == NULL)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errExit("localtime");<br/><br/>&#160;&#160;&#160;&#160;printf("asctime() of local time is: %s", asctime(loc));<br/><br/>&#160;&#160;&#160;&#160;if (strftime(buf, BUF_SIZE, "%A, %d %B %Y, %H:%M:%S %Z", loc) == 0)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fatal("strftime returned 0");<br/>&#160;&#160;&#160;&#160;printf("strftime() of local time is: %s\n", buf);<br/><br/>&#160;&#160;&#160;&#160;exit(EXIT_SUCCESS);<br/>}<br/>_________________________________________________________ <span class="codestrong">time/show_time.c</span></p>
<p class="noindent">SUSv3 defines two general ways in which the <span class="literal">TZ</span> environment variable can be set. As just described, <span class="literal">TZ</span> can be set to a character sequence consisting of a colon plus a string that identifies the timezone in an implementation-specific manner, typically as a pathname for a timezone description file. (Linux and some other UNIX implementations permit the colon to be omitted when using this form, but SUSv3 doesn&#8217;t specify this; for portability, we should always include the colon.)</p>
<p class="indent">The other method of setting <span class="literal">TZ</span> is fully specified in SUSv3. In this method, we assign a string of the following form to <span class="literal">TZ</span>:</p>
<div class="box2">
<p class="noindenta"><em>std offset</em> <span class="literal">[</span> <em>dst</em> <span class="literal">[</span> <em>offset</em> <span class="literal">][ ,</span> <em>start-date</em> <span class="literal">[ /</span><em>time</em> <span class="literal">] ,</span> <em>end-date</em> <span class="literal">[ /</span><em>time</em> <span class="literal">]]]</span></p>
</div>
<p class="noindent">Spaces are included in the line above for clarity, but none should appear in the <span class="literal">TZ</span> value. The brackets (<span class="literal">[]</span>) are used to indicate optional components.</p>
<p class="indent">The <em>std</em> and <em>dst</em> components are strings that define names for the standard and DST timezones; for example, <em>CET</em> and <em>CEST</em> for Central European Time and Central European Summer Time. The <em>offset</em> in each case specifies the positive or negative <span epub:type="pagebreak" id="page_200"/>adjustment to add to the local time to convert it to UTC. The final four components provide a rule describing when the change from standard time to DST occurs.</p>
<p class="indent">The dates can be specified in a variety of forms, one of which is <span class="literal">M</span><em>m</em><span class="literal">.</span><em>n</em><span class="literal">.</span><em>d</em>. This notation means day <em>d</em> (0 = Sunday, 6 = Saturday) of week <em>n</em> (1 to 5, where 5 always means the last <em>d</em> day) of month <em>m</em> (1 to 12). If the <em>time</em> is omitted, it defaults to 02:00:00 (2 AM) in each case.</p>
<p class="indent">Here is how we could define <span class="literal">TZ</span> for Central Europe, where standard time is one hour ahead of UTC, and DST&#8212;running from the last Sunday in March to the last Sunday in October&#8212;is 2 hours ahead of UTC:</p>
<p class="programs">TZ="CET-1:00:00CEST-2:00:00,M3.5.0,M10.5.0"</p>
<p class="noindent">We omitted the specification of the time for the DST changeover, since it occurs at the default of 02:00:00. Of course, the preceding form is less readable than the near equivalent:</p>
<p class="programs">TZ=":Europe/Berlin"</p>
<h3 class="h3" id="ch10lev1sec04"><strong>10.4 Locales</strong></h3>
<p class="noindenta">Several thousand languages are spoken across the world, of which a significant percentage are regularly used on computer systems. Furthermore, different countries use different conventions for displaying information such as numbers, currency amounts, dates, and times. For example, in most European countries, a comma, rather than a decimal point, is used to separate the integer and fractional parts of (real) numbers, and most countries use formats for writing dates that are different from the <em>MM/DD/YY</em> format used in the United States. SUSv3 defines a <em>locale</em> as the &#8220;subset of a user&#8217;s environment that depends on language and cultural conventions.&#8221;</p>
<p class="indent">Ideally, all programs designed to run in more than one location should deal with locales in order to display and input information in the user&#8217;s preferred language and format. This constitutes the complex subject of <em>internationalization</em>. In the ideal world, we would write a program once, and then, wherever it was run, it would automatically do the right things when performing I/O; that is, it would perform the task of <em>localization</em>. Internationalizing programs is a somewhat time-consuming job, although various tools are available to ease the task. Program libraries such as <em>glibc</em> also provide facilities to help with internationalization.</p>
<div class="block">
<p class="noindent">The term <em>internationalization</em> is often written as <em>I18N</em>, for <em>I</em> plus 18 letters plus <em>N</em>. As well as being quicker to write, this term has the advantage of avoiding the difference in the spelling of the term itself in British and American English.</p>
</div>
<h5 class="h5" id="ch10lev3sec05"><strong>Locale definitions</strong></h5>
<p class="noindenta">Like timezone information, locale information tends to be both voluminous and volatile. For this reason, rather than requiring each program and library to store locale information, the system maintains this information in files in standard formats.</p>
<p class="indent"><span epub:type="pagebreak" id="page_201"/>Locale information is maintained in a directory hierarchy under <span class="literal">/usr/share/locale</span> (or <span class="literal">/usr/lib/locale</span> in some distributions). Each subdirectory under this directory contains information about a particular locale. These directories are named using the following convention:</p>
<div class="box2">
<p class="noindenta"><em>language</em><span class="literal">[_</span><em>territory</em><span class="literal">[.</span><em>codeset</em><span class="literal">]][@</span><em>modifier</em><span class="literal">]</span></p>
</div>
<p class="noindent">The <em>language</em> is a two-letter ISO language code, and the <em>territory</em> is a two-letter ISO country code. The <em>codeset</em> designates a character-encoding set. The <em>modifier</em> provides a means of distinguishing multiple locale directories whose language, territory, and codeset are the same. An example of a complete locale directory name is <span class="literal">de_DE.utf-8@euro</span>, as the locale for: German language, Germany, UTF-8 character encoding, employing the euro as the monetary unit.</p>
<p class="indent">As indicated by the brackets shown in the directory naming format, various parts of the name of a locale directory can be omitted. Often the name consists of just a language and a territory. Thus, the directory <span class="literal">en_US</span> is the locale directory for the (English-speaking) United States, and <span class="literal">fr_CH</span> is the locale directory for the French-speaking region of Switzerland.</p>
<div class="block">
<p class="noindent">The <em>CH</em> stands for <em>Confoederatio Helvetica</em>, the Latin (and thus locally language-neutral) name for Switzerland. With four official national languages, Switzerland is an example of a locale analog of a country with multiple timezones.</p>
</div>
<p class="noindent">When we specify a locale to be used within a program, we are, in effect, specifying the name of one of the subdirectories under <span class="literal">/usr/share/locale</span>. If the locale specified to the program doesn&#8217;t match a locale directory name exactly, then the C library searches for a match by stripping components from the specified locale in the following order:</p>
<ol>
<li class="order"><p class="orderp">codeset</p></li>
<li class="order"><p class="orderp">normalized codeset</p></li>
<li class="order"><p class="orderp">territory</p></li>
<li class="order"><p class="orderp">modifier</p></li>
</ol>
<p class="noindent">The normalized codeset is a version of the codeset name in which all nonalphanumeric characters are removed, all letters are converted to lowercase, and the resulting string is preprended with the characters <span class="literal">iso</span>. The aim of normalizing is to handle variations in the capitalization and punctuation (e.g., extra hyphens) of codeset names.</p>
<p class="indent">As an example of this stripping process, if the locale for a program is specified as <span class="literal">fr_CH.utf-8</span>, but no locale directory by that name exists, then the <span class="literal">fr_CH</span> locale directory will be matched if it exists. If the <span class="literal">fr_CH</span> directory doesn&#8217;t exist, then the <span class="literal">fr</span> locale directory will be used. In the unlikely event that the <span class="literal">fr</span> directory doesn&#8217;t exist, then the <em>setlocale()</em> function, described shortly, will report an error.</p>
<div class="block">
<p class="noindent">The file <span class="literal">/usr/share/locale/locale.alias</span> defines alternative ways of specifying locales to a program. See the <em>locale.aliases(5)</em> manual page for details.</p>
</div>
<p class="noindentb"><span epub:type="pagebreak" id="page_202"/>Under each locale subdirectory is a standard set of files that specify the conventions for this locale, as shown in <a href="ch10.xhtml#ch10table2">Table 10-2</a>. Note the following further points concerning the information in this table:</p>
<p class="bull">&#8226; The <span class="literal">LC_COLLATE</span> file defines a set of rules describing how the characters in a character set are ordered (i.e., the &#8220;alphabetical&#8221; order for the character set). These rules determine the operation of the <em>strcoll(3)</em> and <em>strxfrm(3)</em> functions. Even languages using Latin-based scripts don&#8217;t follow the same ordering rules. For example, several European languages have additional letters that, in some cases, sort after the letter <em>Z</em>. Other special cases include the Spanish two-letter sequence <em>ll</em>, which sorts as a single letter after <em>l</em>, and the German umlauted characters such as <em>&#228;</em>, which corresponds to <em>ae</em> and sorts as those two letters.</p>
<p class="bull">&#8226; The <span class="literal">LC_MESSAGES</span> directory is one step toward internationalizing the messages displayed by a program. More extensive internationalization of program messages can be accomplished through the use of either message catalogs (see the <em>catopen(3)</em> and <em>catgets(3)</em> manual pages) or the GNU <em>gettext</em> API (available at <em><a href="http://www.gnu.org/">http://www.gnu.org/</a></em>).</p>
<div class="block1">
<p class="noindent">Version 2.2.2 of <em>glibc</em> introduced a number of new, nonstandard locale categories. <span class="literal">LC_ADDRESS</span> defines rules for the locale-specific representation of a postal address. <span class="literal">LC_IDENTIFICATION</span> specifies information identifying the locale. <span class="literal">LC_MEASUREMENT</span> defines the measurement system for the locale (e.g., metric versus imperial). <span class="literal">LC_NAME</span> defines the locale-specific rules for representation of a person&#8217;s names and title. <span class="literal">LC_PAPER</span> defines the standard paper size for the locale (e.g., US letter versus the A4 format used in most other countries). <span class="literal">LC_TELEPHONE</span> defines the rules for locale-specific representation of domestic and international telephone numbers, as well as the international country prefix and international dial-out prefix.</p>
</div>
<p class="tablecap"><a id="ch10table2"/><strong>Table 10-2:</strong> Contents of locale-specific subdirectories</p>
<table class="all">
<thead>
<tr>
<td style="vertical-align: top;" class="table_th"><p class="table"><strong>Filename</strong></p></td>
<td style="vertical-align: top;" class="table_th1"><p class="table"><strong>Purpose</strong></p></td>
</tr>
</thead>
<tbody>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">LC_CTYPE</span></p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">A file containing character classifications (see <em>isalpha(3)</em>) and rules for case conversion</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">LC_COLLATE</span></p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">A file containing the collation rules for a character set</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">LC_MONETARY</span></p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">A file containing formatting rules for monetary values (see <em>localeconv(3)</em> and <span class="literal">&lt;locale.h&gt;</span>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">LC_NUMERIC</span></p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">A file containing formatting rules for numbers other than monetary values (see <em>localeconv(3)</em> and <span class="literal">&lt;locale.h&gt;</span>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span class="literal">LC_TIME</span></p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">A file containing formatting rules for dates and times</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_3"><p class="table"><span class="literal">LC_MESSAGES</span></p></td>
<td style="vertical-align: top;" class="table_3a"><p class="table">A directory containing files specifying formats and values used for affirmative and negative (yes/no) responses</p></td>
</tr>
</tbody>
</table>
<p class="noindent">The actual locales that are defined on a system can vary. SUSv3 doesn&#8217;t make any requirements about this, except that a standard locale called <em>POSIX</em> (and synonymously, <em>C</em>, a name that exists for historical reasons) must be defined. This locale mirrors the historical behavior of UNIX systems. Thus, it is based on an ASCII <span epub:type="pagebreak" id="page_203"/>character set, and uses English for names of days and months, and for yes/no responses. The monetary and numeric components of this locale are undefined.</p>
<div class="block">
<p class="noindent">The <em>locale</em> command displays information about the current locale environment (within the shell). The command <em>locale &#8211;a</em> lists the full set of locales defined on the system.</p>
</div>
<h5 class="h5" id="ch10lev3sec06"><strong>Specifying the locale for a program</strong></h5>
<p class="noindenta">The <em>setlocale()</em> function is used to both set and query a program&#8217;s current locale.</p>
<div class="box">
<p class="programsa">#include &lt;locale.h&gt;<br/><br/>char *<span class="codestrong">setlocale</span>(int <span class="font1">category</span>, const char *<span class="font1">locale</span>);</p>
<p class="right">Returns pointer to a (usually statically allocated) string identifying the new or current locale on success, or <span class="literal">NULL</span> on error</p>
</div>
<p class="noindent">The <em>category</em> argument selects which part of the locale to set or query, and is specified as one of a set of constants whose names are the same as the locale categories listed in <a href="ch10.xhtml#ch10table2">Table 10-2</a>. Thus, for example, it is possible to set the locale for time displays to be Germany, while setting the locale for monetary displays to US dollars. Alternatively, and more commonly, we can use the value <span class="literal">LC_ALL</span> to specify that we want to set all aspects of the locale.</p>
<p class="indent">There are two different methods of setting the locale using <em>setlocale()</em>. The <em>locale</em> argument may be a string specifying one of the locales defined on the system (i.e., the name of one of the subdirectories under <span class="literal">/usr/lib/locale</span>), such as <span class="literal">de_DE</span> or <span class="literal">en_US</span>. Alternatively, <em>locale</em> may be specified as an empty string, meaning that locale settings should be taken from environment variables:</p>
<p class="programs">setlocale(LC_ALL, "");</p>
<p class="noindent">We must make this call in order for a program to be cognizant of the locale environment variables. If the call is omitted, these environment variables will have no effect on the program.</p>
<p class="indent">When running a program that makes a <em>setlocale(LC_ALL, &#8220;&#8221;)</em> call, we can control various aspects of the locale using a set of environment variables whose names again correspond to the categories listed in <a href="ch10.xhtml#ch10table2">Table 10-2</a>: <span class="literal">LC_CTYPE</span>, <span class="literal">LC_COLLATE</span>, <span class="literal">LC_MONETARY</span>, <span class="literal">LC_NUMERIC</span>, <span class="literal">LC_TIME</span>, and <span class="literal">LC_MESSAGES</span>. Alternatively, we can use the <span class="literal">LC_ALL</span> or the <span class="literal">LANG</span> environment variable to specify the setting of the entire locale. If more than one of the preceding variables is set, then <span class="literal">LC_ALL</span> has precedence over all of the other <span class="literal">LC_*</span> environment variables, and <span class="literal">LANG</span> has lowest precedence. Thus, it is possible to use <span class="literal">LANG</span> to set a default locale for all categories, and then use individual <span class="literal">LC_*</span> variables to set aspects of the locale to something other than this default.</p>
<p class="indent">As its result, <em>setlocale()</em> returns a pointer to a (usually statically allocated) string that identifies the locale setting for this category. If we are interested only in discovering the current locale setting, without changing it, then we can specify the <em>locale</em> argument as <span class="literal">NULL</span>.</p>
<p class="indent">Locale settings control the operation of a wide range of GNU/Linux utilities, as well as many functions in <em>glibc</em>. Among these are the functions <em>strftime()</em> and <span epub:type="pagebreak" id="page_204"/><em>strptime()</em> (<a href="ch10.xhtml#ch10lev2sec03">Section 10.2.3</a>), as shown by the results from <em>strftime()</em> when we run the program in <a href="ch10.xhtml#ch10ex4">Listing 10-4</a> in a number of different locales:</p>
<p class="programs">$ <span class="codestrong">LANG=de_DE ./show_time</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="font1">German locale</span><br/>ctime() of time() value is:&#160;&#160;Tue Feb&#160;&#160;1 12:23:39 2011<br/>asctime() of local time is:&#160;&#160;Tue Feb&#160;&#160;1 12:23:39 2011<br/>strftime() of local time is: Dienstag, 01 Februar 2011, 12:23:39 CET</p>
<p class="noindent">The next run demonstrates that the <span class="literal">LC_TIME</span> has precedence over <span class="literal">LANG</span>:</p>
<p class="programs">$ <span class="codestrong">LANG=de_DE LC_TIME=it_IT ./show_time</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="font1">German and Italian locales</span><br/>ctime() of time() value is:&#160;&#160;Tue Feb&#160;&#160;1 12:24:03 2011<br/>asctime() of local time is:&#160;&#160;Tue Feb&#160;&#160;1 12:24:03 2011<br/>strftime() of local time is: marted&#236;, 01 febbraio 2011, 12:24:03 CET</p>
<p class="noindent">And this run demonstrates that <span class="literal">LC_ALL</span> has precedence over <span class="literal">LC_TIME</span>:</p>
<p class="programs">$ <span class="codestrong">LC_ALL=fr_FR LC_TIME=en_US ./show_time</span>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="font1">French and US locales</span><br/>ctime() of time() value is:&#160;&#160;Tue Feb&#160;&#160;1 12:25:38 2011<br/>asctime() of local time is:&#160;&#160;Tue Feb&#160;&#160;1 12:25:38 2011<br/>strftime() of local time is: mardi, 01 f&#233;vrier 2011, 12:25:38 CET</p>
<h3 class="h3" id="ch10lev1sec05"><strong>10.5 Updating the System Clock</strong></h3>
<p class="noindenta">We now look at two interfaces that update the system clock: <em>settimeofday()</em> and <em>adjtime()</em>. These interfaces are rarely used by application programs (since the system time is usually maintained by tools such as the <em>Network Time Protocol</em> daemon), and they require that the caller be privileged (<span class="literal">CAP_SYS_TIME</span>).</p>
<p class="indent">The <em>settimeofday()</em> system call performs the converse of <em>gettimeofday()</em> (which we described in <a href="ch10.xhtml#ch10lev1sec01">Section 10.1</a>): it sets the system&#8217;s calendar time to the number of seconds and microseconds specified in the <em>timeval</em> structure pointed to by <em>tv</em>.</p>
<div class="box">
<p class="programsa">#define _BSD_SOURCE<br/>#include &lt;sys/time.h&gt;<br/><br/>int <span class="codestrong">settimeofday</span>(const struct timeval *<span class="font1">tv</span>, const struct timezone *<span class="font1">tz</span>);</p>
<p class="right">Returns 0 on success, or &#8211;1 on error</p>
</div>
<p class="noindent">As with <em>gettimeofday()</em>, the use of the <em>tz</em> argument is obsolete, and this argument should always be specified as <span class="literal">NULL</span>.</p>
<p class="indent">The microsecond precision of the <em>tv.tv_usec</em> field doesn&#8217;t mean that we have microsecond accuracy in controlling the system clock, since the clock&#8217;s granularity may be larger than one microsecond.</p>
<p class="indent">Although <em>settimeofday()</em> is not specified in SUSv3, it is widely available on other UNIX implementations.</p>
<div class="block">
<p class="noindent">Linux also provides the <em>stime()</em> system call for setting the system clock. The difference between <em>settimeofday()</em> and <em>stime()</em> is that the latter call allows the new calendar time to be expressed with a precision of only 1 second. As with <em>time()</em> and <em>gettimeofday()</em>, the reason for the existence of both <em>stime()</em> and <em>settimeofday()</em> is historical: the latter, more precise call was added by 4.2BSD.</p>
</div>
<p class="noindent"><span epub:type="pagebreak" id="page_205"/>Abrupt changes in the system time of the sort caused by calls to <em>settimeofday()</em> can have deleterious effects on applications (e.g., <em>make(1)</em>, a database system using timestamps, or time-stamped log files) that depend on a monotonically increasing system clock. For this reason, when making small changes to the time (of the order of a few seconds), it is usually preferable to use the <em>adjtime()</em> library function, which causes the system clock to gradually adjust to the desired value.</p>
<div class="box">
<p class="programsa">#define _BSD_SOURCE<br/>#include &lt;sys/time.h&gt;<br/><br/>int <span class="codestrong">adjtime</span>(struct timeval *<span class="font1">delta</span>, struct timeval *<span class="font1">olddelta</span>);</p>
<p class="right">Returns 0 on success, or &#8211;1 on error</p>
</div>
<p class="noindent">The <em>delta</em> argument points to a <em>timeval</em> structure that specifies the number of seconds and microseconds by which to change the time. If this value is positive, then a small amount of additional time is added to the system clock each second, until the desired amount of time has been added. If the <em>delta</em> value is negative, the clock is slowed down in a similar fashion.</p>
<div class="block">
<p class="noindent">The rate of clock adjustment on Linux/x86-32 amounts to 1 second per 2000 seconds (or 43.2 seconds per day).</p>
</div>
<p class="noindent">It may be that an incomplete clock adjustment was in progress at the time of the <em>adjtime()</em> call. In this case, the amount of remaining, unadjusted time is returned in the <em>timeval</em> structure pointed to by <em>olddelta</em>. If we are not interested in this value, we can specify <em>olddelta</em> as <span class="literal">NULL</span>. Conversely, if we are interested only in knowing the currently outstanding time correction to be made, and don&#8217;t want to change the value, we can specify the <em>delta</em> argument as <span class="literal">NULL</span>.</p>
<p class="indent">Although not specified in SUSv3, <em>adjtime()</em> is available on most UNIX implementations.</p>
<div class="block">
<p class="noindent">On Linux, <em>adjtime()</em> is implemented on top of a more general (and complex) Linux-specific system call, <em>adjtimex()</em>. This system call is employed by the <em>Network Time Protocol</em> (NTP) daemon. For further information, refer to the Linux source code, the Linux <em>adjtimex(2)</em> manual page, and the NTP specification ([<a href="bib.xhtml#bib69">Mills, 1992</a>]).</p>
</div>
<h3 class="h3" id="ch10lev1sec06"><strong>10.6 The Software Clock (Jiffies)</strong></h3>
<p class="noindenta">The accuracy of various time-related system calls described in this book is limited to the resolution of the system <em>software clock</em>, which measures time in units called <em>jiffies</em>. The size of a jiffy is defined by the constant <span class="literal">HZ</span> within the kernel source code. This is the unit in which the kernel allocates the CPU to processes under the round-robin time-sharing scheduling algorithm (<a href="ch35.xhtml#ch35lev1sec01">Section 35.1</a>).</p>
<p class="indent">On Linux/x86-32 in kernel versions up to and including 2.4, the rate of the software clock was 100 hertz; that is, a jiffy is 10 milliseconds.</p>
<p class="indent">Because CPU speeds have greatly increased since Linux was first implemented, in kernel 2.6.0, the rate of the software clock was raised to 1000 hertz on Linux/x86-32. The advantages of a higher software clock rate are that timers can operate <span epub:type="pagebreak" id="page_206"/>with greater accuracy and time measurements can be made with greater precision. However, it isn&#8217;t desirable to set the clock rate to arbitrarily high values, because each clock interrupt consumes a small amount of CPU time, which is time that the CPU can&#8217;t spend executing processes.</p>
<p class="indent">Debate among kernel developers eventually resulted in the software clock rate becoming a configurable kernel option (under <em>Processor type and features, Timer frequency</em>). Since kernel 2.6.13, the clock rate can be set to 100, 250 (the default), or 1000 hertz, giving jiffy values of 10, 4, and 1 milliseconds, respectively. Since kernel 2.6.20, a further frequency is available: 300 hertz, a number that divides evenly for two common video frame rates: 25 frames per second (PAL) and 30 frames per second (NTSC).</p>
<h3 class="h3" id="ch10lev1sec07"><strong>10.7 Process Time</strong></h3>
<p class="noindentab">Process time is the amount of CPU time used by a process since it was created. For recording purposes, the kernel separates CPU time into the following two components:</p>
<p class="bull">&#8226; <em>User CPU time</em> is the amount of time spent executing in user mode. Sometimes referred to as <em>virtual time</em>, this is the time that it appears to the program that it has access to the CPU.</p>
<p class="bull">&#8226; <em>System CPU time</em> is amount of time spent executing in kernel mode. This is the time that the kernel spends executing system calls or performing other tasks on behalf of the program (e.g., servicing page faults).</p>
<p class="noindentt">Sometimes, we refer to process time as the <em>total CPU time</em> consumed by the process.</p>
<p class="indent">When we run a program from the shell, we can use the <em>time(1)</em> command to obtain both process time values, as well as the real time required to run the program:</p>
<p class="programs">$ <span class="codestrong">time ./myprog</span><br/>real&#160;&#160;&#160;&#160;0m4.84s<br/>user&#160;&#160;&#160;&#160;0m1.030s<br/>sys&#160;&#160;&#160;&#160;&#160;0m3.43s</p>
<p class="noindent">The <em>times()</em> system call retrieves process time information, returning it in the structure pointed to by <em>buf</em>.</p>
<div class="box">
<p class="programsa">#include &lt;sys/times.h&gt;<br/><br/>clock_t <span class="codestrong">times</span>(struct tms *<span class="font1">buf</span>);</p>
<p class="right">Returns number of clock ticks (<em>sysconf(_SC_CLK_TCK)</em>) since &#8220;arbitrary&#8221; time in past on success, or <em>(clock_t)</em> &#8211;1 on error</p>
</div>
<p class="noindent">This <em>tms</em> structure pointed to by <em>buf</em> has the following form:</p>
<p class="programs">struct tms {<br/>&#160;&#160;&#160;&#160;clock_t tms_utime;&#160;&#160;&#160;/* User CPU time used by caller */<br/>&#160;&#160;&#160;&#160;clock_t tms_stime;&#160;&#160;&#160;/* System CPU time used by caller */<br/>&#160;&#160;&#160;&#160;clock_t tms_cutime;&#160;&#160;/* User CPU time of all (waited for) children */<br/>&#160;&#160;&#160;&#160;clock_t tms_cstime;&#160;&#160;/* System CPU time of all (waited for) children */<br/>};</p>
<p class="noindent"><span epub:type="pagebreak" id="page_207"/>The first two fields of the <em>tms</em> structure return the user and system components of CPU time used so far by the calling process. The last two fields return information about the CPU time used by all child processes that have terminated and for which the parent (i.e., the caller of <em>times()</em>) has done a <em>wait()</em> system call.</p>
<p class="indent">The <em>clock_t</em> data type used to type the four fields of the <em>tms</em> structure is an integer type that measures time in units called <em>clock ticks</em>. We can call <em>sysconf(_SC_CLK_TCK)</em> to obtain the number of clock ticks per second, and then divide a <em>clock_t</em> value by this number to convert to seconds. (We describe <em>sysconf()</em> in <a href="ch11.xhtml#ch11lev1sec02">Section 11.2</a>.)</p>
<div class="block">
<p class="noindent">On most Linux hardware architectures, <em>sysconf(_SC_CLK_TCK)</em> returns the number 100. This corresponds to the kernel constant <span class="literal">USER_HZ</span>. However, <span class="literal">USER_HZ</span> can be defined with a value other than 100 on a few architectures, such as Alpha and IA-64.</p>
</div>
<p class="noindent">On success, <em>times()</em> returns the elapsed (real) time in clock ticks since some arbitrary point in the past. SUSv3 deliberately does not specify what this point is, merely stating that it will be constant during the life of the calling process. Therefore, the only portable use of this return value is to measure elapsed time in the execution of the process by calculating the difference in the value returned by pairs of <em>times()</em> calls. However, even for this use, the return value of <em>times()</em> is unreliable, since it can overflow the range of <em>clock_t</em>, at which point the value would cycle to start again at 0 (i.e., a later <em>times()</em> call could return a number that is lower than an earlier <em>times()</em> call). The reliable way to measure the passage of elapsed time is to use <em>gettimeofday()</em> (described in <a href="ch10.xhtml#ch10lev1sec01">Section 10.1</a>).</p>
<p class="indent">On Linux, we can specify <em>buf</em> as <span class="literal">NULL</span>; in this case, <em>times()</em> simply returns a function result. However, this is not portable. The use of <span class="literal">NULL</span> for <em>buf</em> is not specified in SUSv3, and many other UNIX implementations require a non-<span class="literal">NULL</span> value for this argument.</p>
<p class="indent">The <em>clock()</em> function provides a simpler interface for retrieving the process time. It returns a single value that measures the total (i.e., user plus system) CPU time used by the calling process.</p>
<div class="box">
<p class="programsa">#include &lt;time.h&gt;<br/><br/>clock_t <span class="codestrong">clock</span>(void);</p>
<p class="right">Returns total CPU time used by calling process measured in <span class="literal">CLOCKS_PER_SEC</span>, or <em>(clock_t)</em> &#8211;1 on error</p>
</div>
<p class="noindent">The value returned by <em>clock()</em> is measured in units of <span class="literal">CLOCKS_PER_SEC</span>, so we must divide by this value to arrive at the number of seconds of CPU time used by the process. <span class="literal">CLOCKS_PER_SEC</span> is fixed at 1 million by POSIX.1, regardless of the resolution of the underlying software clock (<a href="ch10.xhtml#ch10lev1sec06">Section 10.6</a>). The accuracy of <em>clock()</em> is nevertheless limited to the resolution of the software clock.</p>
<div class="block">
<p class="noindent"><span epub:type="pagebreak" id="page_208"/>Although the <em>clock_t</em> return type of <em>clock()</em> is the same data type that is used in the <em>times()</em> call, the units of measurement employed by these two interfaces are different. This is the result of historically conflicting definitions of <em>clock_t</em> in POSIX.1 and the C programming language standard.</p>
</div>
<p class="noindent">Even though <span class="literal">CLOCKS_PER_SEC</span> is fixed at 1 million, SUSv3 notes that this constant could be an integer variable on non-XSI-conformant systems, so that we can&#8217;t portably treat it as a compile-time constant (i.e., we can&#8217;t use it in <span class="literal">#ifdef</span> preprocessor expressions). Because it may be defined as a long integer (i.e., <span class="literal">1000000L</span>), we always cast this constant to <em>long</em> so that we can portably print it with <em>printf()</em> (see <a href="ch03.xhtml#ch03lev2sec04">Section 3.6.2</a>).</p>
<p class="indent">SUSv3 states that <em>clock()</em> should return &#8220;the processor time used by the process.&#8221; This is open to different interpretations. On some UNIX implementations, the time returned by <em>clock()</em> includes the CPU time used by all waited-for children. On Linux, it does not.</p>
<h5 class="h5" id="ch10lev3sec07"><strong>Example program</strong></h5>
<p class="noindenta">The program in <a href="ch10.xhtml#ch10ex5">Listing 10-5</a> demonstrates the use of the functions described in this section. The <em>displayProcessTimes()</em> function prints the message supplied by the caller, and then uses <em>clock()</em> and <em>times()</em> to retrieve and display process times. The main program makes an initial call to <em>displayProcessTimes()</em>, and then executes a loop that consumes some CPU time by repeatedly calling <em>getppid()</em>, before again calling <em>displayProcessTimes()</em> once more to see how much CPU time has been consumed within the loop. When we use this program to call <em>getppid()</em> 10 million times, this is what we see:</p>
<p class="programs">$ <span class="codestrong">./process_time 10000000</span><br/>CLOCKS_PER_SEC=1000000 sysconf(_SC_CLK_TCK)=100<br/><br/>At program start:<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;clock() returns: 0 clocks-per-sec (0.00 secs)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;times() yields: user CPU=0.00; system CPU: 0.00<br/>After getppid() loop:<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;clock() returns: 2960000 clocks-per-sec (2.96 secs)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;times() yields: user CPU=1.09; system CPU: 1.87</p>
<p class="examplet"><a id="ch10ex5"/><strong>Listing 10-5:</strong> Retrieving process CPU times</p>
<p class="programsli">_______________________________________________________ <span class="codestrong">time/process_time.c</span><br/><br/>#include &lt;sys/times.h&gt;<br/>#include &lt;time.h&gt;<br/>#include "tlpi_hdr.h"<br/><br/>static void&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Display 'msg' and process times */<br/>displayProcessTimes(const char *msg)<br/>{<br/>&#160;&#160;&#160;&#160;struct tms t;<br/>&#160;&#160;&#160;&#160;clock_t clockTime;<br/>&#160;&#160;&#160;&#160;static long clockTicks = 0;<br/><br/>&#160;&#160;&#160;&#160;if (msg != NULL)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;printf("%s", msg);<br/>&#160;&#160;&#160;&#160;if (clockTicks == 0) {&#160;&#160;&#160;&#160;&#160;&#160;/* Fetch clock ticks on first call */<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;clockTicks = sysconf(_SC_CLK_TCK);<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;if (clockTicks == -1)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errExit("sysconf");<br/>&#160;&#160;&#160;&#160;}<br/><br/>&#160;&#160;&#160;&#160;clockTime = clock();<br/>&#160;&#160;&#160;&#160;if (clockTime == -1)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errExit("clock");<br/><br/>&#160;&#160;&#160;&#160;printf("&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;clock() returns: %ld clocks-per-sec (%.2f secs)\n",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(long) clockTime, (double) clockTime / CLOCKS_PER_SEC);<br/><br/>&#160;&#160;&#160;&#160;if (times(&#38;t) == -1)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;errExit("times");<br/>&#160;&#160;&#160;&#160;printf("&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;times() yields: user CPU=%.2f; system CPU: %.2f\n",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(double) t.tms_utime / clockTicks,<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(double) t.tms_stime / clockTicks);<br/>}<br/><br/>int<br/>main(int argc, char *argv[])<br/>{<br/>&#160;&#160;&#160;&#160;int numCalls, j;<br/><br/>&#160;&#160;&#160;&#160;printf("CLOCKS_PER_SEC=%ld sysconf(_SC_CLK_TCK)=%ld\n\n",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(long) CLOCKS_PER_SEC, sysconf(_SC_CLK_TCK));<br/><br/>&#160;&#160;&#160;&#160;displayProcessTimes("At program start:\n");<br/><br/>&#160;&#160;&#160;&#160;numCalls = (argc &gt; 1) ? getInt(argv[1], GN_GT_0, "num-calls") : 100000000;<br/>&#160;&#160;&#160;&#160;for (j = 0; j &lt; numCalls; j++)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(void) getppid();<br/><br/>&#160;&#160;&#160;&#160;displayProcessTimes("After getppid() loop:\n");<br/><br/>&#160;&#160;&#160;&#160;exit(EXIT_SUCCESS);<br/>}<br/>_______________________________________________________ <span class="codestrong">time/process_time.c</span></p>
<h3 class="h3" id="ch10lev1sec08"><span epub:type="pagebreak" id="page_209"/><strong>10.8 Summary</strong></h3>
<p class="noindenta">Real time corresponds to the everyday definition of time. When real time is measured from some standard point, we refer to it as calendar time, by contrast with elapsed time, which is measured from some point (usually the start) in the life of a process.</p>
<p class="indent">Process time is the amount of CPU time used by a process, and is divided into user and system components.</p>
<p class="indent">Various system calls enable us to get and set the system clock value (i.e., calendar time, as measured in seconds since the Epoch), and a range of library functions allow conversions between calendar time and other time formats, including broken-down <span epub:type="pagebreak" id="page_210"/>time and human-readable character strings. Describing such conversions took us into a discussion of locales and internationalization.</p>
<p class="indent">Using and displaying times and dates is an important part of many applications, and we&#8217;ll make frequent use of the functions described in this chapter in later parts of this book. We also say a little more about the measurement of time in <a href="ch23.xhtml#ch23">Chapter 23</a>.</p>
<h5 class="h5" id="ch10lev3sec08"><strong>Further information</strong></h5>
<p class="noindenta">Details of how the Linux kernel measures time can be found in [<a href="bib.xhtml#bib59">Love, 2010</a>].</p>
<p class="indent">An extensive discussion of timezones and internationalization can be found in the GNU C library manual (online at <em><a href="http://www.gnu.org/">http://www.gnu.org/</a></em>). The SUSv3 documents also cover locales in detail.</p>
<h3 class="h3" id="ch10lev1sec09"><strong>10.9 Exercise</strong></h3>
<p class="exer"><a id="ch10exe1"/><strong>10-1.</strong>&#160;&#160;&#160;Assume a system where the value returned by the call <em>sysconf(_SC_CLK_TCK)</em> is 100. Assuming that the <em>clock_t</em> value returned by <em>times()</em> is a signed 32-bit integer, how long will it take before this value cycles so that it restarts at 0? Perform the same calculation for the <span class="literal">CLOCKS_PER_SEC</span> value returned by <em>clock()</em>.</p>
</body>
</html>
