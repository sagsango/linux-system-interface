<?xml version="1.0" encoding="UTF-8"?>
<html xml:lang="en-us" lang="en-us" xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ns="http://www.w3.org/2001/10/synthesis">
<head>
<title>The Linux Programming Interface</title>
<link rel="stylesheet" type="text/css" href="../styles/9781593272203.css"/>
</head>
<body>
<h2 class="h2" id="ch02"><span epub:type="pagebreak" id="page_21"/><strong><span class="big">2</span></strong><br/><strong>FUNDAMENTAL CONCEPTS</strong></h2>
<p class="noindenta">This chapter introduces a range of concepts related to Linux system programming. It is intended for readers who have worked primarily with other operating systems, or who have only limited experience with Linux or another UNIX implementation.</p>
<h3 class="h3" id="ch02lev1sec01"><strong>2.1 The Core Operating System: The Kernel</strong></h3>
<p class="noindentab">The term <em>operating system</em> is commonly used with two different meanings:</p>
<p class="bull">&#8226; To denote the entire package consisting of the central software managing a computer&#8217;s resources and all of the accompanying standard software tools, such as command-line interpreters, graphical user interfaces, file utilities, and editors.</p>
<p class="bull">&#8226; More narrowly, to refer to the central software that manages and allocates computer resources (i.e., the CPU, RAM, and devices).</p>
<p class="noindentt">The term <em>kernel</em> is often used as a synonym for the second meaning, and it is with this meaning of the term <em>operating system</em> that we are concerned in this book.</p>
<p class="indent">Although it is possible to run programs on a computer without a kernel, the presence of a kernel greatly simplifies the writing and use of other programs, and increases the power and flexibility available to programmers. The kernel does this by providing a software layer to manage the limited resources of a computer.</p>
<div class="block">
<p class="noindent"><span epub:type="pagebreak" id="page_22"/>The Linux kernel executable typically resides at the pathname <span class="literal">/boot/vmlinuz</span>, or something similar. The derivation of this filename is historical. On early UNIX implementations, the kernel was called <span class="literal">unix</span>. Later UNIX implementations, which implemented virtual memory, renamed the kernel as <span class="literal">vmunix</span>. On Linux, the filename mirrors the system name, with the <em>z</em> replacing the final <em>x</em> to signify that the kernel is a compressed executable.</p>
</div>
<h5 class="h5" id="ch02lev3sec01"><strong>Tasks performed by the kernel</strong></h5>
<p class="noindentab">Among other things, the kernel performs the following tasks:</p>
<p class="bull">&#8226; <em>Process scheduling</em>: A computer has one or more central processing units (CPUs), which execute the instructions of programs. Like other UNIX systems, Linux is a <em>preemptive multitasking</em> operating system, <em>Multitasking</em> means that multiple processes (i.e., running programs) can simultaneously reside in memory and each may receive use of the CPU(s). <em>Preemptive</em> means that the rules governing which processes receive use of the CPU and for how long are determined by the kernel process scheduler (rather than by the processes themselves).</p>
<p class="bull">&#8226; <em>Memory management</em>: While computer memories are enormous by the standards of a decade or two ago, the size of software has also correspondingly grown, so that physical memory (RAM) remains a limited resource that the kernel must share among processes in an equitable and efficient fashion. Like most modern operating systems, Linux employs virtual memory management (<a href="ch06.xhtml#ch06lev1sec04">Section 6.4</a>), a technique that confers two main advantages:</p>
<p class="dash1">&#8211; Processes are isolated from one another and from the kernel, so that one process can&#8217;t read or modify the memory of another process or the kernel.</p>
<p class="dash1">&#8211; Only part of a process needs to be kept in memory, thereby lowering the memory requirements of each process and allowing more processes to be held in RAM simultaneously. This leads to better CPU utilization, since it increases the likelihood that, at any moment in time, there is at least one process that the CPU(s) can execute.</p>
<p class="bull">&#8226; <em>Provision of a file system</em>: The kernel provides a file system on disk, allowing files to be created, retrieved, updated, deleted, and so on.</p>
<p class="bull">&#8226; <em>Creation and termination of processes</em>: The kernel can load a new program into memory, providing it with the resources (e.g., CPU, memory, and access to files) that it needs in order to run. Such an instance of a running program is termed a <em>process</em>. Once a process has completed execution, the kernel ensures that the resources it uses are freed for subsequent reuse by later programs.</p>
<p class="bull">&#8226; <em>Access to devices</em>: The devices (mice, monitors, keyboards, disk and tape drives, and so on) attached to a computer allow communication of information between the computer and the outside world, permitting input, output, or both. The kernel provides programs with an interface that standardizes and simplifies access to devices, while at the same time arbitrating access by multiple processes to each device.</p>
<p class="bull"><span epub:type="pagebreak" id="page_23"/>&#8226; <em>Networking</em>: The kernel transmits and receives network messages (packets) on behalf of user processes. This task includes routing of network packets to the target system.</p>
<p class="bull">&#8226; <em>Provision of a system call application programming interface (API)</em>: Processes can request the kernel to perform various tasks using kernel entry points known as <em>system calls</em>. The Linux system call API is the primary topic of this book. <a href="ch03.xhtml#ch03lev1sec01">Section 3.1</a> details the steps that occur when a process performs a system call.</p>
<p class="noindentt">In addition to the above features, multiuser operating systems such as Linux generally provide users with the abstraction of a <em>virtual private computer</em>; that is, each user can log on to the system and operate largely independently of other users. For example, each user has their own disk storage space (home directory). In addition, users can run programs, each of which gets a share of the CPU and operates in its own virtual address space, and these programs can independently access devices and transfer information over the network. The kernel resolves potential conflicts in accessing hardware resources, so users and processes are generally unaware of the conflicts.</p>
<h5 class="h5" id="ch02lev3sec02"><strong>Kernel mode and user mode</strong></h5>
<p class="noindenta">Modern processor architectures typically allow the CPU to operate in at least two different modes: <em>user mode</em> and <em>kernel mode</em> (sometimes also referred to as <em>supervisor mode</em>). Hardware instructions allow switching from one mode to the other. Correspondingly, areas of virtual memory can be marked as being part of <em>user space</em> or <em>kernel space</em>. When running in user mode, the CPU can access only memory that is marked as being in user space; attempts to access memory in kernel space result in a hardware exception. When running in kernel mode, the CPU can access both user and kernel memory space.</p>
<p class="indent">Certain operations can be performed only while the processor is operating in kernel mode. Examples include executing the halt instruction to stop the system, accessing the memory-management hardware, and initiating device I/O operations. By taking advantage of this hardware design to place the operating system in kernel space, operating system implementers can ensure that user processes are not able to access the instructions and data structures of the kernel, or to perform operations that would adversely affect the operation of the system.</p>
<h5 class="h5" id="ch02lev3sec03"><strong>Process versus kernel views of the system</strong></h5>
<p class="noindenta">In many everyday programming tasks, we are accustomed to thinking about programming in a process-oriented way. However, when considering various topics covered later in this book, it can be useful to reorient our perspective to consider things from the kernel&#8217;s point of view. To make the contrast clear, we now consider how things look first from a process viewpoint and then from a kernel viewpoint.</p>
<p class="indent">A running system typically has numerous processes. For a process, many things happen asynchronously. An executing process doesn&#8217;t know when it will next time out, which other processes will then be scheduled for the CPU (and in what order), or when it will next be scheduled. The delivery of signals and the occurrence of interprocess communication events are mediated by the kernel, and can occur at any time for a process. Many things happen transparently for a process. A process <span epub:type="pagebreak" id="page_24"/>doesn&#8217;t know where it is located in RAM or, in general, whether a particular part of its memory space is currently resident in memory or held in the swap area (a reserved area of disk space used to supplement the computer&#8217;s RAM). Similarly, a process doesn&#8217;t know where on the disk drive the files it accesses are being held; it simply refers to the files by name. A process operates in isolation; it can&#8217;t directly communicate with another process. A process can&#8217;t itself create a new process or even end its own existence. Finally, a process can&#8217;t communicate directly with the input and output devices attached to the computer.</p>
<p class="indent">By contrast, a running system has one kernel that knows and controls everything. The kernel facilitates the running of all processes on the system. The kernel decides which process will next obtain access to the CPU, when it will do so, and for how long. The kernel maintains data structures containing information about all running processes and updates these structures as processes are created, change state, and terminate. The kernel maintains all of the low-level data structures that enable the filenames used by programs to be translated into physical locations on the disk. The kernel also maintains data structures that map the virtual memory of each process into the physical memory of the computer and the swap area(s) on disk. All communication between processes is done via mechanisms provided by the kernel. In response to requests from processes, the kernel creates new processes and terminates existing processes. Lastly, the kernel (in particular, device drivers) performs all direct communication with input and output devices, transferring information to and from user processes as required.</p>
<p class="indent">Later in this book we&#8217;ll say things such as &#8220;a process can create another process,&#8221; &#8220;a process can create a pipe,&#8221; &#8220;a process can write data to a file,&#8221; and &#8220;a process can terminate by calling <em>exit()</em>.&#8221; Remember, however, that the kernel mediates all such actions, and these statements are just shorthand for &#8220;a process can <em>request that the kernel</em> create another process,&#8221; and so on.</p>
<h5 class="h5" id="ch02lev3sec04"><strong>Further information</strong></h5>
<p class="noindenta">Modern texts covering operating systems concepts and design, with particular reference to UNIX systems, include [<a href="bib.xhtml#bib99">Tanenbaum, 2007</a>], [<a href="bib.xhtml#bib101">Tanenbaum &#38; Woodhull, 2006</a>], and [<a href="bib.xhtml#bib104">Vahalia, 1996</a>], the last of these containing much detail on virtual memory architectures. [<a href="bib.xhtml#bib35">Goodheart &#38; Cox, 1994</a>] provide details on System V Release 4. [<a href="bib.xhtml#bib63">Maxwell, 1999</a>] provides an annotated listing of selected parts of the Linux 2.2.5 kernel. [<a href="bib.xhtml#bib58">Lions, 1996</a>] is a detailed exposition of the Sixth Edition UNIX source code that remains a useful introduction to UNIX operating system internals. [<a href="bib.xhtml#bib09">Bovet &#38; Cesati, 2005</a>] describes the implementation of the Linux 2.6 kernel.</p>
<h3 class="h3" id="ch02lev1sec02"><strong>2.2 The Shell</strong></h3>
<p class="noindenta">A <em>shell</em> is a special-purpose program designed to read commands typed by a user and execute appropriate programs in response to those commands. Such a program is sometimes known as a <em>command interpreter</em>.</p>
<p class="indent">The term <em>login shell</em> is used to denote the process that is created to run a shell when the user first logs in.</p>
<p class="indentb"><span epub:type="pagebreak" id="page_25"/>Whereas on some operating systems the command interpreter is an integral part of the kernel, on UNIX systems, the shell is a user process. Many different shells exist, and different users (or, for that matter, a single user) on the same computer can simultaneously use different shells. A number of important shells have appeared over time:</p>
<p class="bull">&#8226; <em>Bourne shell</em> (<em>sh</em>): This is the oldest of the widely used shells, and was written by Steve Bourne. It was the standard shell for Seventh Edition UNIX. The Bourne shell contains many of the features familiar in all shells: I/O redirection, pipelines, filename generation (globbing), variables, manipulation of environment variables, command substitution, background command execution, and functions. All later UNIX implementations include the Bourne shell in addition to any other shells they might provide.</p>
<p class="bull">&#8226; <em>C shell</em> (<em>csh</em>): This shell was written by Bill Joy at the University of California at Berkeley. The name derives from the resemblance of many of the flow-control constructs of this shell to those of the C programming language. The C shell provided several useful interactive features unavailable in the Bourne shell, including command history, command-line editing, job control, and aliases. The C shell was not backward compatible with the Bourne shell. Although the standard interactive shell on BSD was the C shell, shell scripts (described in a moment) were usually written for the Bourne shell, so as to be portable across all UNIX implementations.</p>
<p class="bull">&#8226; <em>Korn shell</em> (<em>ksh</em>): This shell was written as the successor to the Bourne shell by David Korn at AT&#38;T Bell Laboratories. While maintaining backward compatibility with the Bourne shell, it also incorporated interactive features similar to those provided by the C shell.</p>
<p class="bull">&#8226; <em>Bourne again shell</em> (<em>bash</em>): This shell is the GNU project&#8217;s reimplementation of the Bourne shell. It supplies interactive features similar to those available in the C and Korn shells. The principal authors of <em>bash</em> are Brian Fox and Chet Ramey. Bash is probably the most widely used shell on Linux. (On Linux, the Bourne shell, <em>sh</em>, is typically provided by <em>bash</em> emulating <em>sh</em> as closely as possible.)</p>
<div class="block">
<p class="noindent">POSIX.2-1992 specified a standard for the shell that was based on the then current version of the Korn shell. Nowadays, the Korn shell and <em>bash</em> both conform to POSIX, but provide a number of extensions to the standard, and many of these extensions differ between the two shells.</p>
</div>
<p class="noindent">The shells are designed not merely for interactive use, but also for the interpretation of <em>shell scripts</em>, which are text files containing shell commands. For this purpose, each of the shells has the facilities typically associated with programming languages: variables, loop and conditional statements, I/O commands, and functions.</p>
<p class="indent">Each of the shells performs similar tasks, albeit with variations in syntax. Unless referring to the operation of a specific shell, we typically refer to &#8220;the shell,&#8221; with the understanding that all shells operate in the manner described. Most of the examples in this book that require a shell use <em>bash</em>, but, unless otherwise noted, the reader can assume these examples work the same way in other Bourne-type shells.</p>
<h3 class="h3" id="ch02lev1sec03"><span epub:type="pagebreak" id="page_26"/><strong>2.3 Users and Groups</strong></h3>
<p class="noindenta">Each user on the system is uniquely identified, and users may belong to groups.</p>
<h5 class="h5" id="ch02lev3sec05"><strong>Users</strong></h5>
<p class="noindentab">Every user of the system has a unique <em>login name</em> (username) and a corresponding numeric <em>user ID</em> (UID). For each user, these are defined by a line in the system <em>password file</em>, <span class="literal">/etc/passwd</span>, which includes the following additional information:</p>
<p class="bull">&#8226; <em>Group ID</em>: the numeric group ID of the first of the groups of which the user is a member.</p>
<p class="bull">&#8226; <em>Home directory</em>: the initial directory into which the user is placed after logging in.</p>
<p class="bull">&#8226; <em>Login shell</em>: the name of the program to be executed to interpret user commands.</p>
<p class="noindentt">The password record may also include the user&#8217;s password, in encrypted form. However, for security reasons, the password is often stored in the separate <em>shadow password file</em>, which is readable only by privileged users.</p>
<h5 class="h5" id="ch02lev3sec06"><strong>Groups</strong></h5>
<p class="noindentab">For administrative purposes&#8212;in particular, for controlling access to files and other system resources&#8212;it is useful to organize users into <em>groups</em>. For example, the people in a team working on a single project, and thus sharing a common set of files, might all be made members of the same group. In early UNIX implementations, a user could be a member of only one group. BSD allowed a user to simultaneously belong to multiple groups, an idea that was taken up by other UNIX implementations and the POSIX.1-1990 standard. Each group is identified by a single line in the system <em>group file</em>, <span class="literal">/etc/group</span>, which includes the following information:</p>
<p class="bull">&#8226; <em>Group name</em>: the (unique) name of the group.</p>
<p class="bull">&#8226; <em>Group ID</em> (GID): the numeric ID associated with this group.</p>
<p class="bull">&#8226; <em>User list</em>: a comma-separated list of login names of users who are members of this group (and who are not otherwise identified as members of the group by virtue of the group ID field of their password file record).</p>
<h5 class="h5" id="ch02lev3sec07"><strong>Superuser</strong></h5>
<p class="noindenta">One user, known as the <em>superuser</em>, has special privileges within the system. The superuser account has user ID 0, and normally has the login name <em>root</em>. On typical UNIX systems, the superuser bypasses all permission checks in the system. Thus, for example, the superuser can access any file in the system, regardless of the permissions on that file, and can send signals to any user process in the system. The system administrator uses the superuser account to perform various administrative tasks on the system.</p>
<h3 class="h3" id="ch02lev1sec04"><span epub:type="pagebreak" id="page_27"/><strong>2.4 Single Directory Hierarchy, Directories, Links, and Files</strong></h3>
<p class="noindenta">The kernel maintains a single hierarchical directory structure to organize all files in the system. (This contrasts with operating systems such as Microsoft Windows, where each disk device has its own directory hierarchy.) At the base of this hierarchy is the <em>root directory</em>, named <span class="literal">/</span> (slash). All files and directories are children or further removed descendants of the root directory. <a href="ch02.xhtml#ch2fig1">Figure 2-1</a> shows an example of this hierarchical file structure.</p>
<div class="image"><img src="../images/f02-01.jpg" alt="image"/></div>
<p class="figcap"><a id="ch2fig1"/><strong>Figure 2-1:</strong> Subset of the Linux single directory hierarchy</p>
<h5 class="h5" id="ch02lev3sec08"><strong>File types</strong></h5>
<p class="noindenta">Within the file system, each file is marked with a <em>type</em>, indicating what kind of file it is. One of these file types denotes ordinary data files, which are usually called <em>regular</em> or <em>plain</em> files to distinguish them from other file types. These other file types include devices, pipes, sockets, directories, and symbolic links.</p>
<p class="indent">The term <em>file</em> is commonly used to denote a file of any type, not just a regular file.</p>
<h5 class="h5" id="ch02lev3sec09"><strong>Directories and links</strong></h5>
<p class="noindenta">A <em>directory</em> is a special file whose contents take the form of a table of filenames coupled with references to the corresponding files. This filename-plus-reference association is called a <em>link</em>, and files may have multiple links, and thus multiple names, in the same or in different directories.</p>
<p class="indent">Directories may contain links both to files and to other directories. The links between directories establish the directory hierarchy shown in <a href="ch02.xhtml#ch2fig1">Figure 2-1</a>.</p>
<p class="indent">Every directory contains at least two entries: <span class="literal">.</span> (dot), which is a link to the directory itself, and <span class="literal">..</span> (dot-dot), which is a link to its <em>parent directory</em>, the directory above it in the hierarchy. Every directory, except the root directory, has a parent. For the root directory, the dot-dot entry is a link to the root directory itself (thus, <span class="literal">/..</span> equates to <span class="literal">/</span>).</p>
<h5 class="h5" id="ch02lev3sec10"><span epub:type="pagebreak" id="page_28"/><strong>Symbolic links</strong></h5>
<p class="noindenta">Like a normal link, a <em>symbolic link</em> provides an alternative name for a file. But whereas a normal link is a filename-plus-pointer entry in a directory list, a symbolic link is a specially marked file containing the name of another file. (In other words, a symbolic link has a filename-plus-pointer entry in a directory, and the file referred to by the pointer contains a string that names another file.) This latter file is often called the <em>target</em> of the symbolic link, and it is common to say that the symbolic link &#8220;points&#8221; or &#8220;refers&#8221; to the target file. When a pathname is specified in a system call, in most circumstances, the kernel automatically <em>dereferences</em> (or synonymously, <em>follows</em>) each symbolic link in the pathname, replacing it with the filename to which it points. This process may happen recursively if the target of a symbolic link is itself a symbolic link. (The kernel imposes limits on the number of dereferences to handle the possibility of circular chains of symbolic links.) If a symbolic link refers to a file that doesn&#8217;t exist, it is said to be a <em>dangling link</em>.</p>
<p class="indent">Often <em>hard link</em> and <em>soft link</em> are used as alternative terms for normal and symbolic links. The reasons for having two different types of links are explained in <a href="ch18.xhtml#ch18">Chapter 18</a>.</p>
<h5 class="h5" id="ch02lev3sec11"><strong>Filenames</strong></h5>
<p class="noindenta">On most Linux file systems, filenames can be up to 255 characters long. Filenames may contain any characters except slashes (<span class="literal">/</span>) and null characters (<span class="literal">\0</span>). However, it is advisable to employ only letters and digits, and the <span class="literal">.</span> (period), <span class="literal">_</span> (underscore), and <span class="literal">-</span> (hyphen) characters. This 65-character set, <span class="literal">[-._a-zA-Z0-9]</span>, is referred to in SUSv3 as the <em>portable filename character set</em>.</p>
<p class="indent">We should avoid the use of characters in filenames that are not in the portable filename character set because those characters may have special meanings within the shell, within regular expressions, or in other contexts. If a filename containing characters with special meanings appears in such contexts, then these characters must be <em>escaped</em>; that is, specially marked&#8212;typically with a preceding backslash (<span class="literal">\</span>)&#8212;to indicate that they should not be interpreted with those special meanings. In contexts where no escape mechanism is available, the filename is not usable.</p>
<p class="indent">We should also avoid filenames beginning with a hyphen (<span class="literal">-</span>), since such filenames may be mistaken for options when specified in a shell command.</p>
<h5 class="h5" id="ch02lev3sec12"><strong>Pathnames</strong></h5>
<p class="noindenta">A <em>pathname</em> is a string consisting of an optional initial slash (<span class="literal">/</span>) followed by a series of filenames separated by slashes. All but the last of these component filenames identifies a directory (or a symbolic link that resolves to a directory). The last component of a pathname may identify any type of file, including a directory. The series of component filenames preceding the final slash is sometimes referred to as the <em>directory</em> part of a pathname, while the name following the final slash is sometimes referred to as the file or <em>base</em> part of the pathname.</p>
<p class="indent">A pathname is read from left to right; each filename resides in the directory specified by the preceding part of the pathname. The string <span class="literal">..</span> can be used anywhere in a pathname to refer to the parent of the location so far specified in the pathname.</p>
<p class="indentb"><span epub:type="pagebreak" id="page_29"/>A pathname describes the location of a file within the single directory hierarchy, and is either absolute or relative:</p>
<p class="bull">&#8226; An <em>absolute pathname</em> begins with a slash (<span class="literal">/</span>) and specifies the location of a file with respect to the root directory. Examples of absolute pathnames for files in <a href="ch02.xhtml#ch2fig1">Figure 2-1</a> are <span class="literal">/home/mtk/.bashrc</span>, <span class="literal">/usr/include</span>, and <span class="literal">/</span> (the pathname of the root directory).</p>
<p class="bull">&#8226; A <em>relative pathname</em> specifies the location of a file relative to a process&#8217;s current working directory (see below), and is distinguished from an absolute pathname by the absence of an initial slash. In <a href="ch02.xhtml#ch2fig1">Figure 2-1</a>, from the directory <span class="literal">usr</span>, the file <span class="literal">types.h</span> could be referenced using the relative pathname <span class="literal">include/sys/types.h</span>, while from the directory <span class="literal">avr</span>, the file <span class="literal">.bashrc</span> could be accessed using the relative pathname <span class="literal">../mtk/.bashrc</span>.</p>
<h5 class="h5" id="ch02lev3sec13"><strong>Current working directory</strong></h5>
<p class="noindenta">Each process has a <em>current working directory</em> (sometimes just referred to as the process&#8217;s <em>working directory</em> or <em>current directory</em>). This is the process&#8217;s &#8220;current location&#8221; within the single directory hierarchy, and it is from this directory that relative pathnames are interpreted for the process.</p>
<p class="indent">A process inherits its current working directory from its parent process. A login shell has its initial current working directory set to the location named in the home directory field of the user&#8217;s password file entry. The shell&#8217;s current working directory can be changed with the <em>cd</em> command.</p>
<h5 class="h5" id="ch02lev3sec14"><strong>File ownership and permissions</strong></h5>
<p class="noindenta">Each file has an associated user ID and group ID that define the owner of the file and the group to which it belongs. The ownership of a file is used to determine the access rights available to users of the file.</p>
<p class="indent">For the purpose of accessing a file, the system divides users into three categories: the <em>owner</em> of the file (sometimes termed the <em>user</em> of the file), users who are members of the group matching the file&#8217;s group ID (<em>group</em>), and the rest of the world (<em>other</em>). Three permission bits may be set for each of these categories of user (making a total of nine permission bits): <em>read</em> permission allows the contents of the file to be read; <em>write</em> permission allows modification of the contents of the file; and <em>execute</em> permission allows execution of the file, which is either a program or a script to be processed by some interpreter (usually, but not always, one of the shells).</p>
<p class="indent">These permissions may also be set on directories, although their meanings are slightly different: <em>read</em> permission allows the contents of (i.e., the filenames in) the directory to be listed; <em>write</em> permission allows the contents of the directory to be changed (i.e., filenames can be added, removed, and changed); and <em>execute</em> (sometimes called <em>search</em>) permission allows access to files within the directory (subject to the permissions on the files themselves).</p>
<h3 class="h3" id="ch02lev1sec05"><strong>2.5 File I/O Model</strong></h3>
<p class="noindenta">One of the distinguishing features of the I/O model on UNIX systems is the concept of <em>universality of I/O</em>. This means that the same system calls (<em>open()</em>, <em>read()</em>, <span epub:type="pagebreak" id="page_30"/><em>write()</em>, <em>close()</em>, and so on) are used to perform I/O on all types of files, including devices. (The kernel translates the application&#8217;s I/O requests into appropriate file-system or device-driver operations that perform I/O on the target file or device.) Thus, a program employing these system calls will work on any type of file.</p>
<p class="indent">The kernel essentially provides one file type: a sequential stream of bytes, which, in the case of disk files, disks, and tape devices, can be randomly accessed using the <em>lseek()</em> system call.</p>
<p class="indent">Many applications and libraries interpret the <em>newline</em> character (ASCII code 10 decimal, sometimes also known as <em>linefeed</em>) as terminating one line of text and commencing another. UNIX systems have no <em>end-of-file</em> character; the end of a file is detected by a read that returns no data.</p>
<h5 class="h5" id="ch02lev3sec15"><strong>File descriptors</strong></h5>
<p class="noindenta">The I/O system calls refer to open files using a <em>file descriptor</em>, a (usually small) nonnegative integer. A file descriptor is typically obtained by a call to <em>open()</em>, which takes a pathname argument specifying a file upon which I/O is to be performed.</p>
<p class="indent">Normally, a process inherits three open file descriptors when it is started by the shell: descriptor 0 is <em>standard input</em>, the file from which the process takes its input; descriptor 1 is <em>standard output</em>, the file to which the process writes its output; and descriptor 2 is <em>standard error</em>, the file to which the process writes error messages and notification of exceptional or abnormal conditions. In an interactive shell or program, these three descriptors are normally connected to the terminal. In the <em>stdio</em> library, these descriptors correspond to the file streams <em>stdin</em>, <em>stdout</em>, and <em>stderr</em>.</p>
<h5 class="h5" id="ch02lev3sec16"><strong>The <em>stdio</em> library</strong></h5>
<p class="noindenta">To perform file I/O, C programs typically employ I/O functions contained in the standard C library. This set of functions, referred to as the <em>stdio</em> library, includes <em>fopen()</em>, <em>fclose()</em>, <em>scanf()</em>, <em>printf()</em>, <em>fgets()</em>, <em>fputs()</em>, and so on. The <em>stdio</em> functions are layered on top of the I/O system calls (<em>open()</em>, <em>close()</em>, <em>read()</em>, <em>write()</em>, and so on).</p>
<div class="block">
<p class="noindent">We assume that the reader is already familiar with the C standard I/O (<em>stdio</em>) functions, and don&#8217;t cover them in this book. Further information on the <em>stdio</em> library can be found in [<a href="bib.xhtml#bib47">Kernighan &#38; Ritchie, 1988</a>], [<a href="bib.xhtml#bib41">Harbison &#38; Steele, 2002</a>], [<a href="bib.xhtml#bib74">Plauger, 1992</a>], and [<a href="bib.xhtml#bib94">Stevens &#38; Rago, 2005</a>].</p>
</div>
<h3 class="h3" id="ch02lev1sec06"><strong>2.6 Programs</strong></h3>
<p class="noindenta"><em>Programs</em> normally exist in two forms. The first form is <em>source code</em>, human-readable text consisting of a series of statements written in a programming language such as C. To be executed, source code must be converted to the second form: binary machine-language instructions that the computer can understand. (This contrasts with a <em>script</em>, which is a text file containing commands to be directly processed by a program such as a shell or other command interpreter.) The two meanings of the term <em>program</em> are normally considered synonymous, since the step of compiling and linking converts source code into semantically equivalent binary machine code.</p>
<h5 class="h5" id="ch02lev3sec17"><span epub:type="pagebreak" id="page_31"/><strong>Filters</strong></h5>
<p class="noindenta">A <em>filter</em> is the name often applied to a program that reads its input from <em>stdin</em>, performs some transformation of that input, and writes the transformed data to <em>stdout</em>. Examples of filters include <em>cat</em>, <em>grep</em>, <em>tr</em>, <em>sort</em>, <em>wc</em>, <em>sed</em>, and <em>awk</em>.</p>
<h5 class="h5" id="ch02lev3sec18"><strong>Command-line arguments</strong></h5>
<p class="noindenta">In C, programs can access the <em>command-line arguments</em>, the words that are supplied on the command line when the program is run. To access the command-line arguments, the <em>main()</em> function of the program is declared as follows:</p>
<p class="programs">int main(int argc, char *argv[])</p>
<p class="noindent">The <em>argc</em> variable contains the total number of command-line arguments, and the individual arguments are available as strings pointed to by members of the array <em>argv</em>. The first of these strings, <em>argv[0]</em>, identifies the name of the program itself.</p>
<h3 class="h3" id="ch02lev1sec07"><strong>2.7 Processes</strong></h3>
<p class="noindenta">Put most simply, a <em>process</em> is an instance of an executing program. When a program is executed, the kernel loads the code of the program into virtual memory, allocates space for program variables, and sets up kernel bookkeeping data structures to record various information (such as process ID, termination status, user IDs, and group IDs) about the process.</p>
<p class="indent">From a kernel point of view, processes are the entities among which the kernel must share the various resources of the computer. For resources that are limited, such as memory, the kernel initially allocates some amount of the resource to the process, and adjusts this allocation over the lifetime of the process in response to the demands of the process and the overall system demand for that resource. When the process terminates, all such resources are released for reuse by other processes. Other resources, such as the CPU and network bandwidth, are renewable, but must be shared equitably among all processes.</p>
<h5 class="h5" id="ch02lev3sec19"><strong>Process memory layout</strong></h5>
<p class="noindentab">A process is logically divided into the following parts, known as <em>segments</em>:</p>
<p class="bull">&#8226; <em>Text</em>: the instructions of the program.</p>
<p class="bull">&#8226; <em>Data</em>: the static variables used by the program.</p>
<p class="bull">&#8226; <em>Heap</em>: an area from which programs can dynamically allocate extra memory.</p>
<p class="bull">&#8226; <em>Stack</em>: a piece of memory that grows and shrinks as functions are called and return and that is used to allocate storage for local variables and function call linkage information.</p>
<h5 class="h5" id="ch02lev3sec20"><strong>Process creation and program execution</strong></h5>
<p class="noindenta">A process can create a new process using the <em>fork()</em> system call. The process that calls <em>fork()</em> is referred to as the <em>parent process</em>, and the new process is referred to as the <em>child process</em>. The kernel creates the child process by making a duplicate of the <span epub:type="pagebreak" id="page_32"/>parent process. The child inherits copies of the parent&#8217;s data, stack, and heap segments, which it may then modify independently of the parent&#8217;s copies. (The program text, which is placed in memory marked as read-only, is shared by the two processes.)</p>
<p class="indent">The child process goes on either to execute a different set of functions in the same code as the parent, or, frequently, to use the <em>execve()</em> system call to load and execute an entirely new program. An <em>execve()</em> call destroys the existing text, data, stack, and heap segments, replacing them with new segments based on the code of the new program.</p>
<p class="indent">Several related C library functions are layered on top of <em>execve()</em>, each providing a slightly different interface to the same functionality. All of these functions have names starting with the string <em>exec</em>, and where the differences don&#8217;t matter, we&#8217;ll use the notation <em>exec()</em> to refer generally to these functions. Be aware, however, that there is no actual function with the name <em>exec()</em>.</p>
<p class="indent">Commonly, we&#8217;ll use the verb <em>to exec</em> to describe the operation performed by <em>execve()</em> and the library functions layered on top of it.</p>
<h5 class="h5" id="ch02lev3sec21"><strong>Process ID and parent process ID</strong></h5>
<p class="noindenta">Each process has a unique integer <em>process identifier</em> (PID). Each process also has a <em>parent process identifier</em> (PPID) attribute, which identifies the process that requested the kernel to create this process.</p>
<h5 class="h5" id="ch02lev3sec22"><strong>Process termination and termination status</strong></h5>
<p class="noindenta">A process can terminate in one of two ways: by requesting its own termination using the <em>_exit()</em> system call (or the related <em>exit()</em> library function), or by being killed by the delivery of a signal. In either case, the process yields a <em>termination status</em>, a small nonnegative integer value that is available for inspection by the parent process using the <em>wait()</em> system call. In the case of a call to <em>_exit()</em>, the process explicitly specifies its own termination status. If a process is killed by a signal, the termination status is set according to the type of signal that caused the death of the process. (Sometimes, we&#8217;ll refer to the argument passed to <em>_exit()</em> as the <em>exit status</em> of the process, as distinct from the termination status, which is either the value passed to <em>_exit()</em> or an indication of the signal that killed the process.)</p>
<p class="indent">By convention, a termination status of 0 indicates that the process succeeded, and a nonzero status indicates that some error occurred. Most shells make the termination status of the last executed program available via a shell variable named <em>$?</em>.</p>
<h5 class="h5" id="ch02lev3sec23"><strong>Process user and group identifiers (credentials)</strong></h5>
<p class="noindentab">Each process has a number of associated user IDs (UIDs) and group IDs (GIDs). These include:</p>
<p class="bull">&#8226; <em>Real user ID</em> and <em>real group ID</em>: These identify the user and group to which the process belongs. A new process inherits these IDs from its parent. A login shell gets its real user ID and real group ID from the corresponding fields in the system password file.</p>
<p class="bull"><span epub:type="pagebreak" id="page_33"/>&#8226; <em>Effective user ID</em> and <em>effective group ID</em>: These two IDs (in conjunction with the supplementary group IDs discussed in a moment) are used in determining the permissions that the process has when accessing protected resources such as files and interprocess communication objects. Typically, the process&#8217;s effective IDs have the same values as the corresponding real IDs. Changing the effective IDs is a mechanism that allows a process to assume the privileges of another user or group, as described in a moment.</p>
<p class="bull">&#8226; <em>Supplementary group IDs</em>: These IDs identify additional groups to which a process belongs. A new process inherits its supplementary group IDs from its parent. A login shell gets its supplementary group IDs from the system group file.</p>
<h5 class="h5" id="ch02lev3sec24"><strong>Privileged processes</strong></h5>
<p class="noindenta">Traditionally, on UNIX systems, a <em>privileged process</em> is one whose <em>effective</em> user ID is 0 (superuser). Such a process bypasses the permission restrictions normally applied by the kernel. By contrast, the term <em>unprivileged</em> (or <em>nonprivileged</em>) is applied to processes run by other users. Such processes have a nonzero effective user ID and must abide by the permission rules enforced by the kernel.</p>
<p class="indent">A process may be privileged because it was created by another privileged process&#8212;for example, by a login shell started by <em>root</em> (superuser). Another way a process may become privileged is via the set-user-ID mechanism, which allows a process to assume an effective user ID that is the same as the user ID of the program file that it is executing.</p>
<h5 class="h5" id="ch02lev3sec25"><strong>Capabilities</strong></h5>
<p class="noindenta">Since kernel 2.2, Linux divides the privileges traditionally accorded to the superuser into a set of distinct units called <em>capabilities</em>. Each privileged operation is associated with a particular capability, and a process can perform an operation only if it has the corresponding capability. A traditional superuser process (effective user ID of 0) corresponds to a process with all capabilities enabled.</p>
<p class="indent">Granting a subset of capabilities to a process allows it to perform some of the operations normally permitted to the superuser, while preventing it from performing others.</p>
<p class="indent">Capabilities are described in detail in <a href="ch39.xhtml#ch39">Chapter 39</a>. In the remainder of the book, when noting that a particular operation can be performed only by a privileged process, we&#8217;ll usually identify the specific capability in parentheses. Capability names begin with the prefix <span class="literal">CAP_</span>, as in <span class="literal">CAP_KILL</span>.</p>
<h5 class="h5" id="ch02lev3sec26"><strong>The <em>init</em> process</strong></h5>
<p class="noindenta">When booting the system, the kernel creates a special process called <em>init</em>, the &#8220;parent of all processes,&#8221; which is derived from the program file <span class="literal">/sbin/init</span>. All processes on the system are created (using <em>fork()</em>) either by <em>init</em> or by one of its descendants. The <em>init</em> process always has the process ID 1 and runs with superuser privileges. The <em>init</em> process can&#8217;t be killed (not even by the superuser), and it terminates only when the system is shut down. The main task of <em>init</em> is to create and monitor a range of processes required by a running system. (For details, see the <em>init(8)</em> manual page.)</p>
<h5 class="h5" id="ch02lev3sec27"><span epub:type="pagebreak" id="page_34"/><strong>Daemon processes</strong></h5>
<p class="noindentab">A <em>daemon</em> is a special-purpose process that is created and handled by the system in the same way as other processes, but which is distinguished by the following characteristics:</p>
<p class="bull">&#8226; It is long-lived. A daemon process is often started at system boot and remains in existence until the system is shut down.</p>
<p class="bull">&#8226; It runs in the background, and has no controlling terminal from which it can read input or to which it can write output.</p>
<p class="noindentt">Examples of daemon processes include <em>syslogd</em>, which records messages in the system log, and <em>httpd</em>, which serves web pages via the Hypertext Transfer Protocol (HTTP).</p>
<h5 class="h5" id="ch02lev3sec28"><strong>Environment list</strong></h5>
<p class="noindenta">Each process has an <em>environment list</em>, which is a set of <em>environment variables</em> that are maintained within the user-space memory of the process. Each element of this list consists of a name and an associated value. When a new process is created via <em>fork()</em>, it inherits a copy of its parent&#8217;s environment. Thus, the environment provides a mechanism for a parent process to communicate information to a child process. When a process replaces the program that it is running using <em>exec()</em>, the new program either inherits the environment used by the old program or receives a new environment specified as part of the <em>exec()</em> call.</p>
<p class="indent">Environment variables are created with the <em>export</em> command in most shells (or the <em>setenv</em> command in the C shell), as in the following example:</p>
<p class="programs">$ <span class="codestrong">export MYVAR='Hello world'</span></p>
<div class="block">
<p class="noindent">Whenever we present a shell session log showing interactive input and output, the input text is always boldfaced. Sometimes, we include commentary in the log in italic text, adding notes about the commands entered or the output produced.</p>
</div>
<p class="noindent">C programs can access the environment using an external variable (<em>char **environ</em>), and various library functions allow a process to retrieve and modify values in its environment.</p>
<p class="indent">Environment variables are used for a variety of purposes. For example, the shell defines and uses a range of variables that can be accessed by scripts and programs executed from the shell. These include the variable <span class="literal">HOME</span>, which specifies the pathname of the user&#8217;s login directory, and the variable <span class="literal">PATH</span>, which specifies a list of directories that the shell should search when looking for programs corresponding to commands entered by the user.</p>
<h5 class="h5" id="ch02lev3sec29"><strong>Resource limits</strong></h5>
<p class="noindenta">Each process consumes resources, such as open files, memory, and CPU time. Using the <em>setrlimit()</em> system call, a process can establish upper limits on its consumption of various resources. Each such <em>resource limit</em> has two associated values: a <em>soft limit</em>, which limits the amount of the resource that the process may consume; and a <span epub:type="pagebreak" id="page_35"/><em>hard limit</em>, which is a ceiling on the value to which the soft limit may be adjusted. An unprivileged process may change its soft limit for a particular resource to any value in the range from zero up to the corresponding hard limit, but can only lower its hard limit.</p>
<p class="indent">When a new process is created with <em>fork()</em>, it inherits copies of its parent&#8217;s resource limit settings.</p>
<p class="indent">The resource limits of the shell can be adjusted using the <em>ulimit</em> command (<em>limit</em> in the C shell). These limit settings are inherited by the child processes that the shell creates to execute commands.</p>
<h3 class="h3" id="ch02lev1sec08"><strong>2.8 Memory Mappings</strong></h3>
<p class="noindenta">The <em>mmap()</em> system call creates a new <em>memory mapping</em> in the calling process&#8217;s virtual address space.</p>
<p class="indentb">Mappings fall into two categories:</p>
<p class="bull">&#8226; A <em>file mapping</em> maps a region of a file into the calling process&#8217;s virtual memory. Once mapped, the file&#8217;s contents can be accessed by operations on the bytes in the corresponding memory region. The pages of the mapping are automatically loaded from the file as required.</p>
<p class="bull">&#8226; By contrast, an <em>anonymous mapping</em> doesn&#8217;t have a corresponding file. Instead, the pages of the mapping are initialized to 0.</p>
<p class="noindentt">The memory in one process&#8217;s mapping may be shared with mappings in other processes. This can occur either because two processes map the same region of a file or because a child process created by <em>fork()</em> inherits a mapping from its parent.</p>
<p class="indent">When two or more processes share the same pages, each process may see the changes made by other processes to the contents of the pages, depending on whether the mapping is created as private or shared. When a mapping is <em>private</em>, modifications to the contents of the mapping are not visible to other processes and are not carried through to the underlying file. When a mapping is <em>shared</em>, modifications to the contents of the mapping are visible to other processes sharing the same mapping and are carried through to the underlying file.</p>
<p class="indent">Memory mappings serve a variety of purposes, including initialization of a process&#8217;s text segment from the corresponding segment of an executable file, allocation of new (zero-filled) memory, file I/O (memory-mapped I/O), and interprocess communication (via a shared mapping).</p>
<h3 class="h3" id="ch02lev1sec09"><strong>2.9 Static and Shared Libraries</strong></h3>
<p class="noindenta">An <em>object library</em> is a file containing the compiled object code for a (usually logically related) set of functions that may be called from application programs. Placing code for a set of functions in a single object library eases the tasks of program creation and maintenance. Modern UNIX systems provide two types of object libraries: <em>static libraries</em> and <em>shared libraries</em>.</p>
<h5 class="h5" id="ch02lev3sec30"><span epub:type="pagebreak" id="page_36"/><strong>Static libraries</strong></h5>
<p class="noindenta">Static libraries (sometimes also known as <em>archives</em>) were the only type of library on early UNIX systems. A static library is essentially a structured bundle of compiled object modules. To use functions from a static library, we specify that library in the link command used to build a program. After resolving the various function references from the main program to the modules in the static library, the linker extracts copies of the required object modules from the library and copies these into the resulting executable file. We say that such a program is <em>statically linked</em>.</p>
<p class="indent">The fact that each statically linked program includes its own copy of the object modules required from the library creates a number of disadvantages. One is that the duplication of object code in different executable files wastes disk space. A corresponding waste of memory occurs when statically linked programs using the same library function are executed at the same time; each program requires its own copy of the function to reside in memory. Additionally, if a library function requires modification, then, after recompiling that function and adding it to the static library, all applications that need to use the updated function must be relinked against the library.</p>
<h5 class="h5" id="ch02lev3sec31"><strong>Shared libraries</strong></h5>
<p class="noindenta">Shared libraries were designed to address the problems with static libraries.</p>
<p class="indent">If a program is linked against a shared library, then, instead of copying object modules from the library into the executable, the linker just writes a record into the executable to indicate that at run time the executable needs to use that shared library. When the executable is loaded into memory at run time, a program called the <em>dynamic linker</em> ensures that the shared libraries required by the executable are found and loaded into memory, and performs run-time linking to resolve the function calls in the executable to the corresponding definitions in the shared libraries. At run time, only a single copy of the code of the shared library needs to be resident in memory; all running programs can use that copy.</p>
<p class="indent">The fact that a shared library contains the sole compiled version of a function saves disk space. It also greatly eases the job of ensuring that programs employ the newest version of a function. Simply rebuilding the shared library with the new function definition causes existing programs to automatically use the new definition when they are next executed.</p>
<h3 class="h3" id="ch02lev1sec10"><strong>2.10 Interprocess Communication and Synchronization</strong></h3>
<p class="noindenta">A running Linux system consists of numerous processes, many of which operate independently of each other. Some processes, however, cooperate to achieve their intended purposes, and these processes need methods of communicating with one another and synchronizing their actions.</p>
<p class="indentb">One way for processes to communicate is by reading and writing information in disk files. However, for many applications, this is too slow and inflexible. <span epub:type="pagebreak" id="page_37"/>Therefore, Linux, like all modern UNIX implementations, provides a rich set of mechanisms for <em>interprocess communication</em> (IPC), including the following:</p>
<p class="bull">&#8226; <em>signals</em>, which are used to indicate that an event has occurred;</p>
<p class="bull">&#8226; <em>pipes</em> (familiar to shell users as the <span class="literal">|</span> operator) and <em>FIFOs</em>, which can be used to transfer data between processes;</p>
<p class="bull">&#8226; <em>sockets</em>, which can be used to transfer data from one process to another, either on the same host computer or on different hosts connected by a network;</p>
<p class="bull">&#8226; <em>file locking</em>, which allows a process to lock regions of a file in order to prevent other processes from reading or updating the file contents;</p>
<p class="bull">&#8226; <em>message queues</em>, which are used to exchange messages (packets of data) between processes;</p>
<p class="bull">&#8226; <em>semaphores</em>, which are used to synchronize the actions of processes; and</p>
<p class="bull">&#8226; <em>shared memory</em>, which allows two or more processes to share a piece of memory. When one process changes the contents of the shared memory, all of the other processes can immediately see the changes.</p>
<p class="noindentt">The wide variety of IPC mechanisms on UNIX systems, with sometimes overlapping functionality, is in part due to their evolution under different variants of the UNIX system and the requirements of various standards. For example, FIFOs and UNIX domain sockets essentially perform the same function of allowing unrelated processes on the same system to exchange data. Both exist in modern UNIX systems because FIFOs came from System V, while sockets came from BSD.</p>
<h3 class="h3" id="ch02lev1sec11"><strong>2.11 Signals</strong></h3>
<p class="noindenta">Although we listed them as a method of IPC in the previous section, signals are more usually employed in a wide range of other contexts, and so deserve a longer discussion.</p>
<p class="indent">Signals are often described as &#8220;software interrupts.&#8221; The arrival of a signal informs a process that some event or exceptional condition has occurred. There are various types of signals, each of which identifies a different event or condition. Each signal type is identified by a different integer, defined with symbolic names of the form <span class="literal">SIGxxxx</span>.</p>
<p class="indentb">Signals are sent to a process by the kernel, by another process (with suitable permissions), or by the process itself. For example, the kernel may send a signal to a process when one of the following occurs:</p>
<p class="bull">&#8226; the user typed the <em>interrupt</em> character (usually <em>Control-C</em>) on the keyboard;</p>
<p class="bull">&#8226; one of the process&#8217;s children has terminated;</p>
<p class="bull">&#8226; a timer (alarm clock) set by the process has expired; or</p>
<p class="bull">&#8226; the process attempted to access an invalid memory address.</p>
<p class="noindentt">Within the shell, the <em>kill</em> command can be used to send a signal to a process. The <em>kill()</em> system call provides the same facility within programs.</p>
<p class="indentb"><span epub:type="pagebreak" id="page_38"/>When a process receives a signal, it takes one of the following actions, depending on the signal:</p>
<p class="bull">&#8226; it ignores the signal;</p>
<p class="bull">&#8226; it is killed by the signal; or</p>
<p class="bull">&#8226; it is suspended until later being resumed by receipt of a special-purpose signal.</p>
<p class="noindentt">For most signal types, instead of accepting the default signal action, a program can choose to ignore the signal (useful if the default action for the signal is something other than being ignored), or to establish a <em>signal handler</em>. A signal handler is a programmer-defined function that is automatically invoked when the signal is delivered to the process. This function performs some action appropriate to the condition that generated the signal.</p>
<p class="indent">In the interval between the time it is generated and the time it is delivered, a signal is said to be <em>pending</em> for a process. Normally, a pending signal is delivered as soon as the receiving process is next scheduled to run, or immediately if the process is already running. However, it is also possible to <em>block</em> a signal by adding it to the process&#8217;s <em>signal mask</em>. If a signal is generated while it is blocked, it remains pending until it is later unblocked (i.e., removed from the signal mask).</p>
<h3 class="h3" id="ch02lev1sec12"><strong>2.12 Threads</strong></h3>
<p class="noindenta">In modern UNIX implementations, each process can have multiple <em>threads</em> of execution. One way of envisaging threads is as a set of processes that share the same virtual memory, as well as a range of other attributes. Each thread is executing the same program code and shares the same data area and heap. However, each thread has its own stack containing local variables and function call linkage information.</p>
<p class="indent">Threads can communicate with each other via the global variables that they share. The threading API provides <em>condition variables</em> and <em>mutexes</em>, which are primitives that enable the threads of a process to communicate and synchronize their actions, in particular, their use of shared variables. Threads can also communicate with one another using the IPC and synchronization mechanisms described in <a href="ch02.xhtml#ch02lev1sec10">Section 2.10</a>.</p>
<p class="indent">The primary advantages of using threads are that they make it easy to share data (via global variables) between cooperating threads and that some algorithms transpose more naturally to a multithreaded implementation than to a multiprocess implementation. Furthermore, a multithreaded application can transparently take advantage of the possibilities for parallel processing on multiprocessor hardware.</p>
<h3 class="h3" id="ch02lev1sec13"><strong>2.13 Process Groups and Shell Job Control</strong></h3>
<p class="noindenta">Each program executed by the shell is started in a new process. For example, the shell creates three processes to execute the following pipeline of commands (which displays a list of files in the current working directory sorted by file size):</p>
<p class="programs">$ <span class="codestrong">ls -l | sort -k5n | less</span></p>
<p class="noindent"><span epub:type="pagebreak" id="page_39"/>All major shells, except the Bourne shell, provide an interactive feature called <em>job control</em>, which allows the user to simultaneously execute and manipulate multiple commands or pipelines. In job-control shells, all of the processes in a pipeline are placed in a new <em>process group</em> or <em>job</em>. (In the simple case of a shell command line containing a single command, a new process group containing just a single process is created.) Each process in a process group has the same integer <em>process group identifier</em>, which is the same as the process ID of one of the processes in the group, termed the <em>process group leader</em>.</p>
<p class="indent">The kernel allows for various actions, notably the delivery of signals, to be performed on all members of a process group. Job-control shells use this feature to allow the user to suspend or resume all of the processes in a pipeline, as described in the next section.</p>
<h3 class="h3" id="ch02lev1sec14"><strong>2.14 Sessions, Controlling Terminals, and Controlling Processes</strong></h3>
<p class="noindenta">A <em>session</em> is a collection of process groups (jobs). All of the processes in a session have the same <em>session identifier</em>. A <em>session leader</em> is the process that created the session, and its process ID becomes the session ID.</p>
<p class="indent">Sessions are used mainly by job-control shells. All of the process groups created by a job-control shell belong to the same session as the shell, which is the session leader.</p>
<p class="indent">Sessions usually have an associated <em>controlling terminal</em>. The controlling terminal is established when the session leader process first opens a terminal device. For a session created by an interactive shell, this is the terminal at which the user logged in. A terminal may be the controlling terminal of at most one session.</p>
<p class="indent">As a consequence of opening the controlling terminal, the session leader becomes the <em>controlling process</em> for the terminal. The controlling process receives a <span class="literal">SIGHUP</span> signal if a terminal disconnect occurs (e.g., if the terminal window is closed).</p>
<p class="indent">At any point in time, one process group in a session is the <em>foreground process group</em> (<em>foreground job</em>), which may read input from the terminal and send output to it. If the user types the <em>interrupt</em> character (usually <em>Control-C</em>) or the <em>suspend</em> character (usually <em>Control-Z</em>) on the controlling terminal, then the terminal driver sends a signal that kills or suspends (i.e., stops) the foreground process group. A session can have any number of <em>background process groups</em> (<em>background jobs</em>), which are created by terminating a command with the ampersand (<span class="literal">&#38;</span>) character.</p>
<p class="indent">Job-control shells provide commands for listing all jobs, sending signals to jobs, and moving jobs between the foreground and background.</p>
<h3 class="h3" id="ch02lev1sec15"><strong>2.15 Pseudoterminals</strong></h3>
<p class="noindenta">A <em>pseudoterminal</em> is a pair of connected virtual devices, known as the <em>master</em> and <em>slave</em>. This device pair provides an IPC channel allowing data to be transferred in both directions between the two devices.</p>
<p class="indent">The key point about a pseudoterminal is that the slave device provides an interface that behaves like a terminal, which makes it possible to connect a terminal-oriented program to the slave device and then use another program connected to the master device to drive the terminal-oriented program. Output written by the driver <span epub:type="pagebreak" id="page_40"/>program undergoes the usual input processing performed by the terminal driver (for example, in the default mode, a carriage return is mapped to a newline) and is then passed as input to the terminal-oriented program connected to the slave. Anything that the terminal-oriented program writes to the slave is passed (after performing all of the usual terminal output processing) as input to the driver program. In other words, the driver program is performing the function normally performed by the user at a conventional terminal.</p>
<p class="indent">Pseudoterminals are used in a variety of applications, most notably in the implementation of terminal windows provided under an X Window System login and in applications providing network login services, such as <em>telnet</em> and <em>ssh</em>.</p>
<h3 class="h3" id="ch02lev1sec16"><strong>2.16 Date and Time</strong></h3>
<p class="noindentab">Two types of time are of interest to a process:</p>
<p class="bull">&#8226; <em>Real time</em> is measured either from some standard point (<em>calendar</em> time) or from some fixed point, typically the start, in the life of a process (<em>elapsed</em> or <em>wall clock</em> time). On UNIX systems, calendar time is measured in seconds since midnight on the morning of January 1, 1970, Universal Coordinated Time (usually abbreviated UTC), and coordinated on the base point for timezones defined by the longitudinal line passing through Greenwich, England. This date, which is close to the birth of the UNIX system, is referred to as the <em>Epoch</em>.</p>
<p class="bull">&#8226; <em>Process time</em>, also called <em>CPU time</em>, is the total amount of CPU time that a process has used since starting. CPU time is further divided into <em>system CPU time</em>, the time spent executing code in <em>kernel mode</em> (i.e., executing system calls and performing other kernel services on behalf of the process), and <em>user CPU time</em>, the time spent executing code in <em>user mode</em> (i.e., executing normal program code).</p>
<p class="noindentt">The <em>time</em> command displays the real time, the system CPU time, and user CPU time taken to execute the processes in a pipeline.</p>
<h3 class="h3" id="ch02lev1sec17"><strong>2.17 Client-Server Architecture</strong></h3>
<p class="noindenta">At various points in this book, we discuss the design and implementation of client-server applications.</p>
<p class="indentb">A <em>client-server application</em> is one that is broken into two component processes:</p>
<p class="bull">&#8226; a <em>client</em>, which asks the server to carry out some <em>service</em> by sending it a request message; and</p>
<p class="bull">&#8226; a <em>server</em>, which examines the client&#8217;s request, performs appropriate actions, and then sends a response message back to the client.</p>
<p class="noindentt">Sometimes, the client and server may engage in an extended dialogue of requests and responses.</p>
<p class="indent">Typically, the client application interacts with a user, while the server application provides access to some shared resource. Commonly, there are multiple instances of client processes communicating with one or a few instances of the server process.</p>
<p class="indent"><span epub:type="pagebreak" id="page_41"/>The client and server may reside on the same host computer or on separate hosts connected via a network. To communicate with one another, the client and server use the IPC mechanisms discussed in <a href="ch02.xhtml#ch02lev1sec10">Section 2.10</a>.</p>
<p class="indentb">Servers may implement a variety of services, such as:</p>
<p class="bull">&#8226; providing access to a database or other shared information resource;</p>
<p class="bull">&#8226; providing access to a remote file across a network;</p>
<p class="bull">&#8226; encapsulating some business logic;</p>
<p class="bull">&#8226; providing access to a shared hardware resource (e.g., a printer); or</p>
<p class="bull">&#8226; serving web pages.</p>
<p class="noindenttb">Encapsulating a service within a single server is useful for a number of reasons, such as the following:</p>
<p class="bull">&#8226; <em>Efficiency</em>: It may be cheaper to provide one instance of a resource (e.g., a printer) that is managed by a server than to provide the same resource locally on every computer.</p>
<p class="bull">&#8226; <em>Control, coordination, and security</em>: By holding a resource (especially an information resource) at a single location, the server can coordinate access to the resource (e.g., so that two clients don&#8217;t simultaneously update the same piece of information) or secure it so that it is made available to only selected clients.</p>
<p class="bull">&#8226; <em>Operation in a heterogeneous environment</em>: In a network, the various clients, and the server, can be running on different hardware and operating system platforms.</p>
<h3 class="h3" id="ch02lev1sec18"><strong>2.18 Realtime</strong></h3>
<p class="noindenta"><em>Realtime applications</em> are those that need to respond in a timely fashion to input. Frequently, such input comes from an external sensor or a specialized input device, and output takes the form of controlling some external hardware. Examples of applications with realtime response requirements include automated assembly lines, bank ATMs, and aircraft navigation systems.</p>
<p class="indent">Although many realtime applications require rapid responses to input, the defining factor is that the response is guaranteed to be delivered within a certain deadline time after the triggering event.</p>
<p class="indent">The provision of realtime responsiveness, especially where short response times are demanded, requires support from the underlying operating system. Most operating systems don&#8217;t natively provide such support because the requirements of realtime responsiveness can conflict with the requirements of multiuser timesharing operating systems. Traditional UNIX implementations are not realtime operating systems, although realtime variants have been devised. Realtime variants of Linux have also been created, and recent Linux kernels are moving toward full native support for realtime applications.</p>
<p class="indent">POSIX.1b defined a number of extensions to POSIX.1 for the support of real-time applications. These include asynchronous I/O, shared memory, memory-mapped files, memory locking, realtime clocks and timers, alternative scheduling policies, realtime signals, message queues, and semaphores. Even though they <span epub:type="pagebreak" id="page_42"/>don&#8217;t strictly qualify as realtime, most UNIX implementations now support some or all of these extensions. (During the course of this book, we describe those features of POSIX.1b that are supported by Linux.)</p>
<div class="block">
<p class="noindent">In this book, we use the term <em>real time</em> to refer to the concept of calendar or elapsed time, and the term <em>realtime</em> to denote an operating system or application providing the type of responsiveness described in this section.</p>
</div>
<h3 class="h3" id="ch02lev1sec19"><strong>2.19 The</strong> <span class="literal">/<span class="codestrong">proc</span></span> <strong>File System</strong></h3>
<p class="noindenta">Like several other UNIX implementations, Linux provides a <span class="literal">/proc</span> file system, which consists of a set of directories and files mounted under the <span class="literal">/proc</span> directory.</p>
<p class="indent">The <span class="literal">/proc</span> file system is a virtual file system that provides an interface to kernel data structures in a form that looks like files and directories on a file system. This provides an easy mechanism for viewing and changing various system attributes. In addition, a set of directories with names of the form <span class="literal">/proc/</span><em>PID</em>, where <em>PID</em> is a process ID, allows us to view information about each process running on the system.</p>
<p class="indent">The contents of <span class="literal">/proc</span> files are generally in human-readable text form and can be parsed by shell scripts. A program can simply open and read from, or write to, the desired file. In most cases, a process must be privileged to modify the contents of files in the <span class="literal">/proc</span> directory.</p>
<p class="indent">As we describe various parts of the Linux programming interface, we&#8217;ll also describe the relevant <span class="literal">/proc</span> files. <a href="ch12.xhtml#ch12lev1sec01">Section 12.1</a> provides further general information on this file system. The <span class="literal">/proc</span> file system is not specified by any standards, and the details that we describe are Linux-specific.</p>
<h3 class="h3" id="ch02lev1sec20"><strong>2.20 Summary</strong></h3>
<p class="noindenta">In this chapter, we surveyed a range of fundamental concepts related to Linux system programming. An understanding of these concepts should provide readers with limited experience on Linux or UNIX with enough background to begin learning system programming.</p>
</body>
</html>
