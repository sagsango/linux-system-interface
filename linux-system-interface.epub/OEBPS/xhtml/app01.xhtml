<?xml version="1.0" encoding="UTF-8"?>
<html xml:lang="en-us" lang="en-us" xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ns="http://www.w3.org/2001/10/synthesis">
<head>
<title>The Linux Programming Interface</title>
<link rel="stylesheet" type="text/css" href="../styles/9781593272203.css"/>
</head>
<body>
<h2 class="h2" id="app01"><span epub:type="pagebreak" id="page_1401"/><strong><span class="big">A</span></strong><br/><strong>TRACING SYSTEM CALLS</strong></h2>
<p class="noindenta">The <em>strace</em> command allows us to trace the system calls made by a program. This is useful for debugging, or simply to find out what a program is doing. In its simplest form, we use <em>strace</em> as follows:</p>
<p class="programs">$ <span class="codestrong">strace <span class="codeitalic">command arg...</span></span></p>
<p class="noindent">This runs <em>command</em>, with the given command-line arguments, producing a trace of the system calls it makes. By default, <em>strace</em> writes its output to <em>stderr</em>, but we can change this using the <em>&#8211;o filename</em> option.</p>
<p class="indent">Examples of the type of output produced by <em>strace</em> include the following (taken from the output of the command <em>strace date</em>):</p>
<p class="programs">execve("/bin/date", ["date"], [/* 114 vars */]) = 0<br/>access("/etc/ld.so.preload", R_OK)&#160;&#160;&#160;&#160;&#160;&#160;= -1 ENOENT (No such file or directory)<br/>open("/etc/ld.so.cache", O_RDONLY)&#160;&#160;&#160;&#160;&#160;&#160;= 3<br/>fstat64(3, {st_mode=S_IFREG|0644, st_size=111059, ...}) = 0<br/>mmap2(NULL, 111059, PROT_READ, MAP_PRIVATE, 3, 0) = 0xb7f38000<br/>close(3)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;= 0<br/>open("/lib/libc.so.6", O_RDONLY)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;= 3<br/>fstat64(3, {st_mode=S_IFREG|0755, st_size=1491141, ...}) = 0<br/>close(3)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;= 0<br/>write(1, "Mon Jan 17 12:14:24 CET 2011\n", 29) = 29<br/>exit_group(0)&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;= ?</p>
<p class="noindentb"><span epub:type="pagebreak" id="page_1402"/>Each system call is displayed in the form of a function call, with both input and output arguments shown in parentheses. As can be seen from the above examples, arguments are printed in symbolic form:</p>
<p class="bull">&#8226; Bit masks are represented using the corresponding symbolic constants.</p>
<p class="bull">&#8226; Strings are printed in text form (up to a limit of 32 characters, but the <em>&#8211;s strsize</em> option can be used to change this limit).</p>
<p class="bull">&#8226; Structure fields are individually displayed (by default, only an abbreviated subset of large structures is displayed, but the <em>&#8211;v</em> option can be used to display the whole structure).</p>
<p class="noindentt">After the closing parenthesis of the traced call, <em>strace</em> prints an equal sign (<span class="literal">=</span>), followed by the return value of the system call. If the system call failed, the symbolic <em>errno</em> value is also displayed. Thus, we see <span class="literal">ENOENT</span> displayed for the failure of the <em>access()</em> call above.</p>
<p class="indent">Even for a simple program, the output produced by <em>strace</em> is made voluminous by the system calls executed by the C run-time startup code and the loading of shared libraries. For a complex program, the <em>strace</em> output can be extremely long. For these reasons, it is sometimes useful to selectively filter the output of <em>strace</em>. One way to do this is to use <em>grep</em>, like so:</p>
<p class="programs">$ <span class="codestrong">strace date 2&gt;&#38;1 | grep open</span></p>
<p class="noindent">Another method is to use the <em>&#8211;e</em> option to select the events to be traced. For example, we can use the following command to trace <em>open()</em> and <em>close()</em> system calls:</p>
<p class="programs">$ <span class="codestrong">strace -e trace=open,close date</span></p>
<p class="noindent">When using either of the above techniques, we need to be aware that, in a few cases, the true name of a system call differs from the name of its <em>glibc</em> wrapper. For example, though we refer to all of the <em>wait()</em>-type functions as system calls in <a href="ch26.xhtml#ch26">Chapter 26</a>, most of them (<em>wait()</em>, <em>waitpid()</em>, and <em>wait3()</em>) are wrappers that invoke the kernel&#8217;s <em>wait4()</em> system call service routine. This latter name is displayed by <em>strace</em>, and we must specify that name in the <em>&#8211;e trace=</em> option. Similarly, all of the <em>exec</em> library functions (<a href="ch27.xhtml#ch27lev1sec02">Section 27.2</a>) invoke the <em>execve()</em> system call. Often, we can make a good guess about such transformations by looking at the <em>strace</em> output (or looking at the output produced by <em>strace &#8211;c</em>, described below), but, failing that, we may need to check the <em>glibc</em> source code to see what transformations may be occurring inside wrapper functions.</p>
<p class="indentb">The <em>strace(1)</em> manual page documents a host of further options to <em>strace</em>, including the following:</p>
<p class="bull">&#8226; The <em>&#8211;p pid</em> option is used to trace an existing process, by specifying its process ID. Unprivileged users are restricted to tracing only processes that they own and that are not executing set-user-ID or set-group-ID programs (<a href="ch09.xhtml#ch09lev1sec03">Section 9.3</a>).</p>
<p class="bull">&#8226; The <em>&#8211;c</em> option causes <em>strace</em> to print a summary of all system calls made by the program. For each system call, the summary information includes the total number of calls, the number of calls that failed, and the total time spent executing the calls.</p>
<p class="bull"><span epub:type="pagebreak" id="page_1403"/>&#8226; The <em>&#8211;f</em> option causes children of this process also to be traced. If we are sending trace output to a file (<em>&#8211;o filename</em>), then the alternative <em>&#8211;ff</em> option causes each process to write its trace output to a file named <em>filename.PID</em>.</p>
<p class="noindentt">The <em>strace</em> command is Linux-specific, but most UNIX implementations provide their own equivalents (e.g., <em>truss</em> on Solaris and <em>ktrace</em> on the BSDs).</p>
<div class="block">
<p class="noindent">The <em>ltrace</em> command performs an analogous task to <em>strace</em>, but for library functions. See the <em>ltrace(1)</em> manual page for details.<span epub:type="pagebreak" id="page_1404"/></p>
</div>
</body>
</html>
