<?xml version="1.0" encoding="UTF-8"?>
<html xml:lang="en-us" lang="en-us" xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ns="http://www.w3.org/2001/10/synthesis">
<head>
<title>The Linux Programming Interface</title>
<link rel="stylesheet" type="text/css" href="../styles/9781593272203.css"/>
</head>
<body>
<h2 class="h2" id="pref01"><span epub:type="pagebreak" id="page_xxxiii"/><strong>PREFACE</strong></h2>
<h3 class="h3a" id="pref01lev1sec01"><strong>Subject</strong></h3>
<p class="noindenta">In this book, I describe the Linux programming interface&#8212;the system calls, library functions, and other low-level interfaces provided by Linux, a free implementation of the UNIX operating system. These interfaces are used, directly or indirectly, by every program that runs on Linux. They allow applications to perform tasks such as file I/O, creating and deleting files and directories, creating new processes, executing programs, setting timers, communicating between processes and threads on the same computer, and communicating between processes residing on different computers connected via a network. This set of low-level interfaces is sometimes also known as the <em>system programming</em> interface.</p>
<p class="indent">Although I focus on Linux, I give careful attention to standards and portability issues, and clearly distinguish the discussion of Linux-specific details from the discussion of features that are common to most UNIX implementations and standardized by POSIX and the Single UNIX Specification. Thus, this book also provides a comprehensive description of the UNIX/POSIX programming interface and can be used by programmers writing applications targeted at other UNIX systems or intended to be portable across multiple systems.</p>
<h3 class="h3a" id="pref01lev1sec02"><span epub:type="pagebreak" id="page_xxxiv"/><strong>Intended audience</strong></h3>
<p class="noindentab">This book is aimed primarily at the following audience:</p>
<p class="bull">&#8226; programmers and software designers building applications for Linux, other UNIX systems, or other POSIX-conformant systems;</p>
<p class="bull">&#8226; programmers porting applications between Linux and other UNIX implementations or between Linux and other operating systems;</p>
<p class="bull">&#8226; instructors and advanced students teaching or learning Linux or UNIX system programming; and</p>
<p class="bull">&#8226; system managers and &#8220;power users&#8221; wishing to gain a greater understanding of the Linux/UNIX programming interface and of how various pieces of system software are implemented.</p>
<p class="noindentt">I assume you have some prior programming experience, but no previous system programming experience is required. I also assume you have a reading knowledge of the C programming language, and know how to use the shell and common Linux or UNIX commands. If you are new to Linux or UNIX, you will find it helpful to read the programmer-oriented review of fundamental concepts of Linux and UNIX systems in <a href="ch02.xhtml#ch02">Chapter 2</a>.</p>
<div class="block">
<p class="noindent">The standard tutorial reference for C is [<a href="bib.xhtml#bib47">Kernighan &#38; Ritchie, 1988</a>]. [<a href="bib.xhtml#bib41">Harbison &#38; Steele, 2002</a>] goes into even more detail on C, and includes coverage of changes introduced with the C99 standard. [<a href="bib.xhtml#bib105">van der Linden, 1994</a>] is an alternative look at C that is both highly amusing and instructive. [<a href="bib.xhtml#bib72">Peek et al., 2001</a>] provides a good, brief introduction to using a UNIX system.</p>
<p class="indent">Throughout this book, indented small-font paragraphs like these are used for asides containing rationale, implementation details, background information, historical notes, and other topics that are ancillary to the main text.</p>
</div>
<h3 class="h3a" id="pref01lev1sec03"><strong>Linux and UNIX</strong></h3>
<p class="noindenta">This book could have been purely about standard UNIX (that is, POSIX) system programming because most features found on other UNIX implementations are also present on Linux and vice versa. However, while writing portable applications is a worthy goal, it is also important to describe Linux extensions to the standard UNIX programming interface. One reason for this is the popularity of Linux. Another is that the use of nonstandard extensions is sometimes essential, either for performance reasons or to access functionality that is unavailable in the standard UNIX programming interface. (All UNIX implementations provide nonstandard extensions for these reasons.)</p>
<p class="indentb">Therefore, while I&#8217;ve designed this book to be useful to programmers working with all UNIX implementations, I also provide full coverage of programming features that are specific to Linux. These features include:</p>
<p class="bull">&#8226; <em>epoll</em>, a mechanism for obtaining notification of file I/O events;</p>
<p class="bull">&#8226; <em>inotify</em>, a mechanism for monitoring changes in files and directories;</p>
<p class="bull">&#8226; capabilities, a mechanism for granting a process a subset of the powers of the superuser;</p>
<p class="bull"><span epub:type="pagebreak" id="page_xxxv"/>&#8226; extended attributes;</p>
<p class="bull">&#8226; i-node flags;</p>
<p class="bull">&#8226; the <em>clone()</em> system call;</p>
<p class="bull">&#8226; the <span class="literal">/proc</span> file system; and</p>
<p class="bull">&#8226; Linux-specific details of the implementation of file I/O, signals, timers, threads, shared libraries, interprocess communication, and sockets.</p>
<h3 class="h3a" id="pref01lev1sec04"><strong>Usage and organization</strong></h3>
<p class="noindentab">You can use this book in at least two ways:</p>
<p class="bull">&#8226; As a tutorial introduction to the Linux/UNIX programming interface. You can read the book linearly. Later chapters build on material presented in earlier chapters, with forward references minimized as far as possible.</p>
<p class="bull">&#8226; As a comprehensive reference to the Linux/UNIX programming interface. An extensive index and frequent cross-references allow topics to be read in random order.</p>
<p class="noindentt">I&#8217;ve grouped the chapters of this book into the following parts:</p>
<ol>
<li class="order"><p class="orderp"><em>Background and concepts</em>: history of UNIX, C, and Linux and overview of UNIX standards (<a href="ch01.xhtml#ch01">Chapter 1</a>); a programmer-oriented introduction to Linux and UNIX concepts (<a href="ch02.xhtml#ch02">Chapter 2</a>); and fundamental concepts for system programming on Linux and UNIX (<a href="ch03.xhtml#ch03">Chapter 3</a>).</p></li>
<li class="order"><p class="orderp"><em>Fundamental features of the system programming interface</em>: file I/O (<a href="ch04.xhtml#ch04">Chapter 4</a> and <a href="ch05.xhtml#ch05">Chapter 5</a>); processes (<a href="ch06.xhtml#ch06">Chapter 6</a>); memory allocation (<a href="ch07.xhtml#ch07">Chapter 7</a>); users and groups (<a href="ch08.xhtml#ch08">Chapter 8</a>); process credentials (<a href="ch09.xhtml#ch09">Chapter 9</a>); time (<a href="ch10.xhtml#ch10">Chapter 10</a>); system limits and options (<a href="ch11.xhtml#ch11">Chapter 11</a>); and retrieving system and process information (<a href="ch12.xhtml#ch12">Chapter 12</a>).</p></li>
<li class="order"><p class="orderp"><em>More advanced features of the system programming interface</em>: file I/O buffering (<a href="ch13.xhtml#ch13">Chapter 13</a>); file systems (<a href="ch14.xhtml#ch14">Chapter 14</a>); file attributes (<a href="ch15.xhtml#ch15">Chapter 15</a>); extended attributes (<a href="ch16.xhtml#ch16">Chapter 16</a>); access control lists (<a href="ch17.xhtml#ch17">Chapter 17</a>); directories and links (<a href="ch18.xhtml#ch18">Chapter 18</a>); monitoring file events (<a href="ch19.xhtml#ch19">Chapter 19</a>); signals (<a href="ch20.xhtml#ch20">Chapter 20</a> to <a href="ch22.xhtml#ch22">Chapter 22</a>); and timers (<a href="ch23.xhtml#ch23">Chapter 23</a>).</p></li>
<li class="order"><p class="orderp"><em>Processes, programs, and threads</em>: process creation, process termination, monitoring child processes, and executing programs (<a href="ch24.xhtml#ch24">Chapter 24</a> to <a href="ch28.xhtml#ch28">Chapter 28</a>); and POSIX threads (<a href="ch29.xhtml#ch29">Chapter 29</a> to <a href="ch33.xhtml#ch33">Chapter 33</a>).</p></li>
<li class="order"><p class="orderp"><em>Advanced process and program topics</em>: process groups, sessions, and job control (<a href="ch34.xhtml#ch34">Chapter 34</a>); process priorities and scheduling (<a href="ch35.xhtml#ch35">Chapter 35</a>); process resources (<a href="ch36.xhtml#ch36">Chapter 36</a>); daemons (<a href="ch37.xhtml#ch37">Chapter 37</a>); writing secure privileged programs (<a href="ch38.xhtml#ch38">Chapter 38</a>); capabilities (<a href="ch39.xhtml#ch39">Chapter 39</a>); login accounting (<a href="ch40.xhtml#ch40">Chapter 40</a>); and shared libraries (<a href="ch41.xhtml#ch41">Chapter 41</a> and <a href="ch42.xhtml#ch42">Chapter 42</a>).</p></li>
<li class="order"><p class="orderp"><em>Interprocess communication (IPC)</em>: IPC overview (<a href="ch43.xhtml#ch43">Chapter 43</a>); pipes and FIFOs (<a href="ch44.xhtml#ch44">Chapter 44</a>); System V IPC&#8212;message queues, semaphores, and shared memory (<a href="ch45.xhtml#ch45">Chapter 45</a> to <a href="ch48.xhtml#ch48">Chapter 48</a>); memory mappings (<a href="ch49.xhtml#ch49">Chapter 49</a>); virtual memory operations (<a href="ch50.xhtml#ch50">Chapter 50</a>); POSIX IPC&#8212;message queues, semaphores, and shared memory (<a href="ch51.xhtml#ch51">Chapter 51</a> to <a href="ch54.xhtml#ch54">Chapter 54</a>); and file locking (<a href="ch55.xhtml#ch55">Chapter 55</a>).</p></li>
<li class="order"><p class="orderp"><span epub:type="pagebreak" id="page_xxxvi"/><em>Sockets and network programming</em>: IPC and network programming with sockets (<a href="ch56.xhtml#ch56">Chapter 56</a> to <a href="ch61.xhtml#ch61">Chapter 61</a>).</p></li>
<li class="order"><p class="orderp"><em>Advanced I/O topics</em>: terminals (<a href="ch62.xhtml#ch62">Chapter 62</a>); alternative I/O models (<a href="ch63.xhtml#ch63">Chapter 63</a>); and pseudoterminals (<a href="ch64.xhtml#ch64">Chapter 64</a>).</p></li>
</ol>
<h3 class="h3a" id="pref01lev1sec05"><strong>Example programs</strong></h3>
<p class="noindenta">I illustrate the use of most of the interfaces described in this book with short, complete programs, many of which are designed to allow you to easily experiment from the command line to see just how various system calls and library functions work. Consequently, this book contains a lot of example code&#8212;around 15,000 lines of C source code and shell session logs.</p>
<p class="indent">Although reading and experimenting with the example programs is a useful starting point, the most effective way to consolidate the concepts discussed in this book is to write code, either modifying the example programs to try out your own ideas or writing new programs.</p>
<p class="indent">All of the source code in this book is available for download from the book&#8217;s web site. The source code distribution also includes many additional programs that don&#8217;t appear in the book. The purpose and details of these programs are described in comments in the source code. <em>Makefiles</em> are provided for building the programs, and an accompanying <span class="literal">README</span> file gives further details about the programs.</p>
<p class="indent">The source code is freely redistributable and modifiable under the terms of the GNU Affero General Public License (Affero GPL) version 3, a copy of which is provided in the source code distribution.</p>
<h3 class="h3a" id="pref01lev1sec06"><strong>Exercises</strong></h3>
<p class="noindenta">Most chapters conclude with a set of exercises, some of which are suggestions for various experiments using the provided example programs. Other exercises are questions relating to concepts discussed in the chapter, and still others are suggestions for programs you might write in order to consolidate your understanding of the material. You&#8217;ll find solutions to selected exercises in <a href="app06.xhtml#app06">Appendix F</a>.</p>
<h3 class="h3a" id="pref01lev1sec07"><strong>Standards and portability</strong></h3>
<p class="noindenta">Throughout this book, I&#8217;ve taken special care to consider portability issues. You&#8217;ll find frequent references to relevant standards, especially the combined POSIX.1-2001 and Single UNIX Specification version 3 (SUSv3) standard. You&#8217;ll also find details about changes in the recent revision of that standard, the combined POSIX.1-2008 and SUSv4 standard. (Because SUSv3 was a much larger revision, and it is the UNIX standard that is in most widespread effect at the time of writing, discussions of standards in the book are generally framed in terms of SUSv3, with notes on the differences in SUSv4. However, you can assume that, except where noted, statements about specifications in SUSv3 also hold true in SUSv4.)</p>
<p class="indent">For features that are not standardized, I indicate the range of differences on other UNIX implementations. I also highlight those major features of Linux that are implementation-specific, as well as minor differences between the implementation of system calls and library functions on Linux and other UNIX implementations. Where a feature is not indicated as being Linux-specific, you can normally assume that it is a standard feature that appears on most or all UNIX implementations.</p>
<p class="indent"><span epub:type="pagebreak" id="page_xxxvii"/>I&#8217;ve tested most of the example programs presented in this book (other than those that exploit features that are noted as being Linux-specific) on some or all of Solaris, FreeBSD, Mac OS X, Tru64 UNIX, and HP-UX. To improve portability to some of these systems, the web site for this book provides alternative versions of certain example programs with extra code that doesn&#8217;t appear in the book.</p>
<h3 class="h3a" id="pref01lev1sec08"><strong>Linux kernel and C library versions</strong></h3>
<p class="noindenta">The primary focus of this book is on Linux 2.6.<em>x</em>, the kernel version in widest use at the time of writing. Details for Linux 2.4 are also covered, and I&#8217;ve indicated where features differ between Linux 2.4 and 2.6. Where new features appear in the Linux 2.6.<em>x</em> series, the exact kernel version number of their appearance (e.g., 2.6.34) is noted.</p>
<p class="indent">With respect to the C library, the main focus is on the GNU C library (<em>glibc</em>) version 2. Where relevant, differences across <em>glibc</em> 2.<em>x</em> versions are noted.</p>
<p class="indent">As this book was heading to press, Linux kernel version 2.6.35 had just been released, and <em>glibc</em> version 2.12 had been recently released. This book is current with respect to both of these software versions. Changes that occur in the Linux and <em>glibc</em> interfaces after publication of this book will be noted on the book&#8217;s web site.</p>
<h3 class="h3a" id="pref01lev1sec09"><strong>Using the programming interface from other languages</strong></h3>
<p class="noindenta">Although the example programs are written in C, you can use the interfaces described in this book from other programming languages&#8212;for example, compiled languages such as C++, Pascal, Modula, Ada, FORTRAN, and D, and scripting languages such as Perl, Python, and Ruby. (Java requires a different approach; see, for example, [<a href="bib.xhtml#bib80">Rochkind, 2004</a>].) Different techniques will be required to obtain the necessary constant definitions and function declarations (except in the case of C++), and some extra work may be needed to pass function arguments in the manner required by C linkage conventions. Notwithstanding these differences, the essential concepts are the same, and you&#8217;ll find the information in this book is applicable even if you are working in another programming language.</p>
<h3 class="h3a" id="pref01lev1sec10"><strong>About the author</strong></h3>
<p class="noindenta">I started using UNIX and C in 1987, when I spent several weeks sitting in front of an HP Bobcat workstation with a copy of the first edition of Marc Rochkind&#8217;s <em>Advanced UNIX Programming</em> and what ultimately became a very dog-eared printed copy of the C shell manual page. My approach then was one that I still try to follow today, and that I recommend to anyone approaching a new software technology: take the time to read the documentation (if it exists) and write small (but increasingly large) test programs until you become confident of your understanding of the software. I&#8217;ve found that, in the long run, this kind of self-training more than pays for itself in terms of saved time. Many of the programming examples in this book are constructed in ways that encourage this learning approach.</p>
<p class="indent">I&#8217;ve primarily been a software engineer and designer. However, I&#8217;m also a passionate teacher, and have spent several years teaching in both academic and commercial environments. I&#8217;ve run many week-long courses teaching UNIX system programming, and that experience informs the writing of this book.</p>
<p class="indent"><span epub:type="pagebreak" id="page_xxxviii"/>I&#8217;ve been using Linux for about half as long as I&#8217;ve been using UNIX, and, over that time, my interest has increasingly centered on the boundary between the kernel and user space: the Linux programming interface. This interest has drawn me into a number of interrelated activities. I intermittently provide input and bug reports for the POSIX/SUS standard; I carry out tests and design reviews of new user-space interfaces added to the Linux kernel (and have helped find and fix many code and design bugs in those interfaces); I&#8217;ve been a regular speaker at conferences on topics related to interfaces and their documentation; and I&#8217;ve been invited on a number of occasions to the annual Linux Kernel Developers Summit. The common thread tying all of these activities together is my most visible contribution in the Linux world: my work on the <em>man-pages</em> project (<em><a href="http://www.kernel.org/doc/man-pages/">http://www.kernel.org/doc/man-pages/</a></em>).</p>
<p class="indent">The <em>man-pages</em> project provides pages in sections 2, 3, 4, 5, and 7 of the Linux manual pages. These are the manual pages describing the programming interfaces provided by the Linux kernel and the GNU C library&#8212;the same topic area as this book. I&#8217;ve been involved with <em>man-pages</em> for more than a decade. Since 2004, I&#8217;ve been the project maintainer, a task that involves, in roughly equal measure, writing documentation, reading kernel and library source code, and writing programs to verify the details for documentation. (Documenting an interface is a great way to find bugs in that interface.) I&#8217;ve also been the biggest contributor to <em>man-pages</em>&#8212;of the approximately 900 pages in <em>man-pages</em>, I am the author of 140, and the coauthor of another 125. So, even before you picked up this book, it&#8217;s quite likely you&#8217;ve read some of my published work. I hope that you&#8217;ve found that work useful, and that you&#8217;ll find this book even more so.</p>
<h3 class="h3a" id="pref01lev1sec11"><strong>Acknowledgements</strong></h3>
<p class="noindenta">Without the support of a good many people, this book would have been far less than it is. It is a great pleasure to thank them.</p>
<p class="indent">A large team of technical reviewers around the world read drafts, found errors, pointed out confusing explanations, suggested rewordings and diagrams, tested programs, proposed exercises, identified aspects of the behavior of Linux and other UNIX implementations that I was not aware of, and offered support and encouragement. Many reviewers generously supplied insights and comments that I was able to incorporate into the book, at times making me look more knowledgeable than I am. Any mistakes that remain are, of course, my own.</p>
<p class="indentb">Thanks especially to the following reviewers (listed alphabetically by surname), who either commented on large sections of the manuscript, commented extensively on smaller sections of the manuscript, or (magnificently) commented extensively on large sections of the manuscript:</p>
<p class="bull">&#8226; Christophe Blaess is a consulting software engineer and professional trainer who specializes in industrial (realtime and embedded) applications of Linux. Christophe is the author of <em>Programmation syst&#232;me en C sous Linux</em>, a fine French book covering many of the same topics as this book. He generously read and commented on many chapters of my book.</p>
<p class="bull">&#8226; David Butenhof (Hewlett-Packard) was a member of the original working group for POSIX threads and for the Single UNIX Specification threads extensions, and is the author of <em>Programming with POSIX Threads</em>. He wrote the original DCE Threads reference implementation for the Open Software Foundation, <span epub:type="pagebreak" id="page_xxxix"/>and was lead architect of the threads implementation for OpenVMS and Digital UNIX. David reviewed the threads chapters, suggested many improvements, and patiently corrected several details of my understanding of the POSIX threads API.</p>
<p class="bull">&#8226; Geoff Clare works at The Open Group on their UNIX conformance test suites, has been involved with UNIX standardization for more than 20 years, and is one of half a dozen key participants in the Austin Group, which develops the joint standard that forms POSIX.1 and the base volumes of the Single UNIX Specification. Geoff provided detailed review of parts of the manuscript related to standard UNIX interfaces, patiently and politely suggested numerous fixes and improvements, spotted many obscure bugs, and provided much assistance in focusing on the importance of standards for portable programming.</p>
<p class="bull">&#8226; Lo&#239;c Domaign&#233; (then at German Air Traffic Control) is a software systems engineer working on the design and development of distributed, concurrent, and fault-tolerant embedded systems with hard realtime requirements. He provided review input for the threads specification in SUSv3, and is an enthusiastic educator and knowledgeable contributor in various online technical forums. Lo&#239;c carried out a detailed review of the threads chapters, as well as many other parts of the book. He also implemented a number of clever programs to verify details of the Linux threads implementation, provided a great deal of enthusiasm and encouragement, and proposed numerous ideas to improve the overall presentation of the material.</p>
<p class="bull">&#8226; Gert D&#246;ring programmed <em>mgetty</em> and <em>sendfax</em>, a pair of programs that together are one of the most widely used open source fax packages for UNIX and Linux. These days, he works mainly on building and operating large IPv4-based and IPv6-based networks, a task that includes working with colleagues across Europe to define the operational policies that ensure the smooth operation of the infrastructure of the Internet. Gert provided extensive and useful feedback on the chapters covering terminals, login accounting, process groups, sessions, and job control.</p>
<p class="bull">&#8226; Wolfram Gloger is an IT consultant who has worked on a range of Free and Open Source Software (FOSS) projects in the past decade and a half. Among other things, Wolfram is the implementer of the <em>malloc</em> package used in the GNU C library. Currently, he works on web services development, with a particular focus on E-learning, although he still does occasional work on the kernel and system libraries. Wolfram reviewed a number of chapters, especially helping with my discussion of memory-related topics.</p>
<p class="bull">&#8226; Fernando Gont is a member of the Centro de Estudios de Inform&#225;tica (CEDI) at the Universidad Tecnol&#243;gica Nacional, Argentina. He focuses on Internet engineering, with active participation in the Internet Engineering Task Force (IETF), where he has authored a number of <em>Request for Comments</em> (RFC) documents. Fernando also works on security assessment of communications protocols for the UK Centre for the Protection of National Infrastructure (CPNI), and has produced the first thorough security assessment of the TCP and IP protocols. Fernando provided a very thorough review of the network programming chapters, explained many details of TCP/IP, and suggested a multitude of improvements to the material.</p>
<p class="bull"><span epub:type="pagebreak" id="page_xl"/>&#8226; Andreas Gr&#252;nbacher (SUSE Labs) is a kernel hacker and author of the Linux implementation of extended attributes and POSIX access control lists. Andreas provided thorough review of many chapters, much encouragement, and the single comment that probably most changed the structure of the book.</p>
<p class="bull">&#8226; Christoph Hellwig is a Linux storage and file-systems consultant and a well-known kernel hacker who has worked on many parts of the Linux kernel. Christoph kindly took time out from writing and reviewing Linux kernel patches to review several chapters of this book, suggesting many useful corrections and improvements.</p>
<p class="bull">&#8226; Andreas Jaeger led the development of the Linux port to the x86-64 architecture. As a GNU C Library developer, he ported the library to x86-64, and helped make the library standards-conformant in several areas, especially in the math library. He is currently Program Manager for openSUSE at Novell. Andreas reviewed far more chapters than I could possibly have hoped, suggested a multitude of improvements, and warmly encouraged the ongoing work on the book.</p>
<p class="bull">&#8226; Rick Jones, also known as &#8220;Mr. Netperf&#8221; (Networked Systems Performance Curmudgeon at Hewlett-Packard), provided valuable review of the network programming chapters.</p>
<p class="bull">&#8226; Andi Kleen (then at SUSE Labs) is a well-known and long-term kernel hacker who has worked on many and diverse areas of the Linux kernel, including networking, error handling, scalability, and low-level architecture code. Andi did an extensive review of the material on network programming, expanded my knowledge of many details of the Linux TCP/IP implementation, and suggested many ways to improve my presentation of the subject.</p>
<p class="bull">&#8226; Martin Landers (Google) was still a student when I had the good fortune to meet him as a colleague. Since then, he has managed to pack rather a lot into a short time, having worked variously as software architect, IT trainer, and professional hacker. I was fortunate indeed to have Martin as a reviewer. He contributed numerous incisive comments and corrections that greatly improved many chapters of the book.</p>
<p class="bull">&#8226; Jamie Lokier is a well-known kernel hacker who has been contributing to Linux development for 15 years. He nowadays describes himself as &#8220;a consultant in solving difficult problems that often have embedded Linux somewhere.&#8221; Jamie provided an extraordinarily thorough review of the chapters on memory mappings, POSIX shared memory, and virtual memory operations. His comments corrected many details of my understanding of these topics and greatly improved the structure of the chapters.</p>
<p class="bull">&#8226; Barry Margolin has been a system programmer, system administrator, and support engineer throughout his 25-year career. He is currently a Senior Performance Engineer at Akamai Technologies. He is a frequent, well-respected contributor in various online forums discussing UNIX and Internet topics, and has reviewed a number of books on these topics. Barry reviewed a number of chapters of this book, suggesting many improvements.</p>
<p class="bull"><span epub:type="pagebreak" id="page_xli"/>&#8226; Paul Pluzhnikov (Google) was formerly the technical lead and a key developer of the <em>Insure++</em> memory-debugging tool. He is also a sometime <em>gdb</em> hacker, and a frequent responder in online forums answering questions on debugging, memory allocation, shared libraries, and run-time environments. Paul reviewed a wide range of chapters, suggesting many valuable improvements.</p>
<p class="bull">&#8226; John Reiser (with Tom London) carried out one of the earliest ports of UNIX to a 32-bit architecture: the VAX-11/780. He is also the creator of the <em>mmap()</em> system call. John reviewed many chapters (including, obviously, the chapter on <em>mmap()</em>), providing a multitude of historical insights and crystal-clear technical explanations that greatly improved the chapters.</p>
<p class="bull">&#8226; Anthony Robins (Associate Professor of Computer Science, University of Otago, New Zealand), a close friend of more than three decades, was the first reader of the drafts of several chapters, and offered valuable early comments and ongoing encouragement as the project evolved.</p>
<p class="bull">&#8226; Michael Schr&#246;der (Novell) is one of the main authors of the GNU <em>screen</em> program, a task that has imbued him with a thorough knowledge of the subtleties and differences in terminal-driver implementations. Michael reviewed the chapters covering terminals and pseudoterminals, and the chapter on process groups, sessions, and job control, providing much useful feedback.</p>
<p class="bull">&#8226; Manfred Spraul, who worked on the IPC code (among other things) in the Linux kernel, generously reviewed several of the chapters on IPC and suggested many improvements.</p>
<p class="bull">&#8226; Tom Swigg, a former UNIX training colleague at Digital, was an early reviewer who supplied important feedback on several chapters. A software engineer and IT trainer for more than 25 years, Tom currently works at London South Bank University, programming and supporting Linux in a VMware environment.</p>
<p class="bull">&#8226; Jens Thoms T&#246;rring is part of a fine tradition of physicists turned programmers, and has produced a variety of open source device drivers and other software. Jens read a surprisingly diverse collection of chapters, providing unique and valuable insight on how each could be improved.</p>
<p class="noindentt">Many other technical reviewers also read various parts of the book and made valuable comments. In alphabetical order by surname, thank you to George Anzinger (MontaVista Software), Stefan Becher, Krzysztof Benedyczak, Daniel Brahneborg, Andries Brouwer, Annabel Church, Dragan Cvetkovic, Floyd L. Davidson, Stuart Davidson (Hewlett-Packard Consulting), Kasper Dupont, Peter Fellinger (jambit GmbH), Mel Gorman (IBM), Niels G&#246;llesch, Claus Gratzl, Serge Hallyn (IBM), Markus Hartinger (jambit GmbH), Richard Henderson (Red Hat), Andrew Josey (The Open Group), Dan Kegel (Google), Davide Libenzi, Robert Love (Google), H.J. Lu (Intel Corporation), Paul Marshall, Chris Mason, Michael Matz (SUSE), Trond Myklebust, James Peach, Mark Phillips (Automated Test Systems), Nick Piggin (SUSE Labs, Novell), Kay Johannes Potthoff, Florian Rampp, Stephen Rothwell (Linux Technology Centre, IBM), Markus Schwaiger, Stephen Tweedie (Red Hat), Britta Vargas, Chris Wright, Michal Wronski, and Umberto Zamuner.</p>
<p class="indent"><span epub:type="pagebreak" id="page_xlii"/>Aside from technical review, I received many other kinds of help from various people and organizations.</p>
<p class="indent">Thanks to the following people for answering technical questions: Jan Kara, Dave Kleikamp, and Jon Snader. Thanks to Claus Gratzl and Paul Marshall for system management assistance.</p>
<p class="indent">Thanks to the Linux Foundation (LF), which, during 2008, funded me as a Fellow to work full time on the <em>man-pages</em> project and on testing and design review of the Linux programming interface. Although the Fellowship provided no direct financial support for working on this book, it did keep me and my family fed, and the ability to focus full time on documenting and testing the Linux programming interface was a boon to my &#8220;private&#8221; project. At a more individual level, thanks to Jim Zemlin for being my &#8220;interface&#8221; while working at the LF, and to the members of the LF Technical Advisory Board, who supported my application for the Fellowship.</p>
<p class="indent">Thanks to Alejandro Forero Cuervo for suggesting the title of the book!</p>
<p class="indent">More than 25 years ago, Robert Biddle intrigued me during my first degree with tales of UNIX, C, and Ratfor; thank you. Thanks to the following people, who, although not directly connected with this project, encouraged me on the path of writing during my second degree at the University of Canterbury, New Zealand: Michael Howard, Jonathan Mane-Wheoki, Ken Strongman, Garth Fletcher, Jim Pollard, and Brian Haig.</p>
<p class="indent">The late Richard Stevens wrote several superb books on UNIX programming and TCP/IP, which I, like a multitude of programmers, have found to be a wonderful source of technical information over the years. Readers of those books will note several visual aspects that are similar between my book and those of Richard Stevens. This is no accident. As I considered how to design my book, and looked around more generally at book designs, time and again, the approach employed by Richard Stevens seemed the best solution, and where this was so, I have employed the same visual approach.</p>
<p class="indent">Thanks to the following people and organizations for providing UNIX systems that enabled me to run test programs and verify details on other UNIX implementations: Anthony Robins and Cathy Chandra, for test systems at the University of Otago, New Zealand; Martin Landers, Ralf Ebner, and Klaus Tilk, for test systems at the Technische Universit&#228;t in Munich, Germany; Hewlett-Packard, for making their <em>testdrive</em> systems freely available on the Internet; and Paul de Weerd for providing OpenBSD access.</p>
<p class="indent">Heartfelt thanks to two Munich companies, and their owners, who, in addition to providing me with flexible employment and enjoyable colleagues, were extraordinarily generous in allowing me to use their offices while writing this book. Thanks to Thomas Kahabka and Thomas Gmelch of exolution GmbH, and, especially, to Peter Fellinger and Markus Hartinger of jambit GmbH.</p>
<p class="indent">Thanks for various kinds of help to the following people: Dan Randow, Karen Korrel, Claudio Scalmazzi, Michael Sch&#252;pbach, and Liz Wright. Thanks to Rob Suisted and Lynley Cook for the photographs used on the front and back covers.</p>
<p class="indent">Thanks to the following people who encouraged and supported me in various ways on this project: Deborah Church, Doris Church, and Annie Currie.</p>
<p class="indent"><span epub:type="pagebreak" id="page_xliii"/>Thanks to the team at No Starch Press for all sorts of help on an enormous project. Thanks to Bill Pollock for being straight-talking from the start, having rock-solid faith in the project, and patiently keeping an eye on the project. Thanks to my initial production editor, Megan Dunchak. Thanks to my copyeditor, Marilyn Smith, who, despite my best efforts at clarity and consistency, still found many things to fix. Riley Hoffman had overall responsibility for layout and design of the book, and also took up the reins as production editor as we came into the home straight. Riley graciously bore with my many requests to achieve the right layout and produced a superb final result. Thank you.</p>
<p class="indent">I now know the truth of the clich&#233; that a writer&#8217;s family also pays the price of the writer&#8217;s work. Thanks to Britta and Cecilia for their support, and for putting up with the many hours that I had to be away from family as I finished the book.</p>
<h3 class="h3a" id="pref01lev1sec12"><strong>Permissions</strong></h3>
<p class="noindenta">The Institute of Electrical and Electronics Engineers and The Open Group have kindly given permission to quote portions of text from IEEE Std 1003.1, 2004 Edition, Standard for Information Technology&#8212;Portable Operating System Interface (POSIX), The Open Group Base Specifications Issue 6. The complete standard can be consulted online at <em><a href="http://www.unix.org/version3/online.html">http://www.unix.org/version3/online.html</a></em>.</p>
<h3 class="h3a" id="pref01lev1sec13"><strong>Web site and source code of example programs</strong></h3>
<p class="noindenta">You can find further information about this book, including errata and source code for the example programs, at <em><a href="http://man7.org/tlpi/">http://man7.org/tlpi/</a></em>.</p>
<h3 class="h3a" id="pref01lev1sec14"><strong>Training courses</strong></h3>
<p class="noindenta">I teach courses on system programming, based on the content of this book, as well as a number of other related topics, including network programming. For details, see <em><a href="http://man7.org/training/">http://man7.org/training/</a></em>.</p>
<h3 class="h3a" id="pref01lev1sec15"><strong>Feedback</strong></h3>
<p class="noindenta">I welcome bug reports, suggestions for code improvements, and fixes to further improve code portability. Book bugs and general suggestions about how the explanations in the book can be improved are also welcome. (A current list of errata can be found at <em><a href="http://man7.org/tlpi/errata/">http://man7.org/tlpi/errata/</a></em>.) Since changes in the Linux programming interface are varied and sometimes too frequent for one person to keep up with, I would be happy to receive suggestions about new and changed features that should be covered in a future edition of this book.</p>
<p class="noindentt1">Michael Timothy Kerrisk</p>
<p class="noindenta">Munich, Germany and Christchurch, New Zealand</p>
<p class="noindenta">August 2010</p>
<p class="noindent"><em><a href="mailto:mtk@man7.org">mtk@man7.org</a></em><span epub:type="pagebreak" id="page_xliv"/></p>
</body>
</html>
