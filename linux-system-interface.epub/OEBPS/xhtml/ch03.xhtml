<?xml version="1.0" encoding="UTF-8"?>
<html xml:lang="en-us" lang="en-us" xmlns="http://www.w3.org/1999/xhtml" xmlns:epub="http://www.idpf.org/2007/ops" xmlns:ns="http://www.w3.org/2001/10/synthesis">
<head>
<title>The Linux Programming Interface</title>
<link rel="stylesheet" type="text/css" href="../styles/9781593272203.css"/>
</head>
<body>
<h2 class="h2" id="ch03"><span epub:type="pagebreak" id="page_43"/><strong><span class="big">3</span></strong><br/><strong>SYSTEM PROGRAMMING CONCEPTS</strong></h2>
<p class="noindenta">This chapter covers various topics that are prerequisites for system programming. We begin by introducing system calls and detailing the steps that occur during their execution. We then consider library functions and how they differ from system calls, and couple this with a description of the (GNU) C library.</p>
<p class="indent">Whenever we make a system call or call a library function, we should always check the return status of the call in order to determine if it was successful. We describe how to perform such checks, and present a set of functions that are used in most of the example programs in this book to diagnose errors from system calls and library functions.</p>
<p class="indent">We conclude by looking at various issues related to portable programming, specifically the use of feature test macros and the standard system data types defined by SUSv3.</p>
<h3 class="h3" id="ch03lev1sec01"><strong>3.1 System Calls</strong></h3>
<p class="noindenta">A <em>system call</em> is a controlled entry point into the kernel, allowing a process to request that the kernel perform some action on the process&#8217;s behalf. The kernel makes a range of services accessible to programs via the system call application programming interface (API). These services include, for example, creating a <span epub:type="pagebreak" id="page_44"/>new process, performing I/O, and creating a pipe for interprocess communication. (The <em>syscalls(2)</em> manual page lists the Linux system calls.)</p>
<p class="indentb">Before going into the details of how a system call works, we note some general points:</p>
<p class="bull">&#8226; A system call changes the processor state from user mode to kernel mode, so that the CPU can access protected kernel memory.</p>
<p class="bull">&#8226; The set of system calls is fixed. Each system call is identified by a unique number. (This numbering scheme is not normally visible to programs, which identify system calls by name.)</p>
<p class="bull">&#8226; Each system call may have a set of arguments that specify information to be transferred from user space (i.e., the process&#8217;s virtual address space) to kernel space and vice versa.</p>
<p class="noindentt">From a programming point of view, invoking a system call looks much like calling a C function. However, behind the scenes, many steps occur during the execution of a system call. To illustrate this, we consider the steps in the order that they occur on a specific hardware implementation, the x86-32. The steps are as follows:</p>
<ol>
<li class="order"><p class="orderp">The application program makes a system call by invoking a wrapper function in the C library.</p></li>
<li class="order"><p class="orderp">The wrapper function must make all of the system call arguments available to the system call trap-handling routine (described shortly). These arguments are passed to the wrapper via the stack, but the kernel expects them in specific registers. The wrapper function copies the arguments to these registers.</p></li>
<li class="order"><p class="orderp">Since all system calls enter the kernel in the same way, the kernel needs some method of identifying the system call. To permit this, the wrapper function copies the system call number into a specific CPU register (<span class="literal">%eax</span>).</p></li>
<li class="order"><p class="orderp">The wrapper function executes a <em>trap</em> machine instruction (<span class="literal">int 0x80</span>), which causes the processor to switch from user mode to kernel mode and execute code pointed to by location <span class="literal">0x80</span> (128 decimal) of the system&#8217;s trap vector.</p>
<div class="block1">
<p class="noindent">More recent x86-32 architectures implement the <span class="literal">sysenter</span> instruction, which provides a faster method of entering kernel mode than the conventional <span class="literal">int 0x80</span> trap instruction. The use of <span class="literal">sysenter</span> is supported in the 2.6 kernel and from <em>glibc</em> 2.3.2 onward.</p>
</div></li>
<li class="order"><p class="orderp">In response to the trap to location <span class="literal">0x80</span>, the kernel invokes its <em>system_call()</em> routine (located in the assembler file <span class="literal">arch/x86/kernel/entry.S</span>) to handle the trap. This handler:</p>
<p class="olista">a) Saves register values onto the kernel stack (<a href="ch06.xhtml#ch06lev1sec05">Section 6.5</a>).</p>
<p class="olista">b) Checks the validity of the system call number.</p>
<p class="olista">c) Invokes the appropriate system call service routine, which is found by using the system call number to index a table of all system call service routines (the kernel variable <em>sys_call_table</em>). If the system call service routine has any arguments, it first checks their validity; for example, it checks that addresses point to valid locations in user memory. Then the service <span epub:type="pagebreak" id="page_45"/>routine performs the required task, which may involve modifying values at addresses specified in the given arguments and transferring data between user memory and kernel memory (e.g., in I/O operations). Finally, the service routine returns a result status to the <em>system_call()</em> routine.</p>
<p class="olista">d) Restores register values from the kernel stack and places the system call return value on the stack.</p>
<p class="olista">e) Returns to the wrapper function, simultaneously returning the processor to user mode.</p></li>
<li class="order"><p class="orderp">If the return value of the system call service routine indicated an error, the wrapper function sets the global variable <em>errno</em> (see <a href="ch03.xhtml#ch03lev1sec04">Section 3.4</a>) using this value. The wrapper function then returns to the caller, providing an integer return value indicating the success or failure of the system call.</p>
<div class="block1">
<p class="noindent">On Linux, system call service routines follow a convention of returning a nonnegative value to indicate success. In case of an error, the routine returns a negative number, which is the negated value of one of the <em>errno</em> constants. When a negative value is returned, the C library wrapper function negates it (to make it positive), copies the result into <em>errno</em>, and returns &#8211;1 as the function result of the wrapper to indicate an error to the calling program.</p>
<p class="indent">This convention relies on the assumption that system call service routines don&#8217;t return negative values on success. However, for a few of these routines, this assumption doesn&#8217;t hold. Normally, this is not a problem, since the range of negated <em>errno</em> values doesn&#8217;t overlap with valid negative return values. However, this convention does cause a problem in one case: the <span class="literal">F_GETOWN</span> operation of the <em>fcntl()</em> system call, which we describe in <a href="ch63.xhtml#ch63lev1sec03">Section 63.3</a>.</p>
</div></li>
</ol>
<p class="noindent"><a href="ch03.xhtml#ch3fig1">Figure 3-1</a> illustrates the above sequence using the example of the <em>execve()</em> system call. On Linux/x86-32, <em>execve()</em> is system call number 11 (<span class="literal">__NR_execve</span>). Thus, in the <em>sys_call_table</em> vector, entry 11 contains the address of <em>sys_execve()</em>, the service routine for this system call. (On Linux, system call service routines typically have names of the form <em>sys_xyz()</em>, where <em>xyz()</em> is the system call in question.)</p>
<p class="indent">The information given in the preceding paragraphs is more than we&#8217;ll usually need to know for the remainder of this book. However, it illustrates the important point that, even for a simple system call, quite a bit of work must be done, and thus system calls have a small but appreciable overhead.</p>
<div class="block">
<p class="noindent">As an example of the overhead of making a system call, consider the <em>getppid()</em> system call, which simply returns the process ID of the parent of the calling process. On one of the author&#8217;s x86-32 systems running Linux 2.6.25, 10 million calls to <em>getppid()</em> required approximately 2.2 seconds to complete. This amounts to around 0.3 microseconds per call. By comparison, on the same system, 10 million calls to a C function that simply returns an integer required 0.11 seconds, or around one-twentieth of the time required for calls to <em>getppid()</em>. Of course, most system calls have significantly more overhead than <em>getppid()</em>.</p>
</div>
<p class="noindent">Since, from the point of view of a C program, calling the C library wrapper function is synonymous with invoking the corresponding system call service routine, in the remainder of this book, we use wording such as &#8220;invoking the system call <em>xyz()</em>&#8221; to mean &#8220;calling the wrapper function that invokes the system call <em>xyz()</em>.&#8221;</p>
<div class="image"><span epub:type="pagebreak" id="page_46"/><img src="../images/f03-01.jpg" alt="image"/></div>
<p class="figcap"><a id="ch3fig1"/><strong>Figure 3-1:</strong> Steps in the execution of a system call</p>
<p class="noindent"><a href="app01.xhtml#app01">Appendix A</a> describes the <em>strace</em> command, which can be used to trace the system calls made by a program, either for debugging purposes or simply to investigate what a program is doing.</p>
<p class="indent">More information about the Linux system call mechanism can be found in [<a href="bib.xhtml#bib59">Love, 2010</a>], [<a href="bib.xhtml#bib09">Bovet &#38; Cesati, 2005</a>], and [<a href="bib.xhtml#bib63">Maxwell, 1999</a>].</p>
<h3 class="h3" id="ch03lev1sec02"><strong>3.2 Library Functions</strong></h3>
<p class="noindenta">A <em>library function</em> is simply one of the multitude of functions that constitutes the standard C library. (For brevity, when talking about a specific function in the rest of the book we&#8217;ll often just write <em>function</em> rather than <em>library function</em>.) The purposes of these functions are very diverse, including such tasks as opening a file, converting a time to a human-readable format, and comparing two character strings.</p>
<p class="indent">Many library functions don&#8217;t make any use of system calls (e.g., the string-manipulation functions). On the other hand, some library functions are layered on top of system calls. For example, the <em>fopen()</em> library function uses the <em>open()</em> system call to actually open a file. Often, library functions are designed to provide a more caller-friendly interface than the underlying system call. For example, the <em>printf()</em> function provides output formatting and data buffering, whereas the <em>write()</em> system <span epub:type="pagebreak" id="page_47"/>call just outputs a block of bytes. Similarly, the <em>malloc()</em> and <em>free()</em> functions perform various bookkeeping tasks that make them a much easier way to allocate and free memory than the underlying <em>brk()</em> system call.</p>
<h3 class="h3" id="ch03lev1sec03"><strong>3.3 The Standard C Library; The GNU C Library (<em>glibc</em>)</strong></h3>
<p class="noindenta">There are different implementations of the standard C library on the various UNIX implementations. The most commonly used implementation on Linux is the GNU C library (<em>glibc</em>, <em><a href="http://www.gnu.org/software/libc/">http://www.gnu.org/software/libc/</a></em>).</p>
<div class="block">
<p class="noindent">The principal developer and maintainer of the GNU C library was initially Roland McGrath. Nowadays, this task is carried out by Ulrich Drepper.</p>
<p class="indent">Various other C libraries are available for Linux, including libraries with smaller memory requirements for use in embedded device applications. Examples include <em>uClibc</em> (<em><a href="http://www.uclibc.org/">http://www.uclibc.org/</a></em>) and <em>diet libc</em> (<em><a href="http://www.fefe.de/dietlibc/">http://www.fefe.de/dietlibc/</a></em>). In this book, we confine the discussion to <em>glibc</em>, since that is the C library used by most applications developed on Linux.</p>
</div>
<h5 class="h5" id="ch03lev3sec01"><strong>Determining the version of <em>glibc</em> on the system</strong></h5>
<p class="noindenta">Sometimes, we need to determine the version of <em>glibc</em> on a system. From the shell, we can do this by running the <em>glibc</em> shared library file as though it were an executable program. When we run the library as an executable, it displays various text, including its version number:</p>
<p class="programs">$ <span class="codestrong">/lib/libc.so.6</span><br/>GNU C Library stable release version 2.10.1, by Roland McGrath et al.<br/>Copyright (C) 2009 Free Software Foundation, Inc.<br/>This is free software; see the source for copying conditions.<br/>There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A<br/>PARTICULAR PURPOSE.<br/>Compiled by GNU CC version 4.4.0 20090506 (Red Hat 4.4.0-4).<br/>Compiled on a Linux &gt;&gt;2.6.18-128.4.1.el5&lt;&lt; system on 2009-08-19.<br/>Available extensions:<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;The C stubs add-on version 2.1.2.<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;crypt add-on version 2.1 by Michael Glad and others<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;GNU Libidn by Simon Josefsson<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;Native POSIX Threads Library by Ulrich Drepper et al<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;BIND-8.2.3-T5B<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;RT using linux kernel aio<br/>For bug reporting instructions, please see:<br/>&lt;http://www.gnu.org/software/libc/bugs.html&gt;.</p>
<p class="noindent">In some Linux distributions, the GNU C library resides at a pathname other than <span class="literal">/lib/libc.so.6</span>. One way of determining the location of the library is to run the <em>ldd</em> (list dynamic dependencies) program against an executable linked dynamically against <em>glibc</em> (most executables are linked in this manner). We can then inspect the resulting library dependency list to find the location of the <em>glibc</em> shared library:</p>
<p class="programs">$ <span class="codestrong">ldd myprog | grep libc</span><br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;libc.so.6 =&gt; /lib/tls/libc.so.6 (0x4004b000)</p>
<p class="noindent"><span epub:type="pagebreak" id="page_48"/>There are two means by which an application program can determine the version of the GNU C library present on the system: by testing constants or by calling a library function. From version 2.0 onward, <em>glibc</em> defines two constants, <span class="literal">__GLIBC__</span> and <span class="literal">__GLIBC_MINOR__</span>, that can be tested at compile time (in <span class="literal">#if</span> statements). On a system with <em>glibc</em> 2.12 installed, these constants would have the values 2 and 12. However, these constants are of limited use in a program that is compiled on one system but run on another system with a different <em>glibc</em>. To handle this possibility, a program can call the <em>gnu_get_libc_version()</em> function to determine the version of <em>glibc</em> available at run time.</p>
<div class="box">
<p class="programsa">#include &lt;gnu/libc-version.h&gt;<br/><br/>const char *<span class="codestrong">gnu_get_libc_version</span>(void);</p>
<p class="right">Returns pointer to null-terminated, statically allocated string containing GNU C library version number</p>
</div>
<p class="noindent">The <em>gnu_get_libc_version()</em> function returns a pointer to a string, such as <em>2.12</em>.</p>
<div class="block">
<p class="noindent">We can also obtain version information by using the <em>confstr()</em> function to retrieve the value of the (<em>glibc</em>-specific) <span class="literal">_CS_GNU_LIBC_VERSION</span> configuration variable. This call returns a string such as <em>glibc 2.12</em>.</p>
</div>
<h3 class="h3" id="ch03lev1sec04"><strong>3.4 Handling Errors from System Calls and Library Functions</strong></h3>
<p class="noindenta">Almost every system call and library function returns some type of status value indicating whether the call succeeded or failed. This status value should <em>always</em> be checked to see whether the call succeeded. If it did not, then appropriate action should be taken&#8212;at the very least, the program should display an error message warning that something unexpected occurred.</p>
<p class="indent">Although it is tempting to save typing time by excluding these checks (especially after seeing examples of UNIX and Linux programs where status values are not checked), it is a false economy. Many hours of debugging time can be wasted because a check was not made on the status return of a system call or library function that &#8220;couldn&#8217;t possibly fail.&#8221;</p>
<div class="block">
<p class="noindent">A few system calls never fail. For example, <em>getpid()</em> always successfully returns the ID of a process, and <em>_exit()</em> always terminates a process. It is not necessary to check the return values from such system calls.</p>
</div>
<h5 class="h5" id="ch03lev3sec02"><strong>Handling system call errors</strong></h5>
<p class="noindenta">The manual page for each system call documents the possible return values of the call, showing which value(s) indicate an error. Usually, an error is indicated by a return of &#8211;1. Thus, a system call can be checked with code such as the following:</p>
<p class="programs">fd = open(pathname, flags, mode);&#160;&#160;&#160;&#160;&#160;&#160;/* system call to open a file */<br/>if (fd == -1) {<br/>&#160;&#160;&#160;&#160;/* Code to handle the error */<br/>}<br/>...<br/><br/>if (close(fd) == -1) {<br/>&#160;&#160;&#160;&#160;/* Code to handle the error */<br/>}</p>
<p class="noindent"><span epub:type="pagebreak" id="page_49"/>When a system call fails, it sets the global integer variable <em>errno</em> to a positive value that identifies the specific error. Including the <span class="literal">&lt;errno.h&gt;</span> header file provides a declaration of <em>errno</em>, as well as a set of constants for the various error numbers. All of these symbolic names commence with <span class="literal">E</span>. The section headed <span class="literal">ERRORS</span> in each manual page provides a list of possible <em>errno</em> values that can be returned by each system call. Here is a simple example of the use of <em>errno</em> to diagnose a system call error:</p>
<p class="programs">cnt = read(fd, buf, numbytes);<br/>if (cnt == -1) {<br/>&#160;&#160;&#160;&#160;if (errno == EINTR)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fprintf(stderr, "read was interrupted by a signal\n");<br/>&#160;&#160;&#160;&#160;else {<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Some other error occurred */<br/>&#160;&#160;&#160;&#160;}<br/>}</p>
<p class="noindent">Successful system calls and library functions never reset <em>errno</em> to 0, so this variable may have a nonzero value as a consequence of an error from a previous call. Furthermore, SUSv3 permits a successful function call to set <em>errno</em> to a nonzero value (although few functions do this). Therefore, when checking for an error, we should always first check if the function return value indicates an error, and only then examine <em>errno</em> to determine the cause of the error.</p>
<p class="indent">A few system calls (e.g., <em>getpriority()</em>) can legitimately return &#8211;1 on success. To determine whether an error occurs in such calls, we set <em>errno</em> to 0 before the call, and then check it afterward. If the call returns &#8211;1 and <em>errno</em> is nonzero, an error occurred. (A similar statement also applies to a few library functions.)</p>
<p class="indent">A common course of action after a failed system call is to print an error message based on the <em>errno</em> value. The <em>perror()</em> and <em>strerror()</em> library functions are provided for this purpose.</p>
<p class="indent">The <em>perror()</em> function prints the string pointed to by its <em>msg</em> argument, followed by a message corresponding to the current value of <em>errno</em>.</p>
<div class="box">
<p class="programsa">#include &lt;stdio.h&gt;<br/><br/>void <span class="codestrong">perror</span>(const char *<span class="font1">msg</span>);</p>
</div>
<p class="noindent">A simple way of handling errors from system calls would be as follows:</p>
<p class="programs">fd = open(pathname, flags, mode);<br/>if (fd == -1) {<br/>&#160;&#160;&#160;&#160;perror("open");<br/>&#160;&#160;&#160;&#160;exit(EXIT_FAILURE);<br/>}</p>
<p class="noindent">The <em>strerror()</em> function returns the error string corresponding to the error number given in its <em>errnum</em> argument.</p>
<div class="box">
<p class="programsa"><span epub:type="pagebreak" id="page_50"/>#include &lt;string.h&gt;<br/><br/>char *<span class="codestrong">strerror</span>(int <span class="font1">errnum</span>);</p>
<p class="right">Returns pointer to error string corresponding to <em>errnum</em></p>
</div>
<p class="noindent">The string returned by <em>strerror()</em> may be statically allocated, which means that it could be overwritten by subsequent calls to <em>strerror()</em>.</p>
<p class="indent">If <em>errnum</em> specifies an unrecognized error number, <em>strerror()</em> returns a string of the form <em>Unknown error nnn</em>. On some other implementations, <em>strerror()</em> instead returns <span class="literal">NULL</span> in this case.</p>
<p class="indent">Because <em>perror()</em> and <em>strerror()</em> functions are locale-sensitive (<a href="ch10.xhtml#ch10lev1sec04">Section 10.4</a>), error descriptions are displayed in the local language.</p>
<h5 class="h5" id="ch03lev3sec03"><strong>Handling errors from library functions</strong></h5>
<p class="noindentab">The various library functions return different data types and different values to indicate failure. (Check the manual page for each function.) For our purposes, library functions can be divided into the following categories:</p>
<p class="bull">&#8226; Some library functions return error information in exactly the same way as system calls: a &#8211;1 return value, with <em>errno</em> indicating the specific error. An example of such a function is <em>remove()</em>, which removes a file (using the <em>unlink()</em> system call) or a directory (using the <em>rmdir()</em> system call). Errors from these functions can be diagnosed in the same way as errors from system calls.</p>
<p class="bull">&#8226; Some library functions return a value other than &#8211;1 on error, but nevertheless set <em>errno</em> to indicate the specific error condition. For example, <em>fopen()</em> returns a <span class="literal">NULL</span> pointer on error, and the setting of <em>errno</em> depends on which underlying system call failed. The <em>perror()</em> and <em>strerror()</em> functions can be used to diagnose these errors.</p>
<p class="bull">&#8226; Other library functions don&#8217;t use <em>errno</em> at all. The method for determining the existence and cause of errors depends on the particular function and is documented in the function&#8217;s manual page. For these functions, it is a mistake to use <em>errno</em>, <em>perror()</em>, or <em>strerror()</em> to diagnose errors.</p>
<h3 class="h3" id="ch03lev1sec05"><strong>3.5 Notes on the Example Programs in This Book</strong></h3>
<p class="noindenta">In this section, we describe various conventions and features commonly employed by the example programs presented in this book.</p>
<h4 class="h4" id="ch03lev2sec01"><strong>3.5.1 Command-Line Options and Arguments</strong></h4>
<p class="noindenta">Many of the example programs in this book rely on command-line options and arguments to determine their behavior.</p>
<p class="indent">Traditional UNIX command-line options consist of an initial hyphen, a letter that identifies the option, and an optional argument. (GNU utilities provide an extended option syntax consisting of two initial hyphens, followed by a string identifying the option and an optional argument.) To parse these options, we use the standard <em>getopt()</em> library function (described in <a href="app02.xhtml#app02">Appendix B</a>).</p>
<p class="indent"><span epub:type="pagebreak" id="page_51"/>Each of our example programs that has a nontrivial command-line syntax provides a simple help facility for the user: if invoked with the <em>&#8211;&#8211;help</em> option, the program displays a usage message that indicates the syntax for command-line options and arguments.</p>
<h4 class="h4" id="ch03lev2sec02"><strong>3.5.2 Common Functions and Header Files</strong></h4>
<p class="noindenta">Most of the example programs include a header file containing commonly required definitions, and they also use a set of common functions. We discuss the header file and functions in this section.</p>
<h5 class="h5" id="ch03lev3sec04"><strong>Common header file</strong></h5>
<p class="noindenta"><a href="ch03.xhtml#ch3ex1">Listing 3-1</a> is the header file used by nearly every program in this book. This header file includes various other header files used by many of the example programs, defines a <em>Boolean</em> data type, and defines macros for calculating the minimum and maximum of two numeric values. Using this header file allows us to make the example programs a bit shorter.</p>
<p class="examplet"><a id="ch3ex1"/><strong>Listing 3-1:</strong> Header file used by most example programs</p>
<p class="programsli">___________________________________________________________ <span class="codestrong">lib/tlpi_hdr.h</span><br/><br/>#ifndef TLPI_HDR_H<br/>#define TLPI_HDR_H&#160;&#160;&#160;&#160;&#160;&#160;/* Prevent accidental double inclusion */<br/><br/>#include &lt;sys/types.h&gt;&#160;&#160;/* Type definitions used by many programs */<br/>#include &lt;stdio.h&gt;&#160;&#160;&#160;&#160;&#160;&#160;/* Standard I/O functions */<br/>#include &lt;stdlib.h&gt;&#160;&#160;&#160;&#160;&#160;/* Prototypes of commonly used library functions,<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;plus EXIT_SUCCESS and EXIT_FAILURE constants */<br/>#include &lt;unistd.h&gt;&#160;&#160;&#160;&#160;&#160;/* Prototypes for many system calls */<br/>#include &lt;errno.h&gt;&#160;&#160;&#160;&#160;&#160;&#160;/* Declares errno and defines error constants */<br/>#include &lt;string.h&gt;&#160;&#160;&#160;&#160;&#160;/* Commonly used string-handling functions */<br/><br/>#include "get_num.h"&#160;&#160;&#160;&#160;/* Declares our functions for handling numeric<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;arguments (getInt(), getLong()) */<br/><br/>#include "error_functions.h"&#160;&#160;/* Declares our error-handling functions */<br/><br/>typedef enum { FALSE, TRUE } Boolean;<br/><br/>#define min(m,n) ((m) &lt; (n) ? (m) : (n))<br/>#define max(m,n) ((m) &gt; (n) ? (m) : (n))<br/><br/>#endif<br/>___________________________________________________________ <span class="codestrong">lib/tlpi_hdr.h</span></p>
<h5 class="h5" id="ch03lev3sec05"><strong>Error-diagnostic functions</strong></h5>
<p class="noindenta">To simplify error handling in our example programs, we use the error-diagnostic functions whose declarations are shown in <a href="ch03.xhtml#ch3ex2">Listing 3-2</a>.</p>
<p class="examplet"><span epub:type="pagebreak" id="page_52"/><a id="ch3ex2"/><strong>Listing 3-2:</strong> Declarations for common error-handling functions</p>
<p class="programsli">_____________________________________________________ <span class="codestrong">lib/error_functions.h</span><br/><br/>#ifndef ERROR_FUNCTIONS_H<br/>#define ERROR_FUNCTIONS_H<br/><br/>void errMsg(const char *format, ...);<br/><br/>#ifdef __GNUC__<br/><br/>&#160;&#160;&#160;&#160;/* This macro stops 'gcc -Wall' complaining that "control reaches<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;end of non-void function" if we use the following functions to<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;terminate main() or some other non-void function. */<br/><br/>#define NORETURN __attribute__ ((__noreturn__))<br/>#else<br/>#define NORETURN<br/>#endif<br/><br/>void errExit(const char *format, ...) NORETURN ;<br/><br/>void err_exit(const char *format, ...) NORETURN ;<br/><br/>void errExitEN(int errnum, const char *format, ...) NORETURN ;<br/><br/>void fatal(const char *format, ...) NORETURN ;<br/><br/>void usageErr(const char *format, ...) NORETURN ;<br/><br/>void cmdLineErr(const char *format, ...) NORETURN ;<br/><br/>#endif<br/>_____________________________________________________ <span class="codestrong">lib/error_functions.h</span></p>
<p class="noindent">To diagnose errors from system calls and library functions, we use <em>errMsg()</em>, <em>errExit()</em>, <em>err_exit()</em>, and <em>errExitEN()</em>.</p>
<div class="box">
<p class="programsa">#include "tlpi_hdr.h"<br/><br/>void <span class="codestrong">errMsg</span>(const char *<span class="font1">format</span>, ...);<br/>void <span class="codestrong">errExit</span>(const char *<span class="font1">format</span>, ...);<br/>void <span class="codestrong">err_exit</span>(const char *<span class="font1">format</span>, ...);<br/>void <span class="codestrong">errExitEN</span>(int <span class="font1">errnum</span>, const char *<span class="font1">format</span>, ...);</p>
</div>
<p class="noindent">The <em>errMsg()</em> function prints a message on standard error. Its argument list is the same as for <em>printf()</em>, except that a terminating newline character is automatically appended to the output string. The <em>errMsg()</em> function prints the error text corresponding to the current value of <em>errno</em>&#8212;this consists of the error name, such as <span class="literal">EPERM</span>, plus the error description as returned by <em>strerror()</em>&#8212;followed by the formatted output specified in the argument list.</p>
<p class="indent">The <em>errExit()</em> function operates like <em>errMsg()</em>, but also terminates the program, either by calling <em>exit()</em> or, if the environment variable <span class="literal">EF_DUMPCORE</span> is defined with a <span epub:type="pagebreak" id="page_53"/>nonempty string value, by calling <em>abort()</em> to produce a core dump file for use with the debugger. (We explain core dump files in <a href="ch22.xhtml#ch22lev1sec01">Section 22.1</a>.)</p>
<p class="indentb">The <em>err_exit()</em> function is similar to <em>errExit()</em>, but differs in two respects:</p>
<p class="bull">&#8226; It doesn&#8217;t flush standard output before printing the error message.</p>
<p class="bull">&#8226; It terminates the process by calling <em>_exit()</em> instead of <em>exit()</em>. This causes the process to terminate without flushing <em>stdio</em> buffers or invoking exit handlers.</p>
<p class="noindentt">The details of these differences in the operation of <em>err_exit()</em> will become clearer in <a href="ch25.xhtml#ch25">Chapter 25</a>, where we describe the differences between <em>_exit()</em> and <em>exit()</em>, and consider the treatment of <em>stdio</em> buffers and exit handlers in a child created by <em>fork()</em>. For now, we simply note that <em>err_exit()</em> is especially useful if we write a library function that creates a child process that needs to terminate because of an error. This termination should occur without flushing the child&#8217;s copy of the parent&#8217;s (i.e., the calling process&#8217;s) <em>stdio</em> buffers and without invoking exit handlers established by the parent.</p>
<p class="indent">The <em>errExitEN()</em> function is the same as <em>errExit()</em>, except that instead of printing the error text corresponding to the current value of <em>errno</em>, it prints the text corresponding to the error number (thus, the <em>EN</em> suffix) given in the argument <em>errnum</em>.</p>
<p class="indent">Mainly, we use <em>errExitEN()</em> in programs that employ the POSIX threads API. Unlike traditional UNIX system calls, which return &#8211;1 on error, the POSIX threads functions diagnose an error by returning an error number (i.e., a positive number of the type normally placed in <em>errno</em>) as their function result. (The POSIX threads functions return 0 on success.)</p>
<p class="indent">We could diagnose errors from the POSIX threads functions using code such as the following:</p>
<p class="programs">errno = pthread_create(&#38;thread, NULL, func, &#38;arg);<br/>if (errno != 0)<br/>&#160;&#160;&#160;&#160;errExit("pthread_create");</p>
<p class="noindent">However, this approach is inefficient because <em>errno</em> is defined in threaded programs as a macro that expands into a function call that returns a modifiable lvalue. Thus, each use of <em>errno</em> results in a function call. The <em>errExitEN()</em> function allows us to write a more efficient equivalent of the above code:</p>
<p class="programs">int s;<br/><br/>s = pthread_create(&#38;thread, NULL, func, &#38;arg);<br/>if (s != 0)<br/>&#160;&#160;&#160;&#160;errExitEN(s, "pthread_create");</p>
<div class="block">
<p class="noindent">In C terminology, an <em>lvalue</em> is an expression referring to a region of storage. The most common example of an lvalue is an identifier for a variable. Some operators also yield lvalues. For example, if <em>p</em> is a pointer to a storage area, then <em>*p</em> is an lvalue. Under the POSIX threads API, <em>errno</em> is redefined to be a function that returns a pointer to a thread-specific storage area (see <a href="ch31.xhtml#ch31lev1sec03">Section 31.3</a>).</p>
</div>
<p class="noindent">To diagnose other types of errors, we use <em>fatal()</em>, <em>usageErr()</em>, and <em>cmdLineErr()</em>.</p>
<div class="box">
<p class="programsa"><span epub:type="pagebreak" id="page_54"/>#include "tlpi_hdr.h"<br/><br/>void <span class="codestrong">fatal</span>(const char *<span class="font1">format</span>, ...);<br/>void <span class="codestrong">usageErr</span>(const char *<span class="font1">format</span>, ...);<br/>void <span class="codestrong">cmdLineErr</span>(const char *<span class="font1">format</span>, ...);</p>
</div>
<p class="noindent">The <em>fatal()</em> function is used to diagnose general errors, including errors from library functions that don&#8217;t set <em>errno</em>. Its argument list is the same as for <em>printf()</em>, except that a terminating newline character is automatically appended to the output string. It prints the formatted output on standard error and then terminates the program as with <em>errExit()</em>.</p>
<p class="indent">The <em>usageErr()</em> function is used to diagnose errors in command-line argument usage. It takes an argument list in the style of <em>printf()</em> and prints the string <em>Usage:</em> followed by the formatted output on standard error, and then terminates the program by calling <em>exit()</em>. (Some of the example programs in this book provide their own extended version of the <em>usageErr()</em> function, under the name <em>usageError()</em>.)</p>
<p class="indent">The <em>cmdLineErr()</em> function is similar to <em>usageErr()</em>, but is intended for diagnosing errors in the command-line arguments specified to a program.</p>
<p class="indent">The implementations of our error-diagnostic functions are shown in <a href="ch03.xhtml#ch3ex3">Listing 3-3</a>.</p>
<p class="examplet"><a id="ch3ex3"/><strong>Listing 3-3:</strong> Error-handling functions used by all programs</p>
<p class="programsli">_____________________________________________________ <span class="codestrong">lib/error_functions.c</span><br/><br/>#include &lt;stdarg.h&gt;<br/>#include "error_functions.h"<br/>#include "tlpi_hdr.h"<br/>#include "ename.c.inc"&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Defines ename and MAX_ENAME */<br/><br/>#ifdef __GNUC__<br/>__attribute__ ((__noreturn__))<br/>#endif<br/>static void<br/>terminate(Boolean useExit3)<br/>{<br/>&#160;&#160;&#160;&#160;char *s;<br/><br/>&#160;&#160;&#160;&#160;/* Dump core if EF_DUMPCORE environment variable is defined and<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;is a nonempty string; otherwise call exit(3) or _exit(2),<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;depending on the value of 'useExit3'. */<br/><br/>&#160;&#160;&#160;&#160;s = getenv("EF_DUMPCORE");<br/><br/>&#160;&#160;&#160;&#160;if (s != NULL &#38;&#38; *s != '\0')<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;abort();<br/>&#160;&#160;&#160;&#160;else if (useExit3)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;exit(EXIT_FAILURE);<br/>&#160;&#160;&#160;&#160;else<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;_exit(EXIT_FAILURE);<br/>}<br/><br/><span epub:type="pagebreak" id="page_55"/>static void<br/>outputError(Boolean useErr, int err, Boolean flushStdout,<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;const char *format, va_list ap)<br/>{<br/>#define BUF_SIZE 500<br/>&#160;&#160;&#160;&#160;char buf[BUF_SIZE], userMsg[BUF_SIZE], errText[BUF_SIZE];<br/><br/>&#160;&#160;&#160;&#160;vsnprintf(userMsg, BUF_SIZE, format, ap);<br/><br/>&#160;&#160;&#160;&#160;if (useErr)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;snprintf(errText, BUF_SIZE, " [%s %s]",<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(err &gt; 0 &#38;&#38; err &lt;= MAX_ENAME) ?<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;ename[err] : "?UNKNOWN?", strerror(err));<br/>&#160;&#160;&#160;&#160;else<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;snprintf(errText, BUF_SIZE, ":");<br/><br/>&#160;&#160;&#160;&#160;snprintf(buf, BUF_SIZE, "ERROR%s %s\n", errText, userMsg);<br/><br/>&#160;&#160;&#160;&#160;if (flushStdout)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fflush(stdout);&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Flush any pending stdout */<br/>&#160;&#160;&#160;&#160;fputs(buf, stderr);<br/>&#160;&#160;&#160;&#160;fflush(stderr);&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* In case stderr is not line-buffered */<br/>}<br/><br/>void<br/>errMsg(const char *format, ...)<br/>{<br/>&#160;&#160;&#160;&#160;va_list argList;<br/>&#160;&#160;&#160;&#160;int savedErrno;<br/><br/>&#160;&#160;&#160;&#160;savedErrno = errno;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* In case we change it here */<br/><br/>&#160;&#160;&#160;&#160;va_start(argList, format);<br/>&#160;&#160;&#160;&#160;outputError(TRUE, errno, TRUE, format, argList);<br/>&#160;&#160;&#160;&#160;va_end(argList);<br/><br/>&#160;&#160;&#160;&#160;errno = savedErrno;<br/>}<br/><br/>void<br/>errExit(const char *format, ...)<br/>{<br/>&#160;&#160;&#160;&#160;va_list argList;<br/><br/>&#160;&#160;&#160;&#160;va_start(argList, format);<br/>&#160;&#160;&#160;&#160;outputError(TRUE, errno, TRUE, format, argList);<br/>&#160;&#160;&#160;&#160;va_end(argList);<br/><br/>&#160;&#160;&#160;&#160;terminate(TRUE);<br/>}<br/><br/><span epub:type="pagebreak" id="page_56"/>void<br/>err_exit(const char *format, ...)<br/>{<br/>&#160;&#160;&#160;&#160;va_list argList;<br/><br/>&#160;&#160;&#160;&#160;va_start(argList, format);<br/>&#160;&#160;&#160;&#160;outputError(TRUE, errno, FALSE, format, argList);<br/>&#160;&#160;&#160;&#160;va_end(argList);<br/><br/>&#160;&#160;&#160;&#160;terminate(FALSE);<br/>}<br/><br/>void<br/>errExitEN(int errnum, const char *format, ...)<br/>{<br/>&#160;&#160;&#160;&#160;va_list argList;<br/><br/>&#160;&#160;&#160;&#160;va_start(argList, format);<br/>&#160;&#160;&#160;&#160;outputError(TRUE, errnum, TRUE, format, argList);<br/>&#160;&#160;&#160;&#160;va_end(argList);<br/><br/>&#160;&#160;&#160;&#160;terminate(TRUE);<br/>}<br/><br/>void<br/>fatal(const char *format, ...)<br/>{<br/>&#160;&#160;&#160;&#160;va_list argList;<br/><br/>&#160;&#160;&#160;&#160;va_start(argList, format);<br/>&#160;&#160;&#160;&#160;outputError(FALSE, 0, TRUE, format, argList);<br/>&#160;&#160;&#160;&#160;va_end(argList);<br/><br/>&#160;&#160;&#160;&#160;terminate(TRUE);<br/>}<br/><br/>void<br/>usageErr(const char *format, ...)<br/>{<br/>&#160;&#160;&#160;&#160;va_list argList;<br/><br/>&#160;&#160;&#160;&#160;fflush(stdout);&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Flush any pending stdout */<br/><br/>&#160;&#160;&#160;&#160;fprintf(stderr, "Usage: ");<br/>&#160;&#160;&#160;&#160;va_start(argList, format);<br/>&#160;&#160;&#160;&#160;vfprintf(stderr, format, argList);<br/>&#160;&#160;&#160;&#160;va_end(argList);<br/><br/>&#160;&#160;&#160;&#160;fflush(stderr);&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* In case stderr is not line-buffered */<br/>&#160;&#160;&#160;&#160;exit(EXIT_FAILURE);<br/>}<br/><br/><span epub:type="pagebreak" id="page_57"/>void<br/>cmdLineErr(const char *format, ...)<br/>{<br/>&#160;&#160;&#160;&#160;va_list argList;<br/><br/>&#160;&#160;&#160;&#160;fflush(stdout);&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Flush any pending stdout */<br/><br/>&#160;&#160;&#160;&#160;fprintf(stderr, "Command-line usage error: ");<br/>&#160;&#160;&#160;&#160;va_start(argList, format);<br/>&#160;&#160;&#160;&#160;vfprintf(stderr, format, argList);<br/>&#160;&#160;&#160;&#160;va_end(argList);<br/><br/>&#160;&#160;&#160;&#160;fflush(stderr);&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* In case stderr is not line-buffered */<br/>&#160;&#160;&#160;&#160;exit(EXIT_FAILURE);<br/>}<br/>_____________________________________________________ <span class="codestrong">lib/error_functions.c</span></p>
<p class="noindent">The file <span class="literal">ename.c.inc</span> included by <a href="ch03.xhtml#ch3ex3">Listing 3-3</a> is shown in <a href="ch03.xhtml#ch3ex4">Listing 3-4</a>. This file defines an array of strings, <em>ename</em>, that are the symbolic names corresponding to each of the possible <em>errno</em> values. Our error-handling functions use this array to print out the symbolic name corresponding to a particular error number. This is a workaround to deal with the facts that, on the one hand, the string returned by <em>strerror()</em> doesn&#8217;t identify the symbolic constant corresponding to its error message, while, on the other hand, the manual pages describe errors using their symbolic names. Printing out the symbolic name gives us an easy way of looking up the cause of an error in the manual pages.</p>
<div class="block">
<p class="noindent">The content of the <span class="literal">ename.c.inc</span> file is architecture-specific, because <em>errno</em> values vary somewhat from one Linux hardware architecture to another. The version shown in <a href="ch03.xhtml#ch3ex4">Listing 3-4</a> is for a Linux 2.6/x86-32 system. This file was built using a script (<span class="literal">lib/Build_ename.sh</span>) included in the source code distribution for this book. This script can be used to build a version of <span class="literal">ename.c.inc</span> that should be suitable for a specific hardware platform and kernel version.</p>
</div>
<p class="noindent">Note that some of the strings in the <em>ename</em> array are empty. These correspond to unused error values. Furthermore, some of the strings in <em>ename</em> consist of two error names separated by a slash. These strings correspond to cases where two symbolic error names have the same numeric value.</p>
<div class="block">
<p class="noindent">From the <span class="literal">ename.c.inc</span> file, we can see that the <span class="literal">EAGAIN</span> and <span class="literal">EWOULDBLOCK</span> errors have the same value. (SUSv3 explicitly permits this, and the values of these constants are the same on most, but not all, other UNIX systems.) These errors are returned by a system call in circumstances in which it would normally block (i.e., be forced to wait before completing), but the caller requested that the system call return an error instead of blocking. <span class="literal">EAGAIN</span> originated on System V, and it was the error returned for system calls performing I/O, semaphore operations, message queue operations, and file locking (<em>fcntl()</em>). <span class="literal">EWOULDBLOCK</span> originated on BSD, and it was returned by file locking (<em>flock()</em>) and socket-related system calls.</p>
<p class="indent">Within SUSv3, <span class="literal">EWOULDBLOCK</span> is mentioned only in the specifications of various interfaces related to sockets. For these interfaces, SUSv3 permits either <span class="literal">EAGAIN</span> or <span class="literal">EWOULDBLOCK</span> to be returned by nonblocking calls. For all other nonblocking calls, only the error <span class="literal">EAGAIN</span> is specified in SUSv3.</p>
</div>
<p class="examplet"><span epub:type="pagebreak" id="page_58"/><a id="ch3ex4"/><strong>Listing 3-4:</strong> Linux error names (x86-32 version)</p>
<p class="programsli">__________________________________________________________ <span class="codestrong">lib/ename.c.inc</span><br/><br/>static char *ename[] = {<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;&#160;0 */ "",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;&#160;1 */ "EPERM", "ENOENT", "ESRCH", "EINTR", "EIO", "ENXIO", "E2BIG",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;&#160;8 */ "ENOEXEC", "EBADF", "ECHILD", "EAGAIN/EWOULDBLOCK", "ENOMEM",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;13 */ "EACCES", "EFAULT", "ENOTBLK", "EBUSY", "EEXIST", "EXDEV",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;19 */ "ENODEV", "ENOTDIR", "EISDIR", "EINVAL", "ENFILE", "EMFILE",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;25 */ "ENOTTY", "ETXTBSY", "EFBIG", "ENOSPC", "ESPIPE", "EROFS",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;31 */ "EMLINK", "EPIPE", "EDOM", "ERANGE", "EDEADLK/EDEADLOCK",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;36 */ "ENAMETOOLONG", "ENOLCK", "ENOSYS", "ENOTEMPTY", "ELOOP", "",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;42 */ "ENOMSG", "EIDRM", "ECHRNG", "EL2NSYNC", "EL3HLT", "EL3RST",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;48 */ "ELNRNG", "EUNATCH", "ENOCSI", "EL2HLT", "EBADE", "EBADR",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;54 */ "EXFULL", "ENOANO", "EBADRQC", "EBADSLT", "", "EBFONT", "ENOSTR",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;61 */ "ENODATA", "ETIME", "ENOSR", "ENONET", "ENOPKG", "EREMOTE",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;67 */ "ENOLINK", "EADV", "ESRMNT", "ECOMM", "EPROTO", "EMULTIHOP",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;73 */ "EDOTDOT", "EBADMSG", "EOVERFLOW", "ENOTUNIQ", "EBADFD",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;78 */ "EREMCHG", "ELIBACC", "ELIBBAD", "ELIBSCN", "ELIBMAX",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;83 */ "ELIBEXEC", "EILSEQ", "ERESTART", "ESTRPIPE", "EUSERS",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;88 */ "ENOTSOCK", "EDESTADDRREQ", "EMSGSIZE", "EPROTOTYPE",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;92 */ "ENOPROTOOPT", "EPROTONOSUPPORT", "ESOCKTNOSUPPORT",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;95 */ "EOPNOTSUPP/ENOTSUP", "EPFNOSUPPORT", "EAFNOSUPPORT",<br/>&#160;&#160;&#160;&#160;/*&#160;&#160;98 */ "EADDRINUSE", "EADDRNOTAVAIL", "ENETDOWN", "ENETUNREACH",<br/>&#160;&#160;&#160;&#160;/* 102 */ "ENETRESET", "ECONNABORTED", "ECONNRESET", "ENOBUFS", "EISCONN",<br/>&#160;&#160;&#160;&#160;/* 107 */ "ENOTCONN", "ESHUTDOWN", "ETOOMANYREFS", "ETIMEDOUT",<br/>&#160;&#160;&#160;&#160;/* 111 */ "ECONNREFUSED", "EHOSTDOWN", "EHOSTUNREACH", "EALREADY",<br/>&#160;&#160;&#160;&#160;/* 115 */ "EINPROGRESS", "ESTALE", "EUCLEAN", "ENOTNAM", "ENAVAIL",<br/>&#160;&#160;&#160;&#160;/* 120 */ "EISNAM", "EREMOTEIO", "EDQUOT", "ENOMEDIUM", "EMEDIUMTYPE",<br/>&#160;&#160;&#160;&#160;/* 125 */ "ECANCELED", "ENOKEY", "EKEYEXPIRED", "EKEYREVOKED",<br/>&#160;&#160;&#160;&#160;/* 129 */ "EKEYREJECTED", "EOWNERDEAD", "ENOTRECOVERABLE", "ERFKILL"<br/>};<br/><br/>#define MAX_ENAME 132<br/>__________________________________________________________ <span class="codestrong">lib/ename.c.inc</span></p>
<h5 class="h5" id="ch03lev3sec06"><strong>Functions for parsing numeric command-line arguments</strong></h5>
<p class="noindenta">The header file in <a href="ch03.xhtml#ch3ex5">Listing 3-5</a> provides the declaration of two functions that we frequently use for parsing integer command-line arguments: <em>getInt()</em> and <em>getLong()</em>. The primary advantage of using these functions instead of <em>atoi()</em>, <em>atol()</em>, and <em>strtol()</em> is that they provide some basic validity checking of numeric arguments.</p>
<div class="box">
<p class="programsa">#include "tlpi_hdr.h"<br/><br/>int <span class="codestrong">getInt</span>(const char *<span class="font1">arg</span>, int <span class="font1">flags</span>, const char *<span class="font1">name</span>);<br/>long <span class="codestrong">getLong</span>(const char *<span class="font1">arg</span>, int <span class="font1">flags</span>, const char *<span class="font1">name</span>);</p>
<p class="right">Both return <em>arg</em> converted to numeric form</p>
</div>
<p class="noindent">The <em>getInt()</em> and <em>getLong()</em> functions convert the string pointed to by <em>arg</em> to an <em>int</em> or a <em>long</em>, respectively. If <em>arg</em> doesn&#8217;t contain a valid integer string (i.e., only digits and the characters <span class="literal">+</span> and <span class="literal">-</span>), then these functions print an error message and terminate the program.</p>
<p class="indent"><span epub:type="pagebreak" id="page_59"/>If the <em>name</em> argument is non-<span class="literal">NULL</span>, it should contain a string identifying the argument in <em>arg</em>. This string is included as part of any error message displayed by these functions.</p>
<p class="indent">The <em>flags</em> argument provides some control over the operation of the <em>getInt()</em> and <em>getLong()</em> functions. By default, these functions expect strings containing signed decimal integers. By ORing (<span class="literal">|</span>) one or more of the <span class="literal">GN_*</span> constants defined in <a href="ch03.xhtml#ch3ex5">Listing 3-5</a> into <em>flags</em>, we can select alternative bases for conversion and restrict the range of the number to being nonnegative or greater than 0.</p>
<p class="indent">The implementations of the <em>getInt()</em> and <em>getLong()</em> functions are provided in <a href="ch03.xhtml#ch3ex6">Listing 3-6</a>.</p>
<div class="block">
<p class="noindent">Although the <em>flags</em> argument allows us to enforce the range checks described in the main text, in some cases, we don&#8217;t request such checks in our example programs, even though it might seem logical to do so. For example, in <a href="ch47.xhtml#ch47ex1">Listing 47-1</a>, we don&#8217;t check the <em>init-value</em> argument. This means that the user could specify a negative number as the initial value for a semaphore, which would result in an error (<span class="literal">ERANGE</span>) in the subsequent <em>semctl()</em> system call, because a semaphore can&#8217;t have a negative value. Omitting range checks in such cases allows us to experiment not just with the correct use of system calls and library functions, but also to see what happens when invalid arguments are supplied. Real-world applications would usually impose stronger checks on their command-line arguments.</p>
</div>
<p class="examplet"><a id="ch3ex5"/><strong>Listing 3-5:</strong> Header file for <span class="literal">get_num.c</span></p>
<p class="programsli">____________________________________________________________ <span class="codestrong">lib/get_num.h</span><br/><br/>#ifndef GET_NUM_H<br/>#define GET_NUM_H<br/><br/>#define GN_NONNEG&#160;&#160;&#160;&#160;&#160;&#160;&#160;01&#160;&#160;&#160;&#160;&#160;&#160;/* Value must be &gt;= 0 */<br/>#define GN_GT_0&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;02&#160;&#160;&#160;&#160;&#160;&#160;/* Value must be &gt; 0 */<br/><br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* By default, integers are decimal */<br/>#define GN_ANY_BASE&#160;&#160;&#160;0100&#160;&#160;&#160;&#160;&#160;&#160;/* Can use any base - like strtol(3) */<br/>#define GN_BASE_8&#160;&#160;&#160;&#160;&#160;0200&#160;&#160;&#160;&#160;&#160;&#160;/* Value is expressed in octal */<br/>#define GN_BASE_16&#160;&#160;&#160;&#160;0400&#160;&#160;&#160;&#160;&#160;&#160;/* Value is expressed in hexadecimal */<br/><br/>long getLong(const char *arg, int flags, const char *name);<br/><br/>int getInt(const char *arg, int flags, const char *name);<br/><br/>#endif<br/>____________________________________________________________ <span class="codestrong">lib/get_num.h</span></p>
<p class="examplet"><a id="ch3ex6"/><strong>Listing 3-6:</strong> Functions for parsing numeric command-line arguments</p>
<p class="programsli">______________________________________________________ <span class="codestrong">lib/get_num.c</span><br/><br/>#include &lt;stdio.h&gt;<br/>#include &lt;stdlib.h&gt;<br/>#include &lt;string.h&gt;<br/>#include &lt;limits.h&gt;<br/>#include &lt;errno.h&gt;<br/>#include "get_num.h"<br/><br/><span epub:type="pagebreak" id="page_60"/>static void<br/>gnFail(const char *fname, const char *msg, const char *arg, const char *name)<br/>{<br/>&#160;&#160;&#160;&#160;fprintf(stderr, "%s error", fname);<br/>&#160;&#160;&#160;&#160;if (name != NULL)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fprintf(stderr, " (in %s)", name);<br/>&#160;&#160;&#160;&#160;fprintf(stderr, ": %s\n", msg);<br/>&#160;&#160;&#160;&#160;if (arg != NULL &#38;&#38; *arg != '\0')<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;fprintf(stderr, "&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;offending text: %s\n", arg);<br/><br/>&#160;&#160;&#160;&#160;exit(EXIT_FAILURE);<br/>}<br/><br/>static long<br/>getNum(const char *fname, const char *arg, int flags, const char *name)<br/>{<br/>&#160;&#160;&#160;&#160;long res;<br/>&#160;&#160;&#160;&#160;char *endptr;<br/>&#160;&#160;&#160;&#160;int base;<br/><br/>&#160;&#160;&#160;&#160;if (arg == NULL || *arg == '\0')<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnFail(fname, "null or empty string", arg, name);<br/><br/>&#160;&#160;&#160;&#160;base = (flags &#38; GN_ANY_BASE) ? 0 : (flags &#38; GN_BASE_8) ? 8 :<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;(flags &#38; GN_BASE_16) ? 16 : 10;<br/><br/>&#160;&#160;&#160;&#160;errno = 0;<br/>&#160;&#160;&#160;&#160;res = strtol(arg, &#38;endptr, base);<br/>&#160;&#160;&#160;&#160;if (errno != 0)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnFail(fname, "strtol() failed", arg, name);<br/><br/>&#160;&#160;&#160;&#160;if (*endptr != '\0')<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnFail(fname, "nonnumeric characters", arg, name);<br/><br/>&#160;&#160;&#160;&#160;if ((flags &#38; GN_NONNEG) &#38;&#38; res &lt; 0)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnFail(fname, "negative value not allowed", arg, name);<br/><br/>&#160;&#160;&#160;&#160;if ((flags &#38; GN_GT_0) &#38;&#38; res &lt;= 0)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnFail(fname, "value must be &gt; 0", arg, name);<br/><br/>&#160;&#160;&#160;&#160;return res;<br/>}<br/><br/>long<br/>getLong(const char *arg, int flags, const char *name)<br/>{<br/>&#160;&#160;&#160;&#160;return getNum("getLong", arg, flags, name);<br/>}<br/><br/>int<br/>getInt(const char *arg, int flags, const char *name)<br/>{<br/>&#160;&#160;&#160;&#160;long res;<br/><br/>&#160;&#160;&#160;&#160;res = getNum("getInt", arg, flags, name);<br/><br/>&#160;&#160;&#160;&#160;if (res &gt; INT_MAX || res &lt; INT_MIN)<br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;gnFail("getInt", "integer out of range", arg, name);<br/><br/>&#160;&#160;&#160;&#160;return (int) res;<br/>}<br/>______________________________________________________ <span class="codestrong">lib/get_num.c</span></p>
<h3 class="h3" id="ch03lev1sec06"><span epub:type="pagebreak" id="page_61"/><strong>3.6 Portability Issues</strong></h3>
<p class="noindenta">In this section, we consider the topic of writing portable system programs. We introduce feature test macros and the standard system data types defined by SUSv3, and then look at some other portability issues.</p>
<h4 class="h4" id="ch03lev2sec03"><strong>3.6.1 Feature Test Macros</strong></h4>
<p class="noindenta">Various standards govern the behavior of the system call and library function APIs (see <a href="ch01.xhtml#ch01lev1sec03">Section 1.3</a>). Some of these standards are defined by standards bodies such as The Open Group (Single UNIX Specification), while others are defined by the two historically important UNIX implementations: BSD and System V Release 4 (and the associated System V Interface Definition).</p>
<p class="indent">Sometimes, when writing a portable application, we may want the various header files to expose only the definitions (constants, function prototypes, and so on) that follow a particular standard. To do this, we define one or more of the <em>feature test macros</em> listed below when compiling a program. One way that we can do this is by defining the macro in the program source code before including any header files:</p>
<p class="programs">#define _BSD_SOURCE 1</p>
<p class="noindent">Alternatively, we can use the <em>&#8211;D</em> option to the C compiler:</p>
<p class="programs">$ <span class="codestrong">cc -D_BSD_SOURCE prog.c</span></p>
<div class="block">
<p class="noindent">The term <em>feature test macro</em> may seem confusing, but it makes sense if we look at things from the perspective of the implementation. The implementation decides which of the <em>features</em> available in each header it should make visible, by <em>testing</em> (with <span class="literal">#if</span>) which values the application has defined for these <em>macros</em>.</p>
</div>
<p class="noindentb">The following feature test macros are specified by the relevant standards, and consequently their usage is portable to all systems that support these standards:</p>
<p class="term"><span class="literal">_POSIX_SOURCE</span></p>
<p class="termlist">If defined (with any value), expose definitions conforming to POSIX.1-1990 and ISO C (1990). This macro is superseded by <span class="literal">_POSIX_C_SOURCE</span>.</p>
<p class="term"><span class="literal">_POSIX_C_SOURCE</span></p>
<p class="termlist">If defined with the value 1, this has the same effect as <span class="literal">_POSIX_SOURCE</span>. If defined with a value greater than or equal to 199309, also expose definitions for POSIX.1b (realtime). If defined with a value greater than or equal to 199506, also expose definitions for POSIX.1c (threads). If defined with the value 200112, also expose definitions for the POSIX.1-2001 base specification (i.e., the XSI extension is excluded). (Prior to version 2.3.3, the <span epub:type="pagebreak" id="page_62"/><em>glibc</em> headers don&#8217;t interpret the value 200112 for <span class="literal">_POSIX_C_SOURCE</span>.) If defined with the value 200809, also expose definitions for the POSIX.1-2008 base specification. (Prior to version 2.10, the <em>glibc</em> headers don&#8217;t interpret the value 200809 for <span class="literal">_POSIX_C_SOURCE</span>.)</p>
<p class="term"><span class="literal">_XOPEN_SOURCE</span></p>
<p class="termlist">If defined (with any value), expose POSIX.1, POSIX.2, and X/Open (XPG4) definitions. If defined with the value 500 or greater, also expose SUSv2 (UNIX 98 and XPG5) extensions. Setting to 600 or greater additionally exposes SUSv3 XSI (UNIX 03) extensions and C99 extensions. (Prior to version 2.2, the <em>glibc</em> headers don&#8217;t interpret the value 600 for <span class="literal">_XOPEN_SOURCE</span>.) Setting to 700 or greater also exposes SUSv4 XSI extensions. (Prior to version 2.10, the <em>glibc</em> headers don&#8217;t interpret the value 700 for <span class="literal">_XOPEN_SOURCE</span>.) The values 500, 600, and 700 for <span class="literal">_XOPEN_SOURCE</span> were chosen because SUSv2, SUSv3, and SUSv4 are Issues 5, 6, and 7, respectively, of the X/Open specifications.</p>
<p class="noindenttb">The following feature test macros listed are <em>glibc</em>-specific:</p>
<p class="term"><span class="literal">_BSD_SOURCE</span></p>
<p class="termlist">If defined (with any value), expose BSD definitions. Explicitly setting just this macro causes BSD definitions to be favored in a few cases where standards conflict.</p>
<p class="term"><span class="literal">_SVID_SOURCE</span></p>
<p class="termlist">If defined (with any value), expose System V Interface Definition (SVID) definitions.</p>
<p class="term"><span class="literal">_GNU_SOURCE</span></p>
<p class="termlist">If defined (with any value), expose all of the definitions provided by setting all of the preceding macros, as well as various GNU extensions.</p>
<p class="noindentt">When the GNU C compiler is invoked without special options, <span class="literal">_POSIX_SOURCE</span>, <span class="literal">_POSIX_C_SOURCE=200809</span> (200112 with <em>glibc</em> versions 2.5 to 2.9, or 199506 with <em>glibc</em> versions earlier than 2.4), <span class="literal">_BSD_SOURCE</span>, and <span class="literal">_SVID_SOURCE</span> are defined by default.</p>
<p class="indent">If individual macros are defined, or the compiler is invoked in one of its standard modes (e.g., <em>cc &#8211;ansi</em> or <em>cc &#8211;std=c99</em>), then only the requested definitions are supplied. There is one exception: if <span class="literal">_POSIX_C_SOURCE</span> is not otherwise defined, and the compiler is not invoked in one of its standard modes, then <span class="literal">_POSIX_C_SOURCE</span> is defined with the value 200809 (200112 with <em>glibc</em> versions 2.4 to 2.9, or 199506 with <em>glibc</em> versions earlier than 2.4).</p>
<p class="indent">Defining multiple macros is additive, so that we could, for example, use the following <em>cc</em> command to explicitly select the same macro settings as are provided by default:</p>
<p class="programs">$ <span class="codestrong">cc -D_POSIX_SOURCE -D_POSIX_C_SOURCE=199506 \</span><br/>&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;<span class="codestrong">-D_BSD_SOURCE -D_SVID_SOURCE prog.c</span></p>
<p class="noindent">The <span class="literal">&lt;features.h&gt;</span> header file and the <em>feature_test_macros(7)</em> manual page provide further information on precisely what values are assigned to each of the feature test macros.</p>
<h5 class="h5" id="ch03lev3sec07"><span epub:type="pagebreak" id="page_63"/><span class="literal"><span class="codestrong">_POSIX_C_SOURCE</span></span>, <span class="literal"><span class="codestrong">_XOPEN_SOURCE</span></span>, <strong>and POSIX.1/SUS</strong></h5>
<p class="noindenta">Only the <span class="literal">_POSIX_C_SOURCE</span> and <span class="literal">_XOPEN_SOURCE</span> feature test macros are specified in POSIX.1-2001/SUSv3, which requires that these macros be defined with the values 200112 and 600, respectively, in conforming applications. Defining <span class="literal">_POSIX_C_SOURCE</span> as 200112 provides conformance to the POSIX.1-2001 base specification (i.e., <em>POSIX conformance</em>, excluding the XSI extension). Defining <span class="literal">_XOPEN_SOURCE</span> as 600 provides conformance to SUSv3 (i.e., <em>XSI conformance</em>, the base specification plus the XSI extension). Analogous statements apply for POSIX.1-2008/SUSv4, which require that the two macros be defined with the values 200809 and 700.</p>
<p class="indent">SUSv3 specifies that setting <span class="literal">_XOPEN_SOURCE</span> to 600 should supply all of the features that are enabled if <span class="literal">_POSIX_C_SOURCE</span> is set to 200112. Thus, an application needs to define only <span class="literal">_XOPEN_SOURCE</span> for SUSv3 (i.e., XSI) conformance. SUSv4 makes an analogous specification that setting <span class="literal">_XOPEN_SOURCE</span> to 700 should supply all of the features that are enabled if <span class="literal">_POSIX_C_SOURCE</span> is set to 200809.</p>
<h5 class="h5" id="ch03lev3sec08"><strong>Feature test macros in function prototypes and source code examples</strong></h5>
<p class="noindenta">The manual pages describe which feature test macro(s) must be defined in order to make a particular constant definition or function declaration visible from a header file.</p>
<p class="indent">All of the source code examples in this book are written so that they will compile using either the default GNU C compiler options or the following options:</p>
<p class="programs">$ <span class="codestrong">cc -std=c99 -D_XOPEN_SOURCE=600</span></p>
<p class="noindent">The prototype of each function shown in this book indicates any feature test macro(s) that must be defined in order to employ that function in a program compiled with either the default compiler options or the options in the <em>cc</em> command just shown. The manual pages provide more precise descriptions of the feature test macro(s) required to expose the declaration of each function.</p>
<h4 class="h4" id="ch03lev2sec04"><strong>3.6.2 System Data Types</strong></h4>
<p class="noindentab">Various implementation data types are represented using standard C types, for example, process IDs, user IDs, and file offsets. Although it would be possible to use the C fundamental types such as <em>int</em> and <em>long</em> to declare variables storing such information, this reduces portability across UNIX systems, for the following reasons:</p>
<p class="bull">&#8226; The sizes of these fundamental types vary across UNIX implementations (e.g., a <em>long</em> may be 4 bytes on one system and 8 bytes on another), or sometimes even in different compilation environments on the same implementation. Furthermore, different implementations may use different types to represent the same information. For example, a process ID might be an <em>int</em> on one system but a <em>long</em> on another.</p>
<p class="bull">&#8226; Even on a single UNIX implementation, the types used to represent information may differ between releases of the implementation. Notable examples on Linux are user and group IDs. On Linux 2.2 and earlier, these values were represented in 16 bits. On Linux 2.4 and later, they are 32-bit values.</p>
<p class="noindentt">To avoid such portability problems, SUSv3 specifies various standard system data types, and requires an implementation to define and use these types appropriately. <span epub:type="pagebreak" id="page_64"/>Each of these types is defined using the C <span class="literal">typedef</span> feature. For example, the <em>pid_t</em> data type is intended for representing process IDs, and on Linux/x86-32 this type is defined as follows:</p>
<p class="programs">typedef int pid_t;</p>
<p class="noindent">Most of the standard system data types have names ending in <em>_t</em>. Many of them are declared in the header file <span class="literal">&lt;sys/types.h&gt;</span>, although a few are defined in other header files.</p>
<p class="indent">An application should employ these type definitions to portably declare the variables it uses. For example, the following declaration would allow an application to correctly represent process IDs on any SUSv3-conformant system:</p>
<p class="programs">pid_t mypid;</p>
<p class="noindent"><a href="ch03.xhtml#ch3table1">Table 3-1</a> lists some of the system data types we&#8217;ll encounter in this book. For certain types in this table, SUSv3 requires that the type be implemented as an <em>arithmetic type</em>. This means that the implementation may choose the underlying type as either an integer or a floating-point (real or complex) type.</p>
<p class="tablecap"><a id="ch3table1"/><strong>Table 3-1:</strong> Selected system data types</p>
<table class="all">
<thead>
<tr>
<td style="vertical-align: top;" class="table_th"><p class="table"><strong>Data type</strong></p></td>
<td style="vertical-align: top;" class="table_th"><p class="table"><strong>SUSv3 type requirement</strong></p></td>
<td style="vertical-align: top;" class="table_th1"><p class="table"><strong>Description</strong></p></td>
</tr>
</thead>
<tbody>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>blkcnt_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">signed integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">File block count (<a href="ch15.xhtml#ch15lev1sec01">Section 15.1</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>blksize_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">signed integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">File block size (<a href="ch15.xhtml#ch15lev1sec01">Section 15.1</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>cc_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Terminal special character (<a href="ch62.xhtml#ch62lev1sec04">Section 62.4</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>clock_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">integer or real-floating</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">System time in clock ticks (<a href="ch10.xhtml#ch10lev1sec07">Section 10.7</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>clockid_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">an arithmetic type</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Clock identifier for POSIX.1b clock and timer functions (<a href="ch23.xhtml#ch23lev1sec06">Section 23.6</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>comp_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">not in SUSv3</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Compressed clock ticks (<a href="ch28.xhtml#ch28lev1sec01">Section 28.1</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>dev_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">an arithmetic type</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Device number, consisting of major and minor numbers (<a href="ch15.xhtml#ch15lev1sec01">Section 15.1</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>DIR</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">no type requirement</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Directory stream (<a href="ch18.xhtml#ch18lev1sec08">Section 18.8</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>fd_set</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">structure type</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">File descriptor set for <em>select()</em> (<a href="ch63.xhtml#ch63lev2sec03">Section 63.2.1</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>fsblkcnt_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">File-system block count (<a href="ch14.xhtml#ch14lev1sec11">Section 14.11</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>fsfilcnt_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">File count (<a href="ch14.xhtml#ch14lev1sec11">Section 14.11</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>gid_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Numeric group identifier (<a href="ch08.xhtml#ch08lev1sec03">Section 8.3</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>id_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">A generic type for holding identifiers; large enough to hold at least <em>pid_t</em>, <em>uid_t</em>, and <em>gid_t</em></p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>in_addr_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">32-bit unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">IPv4 address (<a href="ch59.xhtml#ch59lev1sec04">Section 59.4</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>in_port_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">16-bit unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">IP port number (<a href="ch59.xhtml#ch59lev1sec04">Section 59.4</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>ino_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">File i-node number (<a href="ch15.xhtml#ch15lev1sec01">Section 15.1</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>key_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">an arithmetic type</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">System V IPC key (<a href="ch45.xhtml#ch45lev1sec02">Section 45.2</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>mode_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">File permissions and type (<a href="ch15.xhtml#ch15lev1sec01">Section 15.1</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>mqd_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">no type requirement, but shall not be an array type</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">POSIX message queue descriptor</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>msglen_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Number of bytes allowed in System V message queue (<a href="ch46.xhtml#ch46lev1sec04">Section 46.4</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><span epub:type="pagebreak" id="page_65"/><em>msgqnum_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Counts of messages in System V message queue (<a href="ch46.xhtml#ch46lev1sec04">Section 46.4</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>nfds_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Number of file descriptors for <em>poll()</em> (<a href="ch63.xhtml#ch63lev2sec04">Section 63.2.2</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>nlink_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Count of (hard) links to a file (<a href="ch15.xhtml#ch15lev1sec01">Section 15.1</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>off_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">signed integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">File offset or size (<a href="ch04.xhtml#ch04lev1sec07">Sections 4.7</a> and <a href="ch15.xhtml#ch15lev1sec01">15.1</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>pid_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">signed integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Process ID, process group ID, or session ID (<a href="ch06.xhtml#ch06lev1sec02">Sections 6.2</a>, <a href="ch34.xhtml#ch34lev1sec02">34.2</a>, and <a href="ch34.xhtml#ch34lev1sec03">34.3</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>ptrdiff_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">signed integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Difference between two pointer values, as a signed integer</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>rlim_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Resource limit (<a href="ch36.xhtml#ch36lev1sec02">Section 36.2</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>sa_family_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Socket address family (<a href="ch56.xhtml#ch56lev1sec04">Section 56.4</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>shmatt_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Count of attached processes for a System V shared memory segment (<a href="ch48.xhtml#ch48lev1sec08">Section 48.8</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>sig_atomic_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Data type that can be atomically accessed (<a href="ch21.xhtml#ch21lev2sec03">Section 21.1.3</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>siginfo_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">structure type</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Information about the origin of a signal (<a href="ch21.xhtml#ch21lev1sec04">Section 21.4</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>sigset_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">integer or structure type</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Signal set (<a href="ch20.xhtml#ch20lev1sec09">Section 20.9</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>size_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Size of an object in bytes</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>socklen_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">integer type of at least 32 bits</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Size of a socket address structure in bytes (<a href="ch56.xhtml#ch56lev1sec03">Section 56.3</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>speed_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Terminal line speed (<a href="ch62.xhtml#ch62lev1sec07">Section 62.7</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>ssize_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">signed integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Byte count or (negative) error indication</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>stack_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">structure type</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Description of an alternate signal stack (<a href="ch21.xhtml#ch21lev1sec03">Section 21.3</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>suseconds_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">signed integer allowing range [&#8211;1, 1000000]</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Microsecond time interval (<a href="ch10.xhtml#ch10lev1sec01">Section 10.1</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>tcflag_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">unsigned integer</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Terminal mode flag bit mask (<a href="ch62.xhtml#ch62lev1sec02">Section 62.2</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>time_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">integer or real-floating</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Calendar time in seconds since the Epoch (<a href="ch10.xhtml#ch10lev1sec01">Section 10.1</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_1"><p class="table"><em>timer_t</em></p></td>
<td style="vertical-align: top;" class="table_1"><p class="table">an arithmetic type</p></td>
<td style="vertical-align: top;" class="table_2"><p class="table">Timer identifier for POSIX.1b interval timer functions (<a href="ch23.xhtml#ch23lev1sec06">Section 23.6</a>)</p></td>
</tr>
<tr>
<td style="vertical-align: top;" class="table_3"><p class="table"><em>uid_t</em></p></td>
<td style="vertical-align: top;" class="table_3"><p class="table">integer</p></td>
<td style="vertical-align: top;" class="table_3a"><p class="table">Numeric user identifier (<a href="ch08.xhtml#ch08lev1sec01">Section 8.1</a>)</p></td>
</tr>
</tbody>
</table>
<p class="noindent">When discussing the data types in <a href="ch03.xhtml#ch3table1">Table 3-1</a> in later chapters, we&#8217;ll often make statements that some type &#8220;is an integer type [specified by SUSv3].&#8221; This means that SUSv3 requires the type to be defined as an integer, but doesn&#8217;t require that a particular native integer type (e.g., <em>short</em>, <em>int</em>, or <em>long</em>) be used. (Often, we won&#8217;t say which particular native data type is actually used to represent each of the system data types in Linux, because a portable application should be written so that it doesn&#8217;t care which data type is used.)</p>
<h5 class="h5" id="ch03lev3sec09"><span epub:type="pagebreak" id="page_66"/><strong>Printing system data type values</strong></h5>
<p class="noindenta">When printing values of one of the numeric system data types shown in <a href="ch03.xhtml#ch3table1">Table 3-1</a> (e.g., <em>pid_t</em> and <em>uid_t</em>), we must be careful not to include a representation dependency in the <em>printf()</em> call. A representation dependency can occur because C&#8217;s argument promotion rules convert values of type <em>short</em> to <em>int</em>, but leave values of type <em>int</em> and <em>long</em> unchanged. This means that, depending on the definition of the system data type, either an <em>int</em> or a <em>long</em> is passed in the <em>printf()</em> call. However, because <em>printf()</em> has no way to determine the types of its arguments at run time, the caller must explicitly provide this information using the <span class="literal">%d</span> or <span class="literal">%ld</span> format specifier. The problem is that simply coding one of these specifiers within the <em>printf()</em> call creates an implementation dependency. The usual solution is to use the <span class="literal">%ld</span> specifier and always cast the corresponding value to <em>long</em>, like so:</p>
<p class="programs">pid_t mypid;<br/><br/>mypid = getpid();&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Returns process ID of calling process */<br/>printf("My PID is %ld\n", (long) mypid);</p>
<p class="noindent">We make one exception to the above technique. Because the <em>off_t</em> data type is the size of <em>long long</em> in some compilation environments, we cast <em>off_t</em> values to this type and use the <span class="literal">%lld</span> specifier, as described in <a href="ch05.xhtml#ch05lev1sec10">Section 5.10</a>.</p>
<div class="block">
<p class="noindent">The C99 standard defines the <span class="literal">z</span> length modifier for <em>printf()</em>, to indicate that the following integer conversion corresponds to a <em>size_t</em> or <em>ssize_t</em> type. Thus, we could write <span class="literal">%zd</span> instead of using <span class="literal">%ld</span> plus a cast for <em>ssize_t</em>, and analogously <span class="literal">%zu</span> for <em>size_t</em>. Although this specifier is available in <em>glibc</em>, we avoid it because it is not available on all UNIX implementations.</p>
<p class="indent">The C99 standard also defines the <span class="literal">j</span> length modifier, which specifies that the corresponding argument is of type <em>intmax_t</em> (or <em>uintmax_t</em>), an integer type that is guaranteed to be large enough to be able to represent an integer of any type. Ultimately, the use of an <em>(intmax_t)</em> cast plus the <span class="literal">%jd</span> specifier should replace the <em>(long)</em> cast plus the <span class="literal">%ld</span> specifier as the best way of printing numeric system data type values, since the former approach also handles <em>long long</em> values and any extended integer types such as <em>int128_t</em>. However, (again) we avoid this technique since it is not possible on all UNIX implementations.</p>
</div>
<h4 class="h4" id="ch03lev2sec05"><strong>3.6.3 Miscellaneous Portability Issues</strong></h4>
<p class="noindenta">In this section, we consider a few other portability issues that we may encounter when writing system programs.</p>
<h5 class="h5" id="ch03lev3sec10"><strong>Initializing and using structures</strong></h5>
<p class="noindenta">Each UNIX implementation specifies a range of standard structures that are used in various system calls and library functions. As an example, consider the <em>sembuf</em> structure, which is used to represent a semaphore operation to be performed by the <em>semop()</em> system call:</p>
<p class="programs">struct sembuf {<br/>&#160;&#160;&#160;&#160;unsigned short sem_num;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Semaphore number */<br/>&#160;&#160;&#160;&#160;short&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sem_op;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Operation to be performed */<br/>&#160;&#160;&#160;&#160;short&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;sem_flg;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;/* Operation flags */<br/>};</p>
<p class="noindentb"><span epub:type="pagebreak" id="page_67"/>Although SUSv3 specifies structures such as <em>sembuf</em>, it is important to realize the following:</p>
<p class="bull">&#8226; In general, the order of field definitions within such structures is not specified.</p>
<p class="bull">&#8226; In some cases, extra implementation-specific fields may be included in such structures.</p>
<p class="noindentt">Consequently, it is not portable to use a structure initializer such as the following:</p>
<p class="programs">struct sembuf s = { 3, -1, SEM_UNDO };</p>
<p class="noindent">Although this initializer will work on Linux, it won&#8217;t work on another implementation where the fields in the <em>sembuf</em> structure are defined in a different order. To portably initialize such structures, we must use explicit assignment statements, as in the following:</p>
<p class="programs">struct sembuf s;<br/><br/>s.sem_num = 3;<br/>s.sem_op = -1;<br/>s.sem_flg = SEM_UNDO;</p>
<p class="noindent">If we are using C99, then we can employ that language&#8217;s new syntax for structure initializers to write an equivalent initialization:</p>
<p class="programs">struct sembuf s = { .sem_num = 3, .sem_op = -1, .sem_flg = SEM_UNDO };</p>
<p class="noindent">Considerations about the order of the members of standard structures also apply if we want to write the contents of a standard structure to a file. To do this portably, we can&#8217;t simply do a binary write of the structure. Instead, the structure fields must be written individually (probably in text form) in a specified order.</p>
<h5 class="h5" id="ch03lev3sec11"><strong>Using macros that may not be present on all implementations</strong></h5>
<p class="noindenta">In some cases, a macro may not be defined on all UNIX implementations. For example, the <span class="literal">WCOREDUMP()</span> macro (which checks whether a child process produced a core dump file) is widely available, but it is not specified in SUSv3. Therefore, this macro might not be present on some UNIX implementations. In order to portably handle such possibilities, we can use the C preprocessor <span class="literal">#ifdef</span> directive, as in the following example:</p>
<p class="programs">#ifdef WCOREDUMP<br/>&#160;&#160;&#160;&#160;/* Use WCOREDUMP() macro */<br/>#endif</p>
<h5 class="h5" id="ch03lev3sec12"><strong>Variation in required header files across implementations</strong></h5>
<p class="noindenta">In some cases, the header files required to prototype various system calls and library functions vary across UNIX implementations. In this book, we show the requirements on Linux and note any variations from SUSv3.</p>
<p class="indent">Some of the function synopses in this book show a particular header file with the accompanying comment <em>/* For portability */</em>. This indicates that the header file <span epub:type="pagebreak" id="page_68"/>is not required on Linux or by SUSv3, but because some other (especially older) implementations may require it, we should include it in portable programs.</p>
<div class="block">
<p class="noindent">For many of the functions that it specified, POSIX.1-1990 required that the header <span class="literal">&lt;sys/types.h&gt;</span> be included before any other headers associated with the function. However, this requirement was redundant, because most contemporary UNIX implementations did not require applications to include this header for these functions. Consequently, SUSv1 removed this requirement. Nevertheless, when writing portable programs, it is wise to make this one of the first header files included. (However, we omit this header from our example programs because it is not required on Linux and omitting it allows us to make the example programs one line shorter.)</p>
</div>
<h3 class="h3" id="ch03lev1sec07"><strong>3.7 Summary</strong></h3>
<p class="noindenta">System calls allow processes to request services from the kernel. Even the simplest system calls have a significant overhead by comparison with a user-space function call, since the system must temporarily switch to kernel mode to execute the system call, and the kernel must verify system call arguments and transfer data between user memory and kernel memory.</p>
<p class="indent">The standard C library provides a multitude of library functions that perform a wide range of tasks. Some library functions employ system calls to do their work; others perform tasks entirely within user space. On Linux, the usual standard C library implementation that is used is <em>glibc</em>.</p>
<p class="indent">Most system calls and library functions return a status indicating whether a call has succeeded or failed. Such status returns should always be checked.</p>
<p class="indent">We introduced a number of functions that we have implemented for use in the example programs in this book. The tasks performed by these functions include diagnosing errors and parsing command-line arguments.</p>
<p class="indent">We discussed various guidelines and techniques that can help us write portable system programs that run on any standards-conformant system.</p>
<p class="indent">When compiling an application, we can define various feature test macros that control the definitions exposed by header files. This is useful if we want to ensure that a program conforms to some formal or implementation-defined standard(s).</p>
<p class="indent">We can improve the portability of system programs by using the system data types defined in various standards, rather than native C types. SUSv3 specifies a wide range of system data types that an implementation should support and that an application should employ.</p>
<h3 class="h3" id="ch03lev1sec08"><strong>3.8 Exercise</strong></h3>
<p class="exer"><a id="ch3exe1"/><strong>3-1.</strong>&#160;&#160;&#160;&#160;&#160;When using the Linux-specific <em>reboot()</em> system call to reboot the system, the second argument, <em>magic2</em>, must be specified as one of a set of magic numbers (e.g., <span class="literal">LINUX_REBOOT_MAGIC2</span>). What is the significance of these numbers? (Converting them to hexadecimal provides a clue.)</p>
</body>
</html>
